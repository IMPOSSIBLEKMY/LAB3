
LAB3_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080037fc  080037fc  000137fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003820  08003820  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08003820  08003820  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003820  08003820  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003820  08003820  00013820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003824  08003824  00013824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  2000006c  08003894  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08003894  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b56  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab3  00000000  00000000  00029beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002b6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  0002c130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b84  00000000  00000000  0002cac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b992  00000000  00000000  0004364c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082993  00000000  00000000  0004efde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1971  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a50  00000000  00000000  000d19c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	080037e4 	.word	0x080037e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	080037e4 	.word	0x080037e4

0800014c <display7SEGvertical>:
int buffer_7SEG_vertical[2] = {0, 0};

int buffer_7SEG_horizontal[2] = {0, 0};

void display7SEGvertical(int num)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 81b2 	bhi.w	80004c0 <display7SEGvertical+0x374>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <display7SEGvertical+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001df 	.word	0x080001df
 800016c:	08000231 	.word	0x08000231
 8000170:	08000283 	.word	0x08000283
 8000174:	080002d5 	.word	0x080002d5
 8000178:	08000327 	.word	0x08000327
 800017c:	08000379 	.word	0x08000379
 8000180:	080003cb 	.word	0x080003cb
 8000184:	0800041d 	.word	0x0800041d
 8000188:	0800046f 	.word	0x0800046f
	switch(num)
	{
	    case 0:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2140      	movs	r1, #64	; 0x40
 8000190:	48cd      	ldr	r0, [pc, #820]	; (80004c8 <display7SEGvertical+0x37c>)
 8000192:	f002 fb12 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	2180      	movs	r1, #128	; 0x80
 800019a:	48cb      	ldr	r0, [pc, #812]	; (80004c8 <display7SEGvertical+0x37c>)
 800019c:	f002 fb0d 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80001a0:	2200      	movs	r2, #0
 80001a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001a6:	48c8      	ldr	r0, [pc, #800]	; (80004c8 <display7SEGvertical+0x37c>)
 80001a8:	f002 fb07 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 80001ac:	2200      	movs	r2, #0
 80001ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001b2:	48c5      	ldr	r0, [pc, #788]	; (80004c8 <display7SEGvertical+0x37c>)
 80001b4:	f002 fb01 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 80001b8:	2200      	movs	r2, #0
 80001ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001be:	48c2      	ldr	r0, [pc, #776]	; (80004c8 <display7SEGvertical+0x37c>)
 80001c0:	f002 fafb 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 80001c4:	2200      	movs	r2, #0
 80001c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001ca:	48bf      	ldr	r0, [pc, #764]	; (80004c8 <display7SEGvertical+0x37c>)
 80001cc:	f002 faf5 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 80001d0:	2201      	movs	r2, #1
 80001d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001d6:	48bc      	ldr	r0, [pc, #752]	; (80004c8 <display7SEGvertical+0x37c>)
 80001d8:	f002 faef 	bl	80027ba <HAL_GPIO_WritePin>
	        break;
 80001dc:	e170      	b.n	80004c0 <display7SEGvertical+0x374>
	    }
	    case 1:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_SET);
 80001de:	2201      	movs	r2, #1
 80001e0:	2140      	movs	r1, #64	; 0x40
 80001e2:	48b9      	ldr	r0, [pc, #740]	; (80004c8 <display7SEGvertical+0x37c>)
 80001e4:	f002 fae9 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2180      	movs	r1, #128	; 0x80
 80001ec:	48b6      	ldr	r0, [pc, #728]	; (80004c8 <display7SEGvertical+0x37c>)
 80001ee:	f002 fae4 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80001f2:	2200      	movs	r2, #0
 80001f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001f8:	48b3      	ldr	r0, [pc, #716]	; (80004c8 <display7SEGvertical+0x37c>)
 80001fa:	f002 fade 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 80001fe:	2201      	movs	r2, #1
 8000200:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000204:	48b0      	ldr	r0, [pc, #704]	; (80004c8 <display7SEGvertical+0x37c>)
 8000206:	f002 fad8 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 800020a:	2201      	movs	r2, #1
 800020c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000210:	48ad      	ldr	r0, [pc, #692]	; (80004c8 <display7SEGvertical+0x37c>)
 8000212:	f002 fad2 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 8000216:	2201      	movs	r2, #1
 8000218:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800021c:	48aa      	ldr	r0, [pc, #680]	; (80004c8 <display7SEGvertical+0x37c>)
 800021e:	f002 facc 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 8000222:	2201      	movs	r2, #1
 8000224:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000228:	48a7      	ldr	r0, [pc, #668]	; (80004c8 <display7SEGvertical+0x37c>)
 800022a:	f002 fac6 	bl	80027ba <HAL_GPIO_WritePin>
	        break;
 800022e:	e147      	b.n	80004c0 <display7SEGvertical+0x374>
	    }
	    case 2:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000230:	2200      	movs	r2, #0
 8000232:	2140      	movs	r1, #64	; 0x40
 8000234:	48a4      	ldr	r0, [pc, #656]	; (80004c8 <display7SEGvertical+0x37c>)
 8000236:	f002 fac0 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 800023a:	2200      	movs	r2, #0
 800023c:	2180      	movs	r1, #128	; 0x80
 800023e:	48a2      	ldr	r0, [pc, #648]	; (80004c8 <display7SEGvertical+0x37c>)
 8000240:	f002 fabb 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_SET);
 8000244:	2201      	movs	r2, #1
 8000246:	f44f 7180 	mov.w	r1, #256	; 0x100
 800024a:	489f      	ldr	r0, [pc, #636]	; (80004c8 <display7SEGvertical+0x37c>)
 800024c:	f002 fab5 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000250:	2200      	movs	r2, #0
 8000252:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000256:	489c      	ldr	r0, [pc, #624]	; (80004c8 <display7SEGvertical+0x37c>)
 8000258:	f002 faaf 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000262:	4899      	ldr	r0, [pc, #612]	; (80004c8 <display7SEGvertical+0x37c>)
 8000264:	f002 faa9 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 8000268:	2201      	movs	r2, #1
 800026a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800026e:	4896      	ldr	r0, [pc, #600]	; (80004c8 <display7SEGvertical+0x37c>)
 8000270:	f002 faa3 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000274:	2200      	movs	r2, #0
 8000276:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800027a:	4893      	ldr	r0, [pc, #588]	; (80004c8 <display7SEGvertical+0x37c>)
 800027c:	f002 fa9d 	bl	80027ba <HAL_GPIO_WritePin>
	        break;
 8000280:	e11e      	b.n	80004c0 <display7SEGvertical+0x374>
	    }
	    case 3:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000282:	2200      	movs	r2, #0
 8000284:	2140      	movs	r1, #64	; 0x40
 8000286:	4890      	ldr	r0, [pc, #576]	; (80004c8 <display7SEGvertical+0x37c>)
 8000288:	f002 fa97 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 800028c:	2200      	movs	r2, #0
 800028e:	2180      	movs	r1, #128	; 0x80
 8000290:	488d      	ldr	r0, [pc, #564]	; (80004c8 <display7SEGvertical+0x37c>)
 8000292:	f002 fa92 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000296:	2200      	movs	r2, #0
 8000298:	f44f 7180 	mov.w	r1, #256	; 0x100
 800029c:	488a      	ldr	r0, [pc, #552]	; (80004c8 <display7SEGvertical+0x37c>)
 800029e:	f002 fa8c 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 80002a2:	2200      	movs	r2, #0
 80002a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002a8:	4887      	ldr	r0, [pc, #540]	; (80004c8 <display7SEGvertical+0x37c>)
 80002aa:	f002 fa86 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 80002ae:	2201      	movs	r2, #1
 80002b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002b4:	4884      	ldr	r0, [pc, #528]	; (80004c8 <display7SEGvertical+0x37c>)
 80002b6:	f002 fa80 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 80002ba:	2201      	movs	r2, #1
 80002bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002c0:	4881      	ldr	r0, [pc, #516]	; (80004c8 <display7SEGvertical+0x37c>)
 80002c2:	f002 fa7a 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 80002c6:	2200      	movs	r2, #0
 80002c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002cc:	487e      	ldr	r0, [pc, #504]	; (80004c8 <display7SEGvertical+0x37c>)
 80002ce:	f002 fa74 	bl	80027ba <HAL_GPIO_WritePin>
	        break;
 80002d2:	e0f5      	b.n	80004c0 <display7SEGvertical+0x374>
	    }
	    case 4:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2140      	movs	r1, #64	; 0x40
 80002d8:	487b      	ldr	r0, [pc, #492]	; (80004c8 <display7SEGvertical+0x37c>)
 80002da:	f002 fa6e 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	2180      	movs	r1, #128	; 0x80
 80002e2:	4879      	ldr	r0, [pc, #484]	; (80004c8 <display7SEGvertical+0x37c>)
 80002e4:	f002 fa69 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ee:	4876      	ldr	r0, [pc, #472]	; (80004c8 <display7SEGvertical+0x37c>)
 80002f0:	f002 fa63 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002fa:	4873      	ldr	r0, [pc, #460]	; (80004c8 <display7SEGvertical+0x37c>)
 80002fc:	f002 fa5d 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8000300:	2201      	movs	r2, #1
 8000302:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000306:	4870      	ldr	r0, [pc, #448]	; (80004c8 <display7SEGvertical+0x37c>)
 8000308:	f002 fa57 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000312:	486d      	ldr	r0, [pc, #436]	; (80004c8 <display7SEGvertical+0x37c>)
 8000314:	f002 fa51 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800031e:	486a      	ldr	r0, [pc, #424]	; (80004c8 <display7SEGvertical+0x37c>)
 8000320:	f002 fa4b 	bl	80027ba <HAL_GPIO_WritePin>
	        break;
 8000324:	e0cc      	b.n	80004c0 <display7SEGvertical+0x374>
	    }
	    case 5:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	2140      	movs	r1, #64	; 0x40
 800032a:	4867      	ldr	r0, [pc, #412]	; (80004c8 <display7SEGvertical+0x37c>)
 800032c:	f002 fa45 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_SET);
 8000330:	2201      	movs	r2, #1
 8000332:	2180      	movs	r1, #128	; 0x80
 8000334:	4864      	ldr	r0, [pc, #400]	; (80004c8 <display7SEGvertical+0x37c>)
 8000336:	f002 fa40 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 800033a:	2200      	movs	r2, #0
 800033c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000340:	4861      	ldr	r0, [pc, #388]	; (80004c8 <display7SEGvertical+0x37c>)
 8000342:	f002 fa3a 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	f44f 7100 	mov.w	r1, #512	; 0x200
 800034c:	485e      	ldr	r0, [pc, #376]	; (80004c8 <display7SEGvertical+0x37c>)
 800034e:	f002 fa34 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8000352:	2201      	movs	r2, #1
 8000354:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000358:	485b      	ldr	r0, [pc, #364]	; (80004c8 <display7SEGvertical+0x37c>)
 800035a:	f002 fa2e 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000364:	4858      	ldr	r0, [pc, #352]	; (80004c8 <display7SEGvertical+0x37c>)
 8000366:	f002 fa28 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 800036a:	2200      	movs	r2, #0
 800036c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000370:	4855      	ldr	r0, [pc, #340]	; (80004c8 <display7SEGvertical+0x37c>)
 8000372:	f002 fa22 	bl	80027ba <HAL_GPIO_WritePin>
	        break;
 8000376:	e0a3      	b.n	80004c0 <display7SEGvertical+0x374>
	    }
	    case 6:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2140      	movs	r1, #64	; 0x40
 800037c:	4852      	ldr	r0, [pc, #328]	; (80004c8 <display7SEGvertical+0x37c>)
 800037e:	f002 fa1c 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_SET);
 8000382:	2201      	movs	r2, #1
 8000384:	2180      	movs	r1, #128	; 0x80
 8000386:	4850      	ldr	r0, [pc, #320]	; (80004c8 <display7SEGvertical+0x37c>)
 8000388:	f002 fa17 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000392:	484d      	ldr	r0, [pc, #308]	; (80004c8 <display7SEGvertical+0x37c>)
 8000394:	f002 fa11 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800039e:	484a      	ldr	r0, [pc, #296]	; (80004c8 <display7SEGvertical+0x37c>)
 80003a0:	f002 fa0b 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003aa:	4847      	ldr	r0, [pc, #284]	; (80004c8 <display7SEGvertical+0x37c>)
 80003ac:	f002 fa05 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003b6:	4844      	ldr	r0, [pc, #272]	; (80004c8 <display7SEGvertical+0x37c>)
 80003b8:	f002 f9ff 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003c2:	4841      	ldr	r0, [pc, #260]	; (80004c8 <display7SEGvertical+0x37c>)
 80003c4:	f002 f9f9 	bl	80027ba <HAL_GPIO_WritePin>
	        break;
 80003c8:	e07a      	b.n	80004c0 <display7SEGvertical+0x374>
	    }
	    case 7:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2140      	movs	r1, #64	; 0x40
 80003ce:	483e      	ldr	r0, [pc, #248]	; (80004c8 <display7SEGvertical+0x37c>)
 80003d0:	f002 f9f3 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	2180      	movs	r1, #128	; 0x80
 80003d8:	483b      	ldr	r0, [pc, #236]	; (80004c8 <display7SEGvertical+0x37c>)
 80003da:	f002 f9ee 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80003de:	2200      	movs	r2, #0
 80003e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e4:	4838      	ldr	r0, [pc, #224]	; (80004c8 <display7SEGvertical+0x37c>)
 80003e6:	f002 f9e8 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 80003ea:	2201      	movs	r2, #1
 80003ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003f0:	4835      	ldr	r0, [pc, #212]	; (80004c8 <display7SEGvertical+0x37c>)
 80003f2:	f002 f9e2 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 80003f6:	2201      	movs	r2, #1
 80003f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003fc:	4832      	ldr	r0, [pc, #200]	; (80004c8 <display7SEGvertical+0x37c>)
 80003fe:	f002 f9dc 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 8000402:	2201      	movs	r2, #1
 8000404:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000408:	482f      	ldr	r0, [pc, #188]	; (80004c8 <display7SEGvertical+0x37c>)
 800040a:	f002 f9d6 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 800040e:	2201      	movs	r2, #1
 8000410:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000414:	482c      	ldr	r0, [pc, #176]	; (80004c8 <display7SEGvertical+0x37c>)
 8000416:	f002 f9d0 	bl	80027ba <HAL_GPIO_WritePin>
	        break;
 800041a:	e051      	b.n	80004c0 <display7SEGvertical+0x374>
	    }
	    case 8:
	    {
	    	HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	2140      	movs	r1, #64	; 0x40
 8000420:	4829      	ldr	r0, [pc, #164]	; (80004c8 <display7SEGvertical+0x37c>)
 8000422:	f002 f9ca 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8000426:	2200      	movs	r2, #0
 8000428:	2180      	movs	r1, #128	; 0x80
 800042a:	4827      	ldr	r0, [pc, #156]	; (80004c8 <display7SEGvertical+0x37c>)
 800042c:	f002 f9c5 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000436:	4824      	ldr	r0, [pc, #144]	; (80004c8 <display7SEGvertical+0x37c>)
 8000438:	f002 f9bf 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000442:	4821      	ldr	r0, [pc, #132]	; (80004c8 <display7SEGvertical+0x37c>)
 8000444:	f002 f9b9 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800044e:	481e      	ldr	r0, [pc, #120]	; (80004c8 <display7SEGvertical+0x37c>)
 8000450:	f002 f9b3 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800045a:	481b      	ldr	r0, [pc, #108]	; (80004c8 <display7SEGvertical+0x37c>)
 800045c:	f002 f9ad 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000466:	4818      	ldr	r0, [pc, #96]	; (80004c8 <display7SEGvertical+0x37c>)
 8000468:	f002 f9a7 	bl	80027ba <HAL_GPIO_WritePin>
	        break;
 800046c:	e028      	b.n	80004c0 <display7SEGvertical+0x374>
	    }
	    case 9:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 800046e:	2200      	movs	r2, #0
 8000470:	2140      	movs	r1, #64	; 0x40
 8000472:	4815      	ldr	r0, [pc, #84]	; (80004c8 <display7SEGvertical+0x37c>)
 8000474:	f002 f9a1 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	2180      	movs	r1, #128	; 0x80
 800047c:	4812      	ldr	r0, [pc, #72]	; (80004c8 <display7SEGvertical+0x37c>)
 800047e:	f002 f99c 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000488:	480f      	ldr	r0, [pc, #60]	; (80004c8 <display7SEGvertical+0x37c>)
 800048a:	f002 f996 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 800048e:	2200      	movs	r2, #0
 8000490:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000494:	480c      	ldr	r0, [pc, #48]	; (80004c8 <display7SEGvertical+0x37c>)
 8000496:	f002 f990 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 800049a:	2201      	movs	r2, #1
 800049c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004a0:	4809      	ldr	r0, [pc, #36]	; (80004c8 <display7SEGvertical+0x37c>)
 80004a2:	f002 f98a 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 80004a6:	2200      	movs	r2, #0
 80004a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004ac:	4806      	ldr	r0, [pc, #24]	; (80004c8 <display7SEGvertical+0x37c>)
 80004ae:	f002 f984 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 80004b2:	2200      	movs	r2, #0
 80004b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004b8:	4803      	ldr	r0, [pc, #12]	; (80004c8 <display7SEGvertical+0x37c>)
 80004ba:	f002 f97e 	bl	80027ba <HAL_GPIO_WritePin>
	        break;
 80004be:	bf00      	nop
	    }
	}

}
 80004c0:	bf00      	nop
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40010c00 	.word	0x40010c00

080004cc <display7SEGhorizontal>:

void display7SEGhorizontal(int num)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2b09      	cmp	r3, #9
 80004d8:	f200 81b2 	bhi.w	8000840 <display7SEGhorizontal+0x374>
 80004dc:	a201      	add	r2, pc, #4	; (adr r2, 80004e4 <display7SEGhorizontal+0x18>)
 80004de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e2:	bf00      	nop
 80004e4:	0800050d 	.word	0x0800050d
 80004e8:	0800055f 	.word	0x0800055f
 80004ec:	080005b1 	.word	0x080005b1
 80004f0:	08000603 	.word	0x08000603
 80004f4:	08000655 	.word	0x08000655
 80004f8:	080006a7 	.word	0x080006a7
 80004fc:	080006f9 	.word	0x080006f9
 8000500:	0800074b 	.word	0x0800074b
 8000504:	0800079d 	.word	0x0800079d
 8000508:	080007ef 	.word	0x080007ef
	switch(num)
	{
	    case 0:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	2140      	movs	r1, #64	; 0x40
 8000510:	48cd      	ldr	r0, [pc, #820]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000512:	f002 f952 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	2180      	movs	r1, #128	; 0x80
 800051a:	48cb      	ldr	r0, [pc, #812]	; (8000848 <display7SEGhorizontal+0x37c>)
 800051c:	f002 f94d 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000526:	48c8      	ldr	r0, [pc, #800]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000528:	f002 f947 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000532:	48c5      	ldr	r0, [pc, #788]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000534:	f002 f941 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800053e:	48c2      	ldr	r0, [pc, #776]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000540:	f002 f93b 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800054a:	48bf      	ldr	r0, [pc, #764]	; (8000848 <display7SEGhorizontal+0x37c>)
 800054c:	f002 f935 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000556:	48bc      	ldr	r0, [pc, #752]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000558:	f002 f92f 	bl	80027ba <HAL_GPIO_WritePin>
	        break;
 800055c:	e170      	b.n	8000840 <display7SEGhorizontal+0x374>
	    }
	    case 1:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 800055e:	2201      	movs	r2, #1
 8000560:	2140      	movs	r1, #64	; 0x40
 8000562:	48b9      	ldr	r0, [pc, #740]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000564:	f002 f929 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	2180      	movs	r1, #128	; 0x80
 800056c:	48b6      	ldr	r0, [pc, #728]	; (8000848 <display7SEGhorizontal+0x37c>)
 800056e:	f002 f924 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000578:	48b3      	ldr	r0, [pc, #716]	; (8000848 <display7SEGhorizontal+0x37c>)
 800057a:	f002 f91e 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000584:	48b0      	ldr	r0, [pc, #704]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000586:	f002 f918 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000590:	48ad      	ldr	r0, [pc, #692]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000592:	f002 f912 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 8000596:	2201      	movs	r2, #1
 8000598:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800059c:	48aa      	ldr	r0, [pc, #680]	; (8000848 <display7SEGhorizontal+0x37c>)
 800059e:	f002 f90c 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a8:	48a7      	ldr	r0, [pc, #668]	; (8000848 <display7SEGhorizontal+0x37c>)
 80005aa:	f002 f906 	bl	80027ba <HAL_GPIO_WritePin>
	        break;
 80005ae:	e147      	b.n	8000840 <display7SEGhorizontal+0x374>
	    }
	    case 2:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2140      	movs	r1, #64	; 0x40
 80005b4:	48a4      	ldr	r0, [pc, #656]	; (8000848 <display7SEGhorizontal+0x37c>)
 80005b6:	f002 f900 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2180      	movs	r1, #128	; 0x80
 80005be:	48a2      	ldr	r0, [pc, #648]	; (8000848 <display7SEGhorizontal+0x37c>)
 80005c0:	f002 f8fb 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ca:	489f      	ldr	r0, [pc, #636]	; (8000848 <display7SEGhorizontal+0x37c>)
 80005cc:	f002 f8f5 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d6:	489c      	ldr	r0, [pc, #624]	; (8000848 <display7SEGhorizontal+0x37c>)
 80005d8:	f002 f8ef 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e2:	4899      	ldr	r0, [pc, #612]	; (8000848 <display7SEGhorizontal+0x37c>)
 80005e4:	f002 f8e9 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ee:	4896      	ldr	r0, [pc, #600]	; (8000848 <display7SEGhorizontal+0x37c>)
 80005f0:	f002 f8e3 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005fa:	4893      	ldr	r0, [pc, #588]	; (8000848 <display7SEGhorizontal+0x37c>)
 80005fc:	f002 f8dd 	bl	80027ba <HAL_GPIO_WritePin>
	        break;
 8000600:	e11e      	b.n	8000840 <display7SEGhorizontal+0x374>
	    }
	    case 3:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2140      	movs	r1, #64	; 0x40
 8000606:	4890      	ldr	r0, [pc, #576]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000608:	f002 f8d7 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	2180      	movs	r1, #128	; 0x80
 8000610:	488d      	ldr	r0, [pc, #564]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000612:	f002 f8d2 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061c:	488a      	ldr	r0, [pc, #552]	; (8000848 <display7SEGhorizontal+0x37c>)
 800061e:	f002 f8cc 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000628:	4887      	ldr	r0, [pc, #540]	; (8000848 <display7SEGhorizontal+0x37c>)
 800062a:	f002 f8c6 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000634:	4884      	ldr	r0, [pc, #528]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000636:	f002 f8c0 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000640:	4881      	ldr	r0, [pc, #516]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000642:	f002 f8ba 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800064c:	487e      	ldr	r0, [pc, #504]	; (8000848 <display7SEGhorizontal+0x37c>)
 800064e:	f002 f8b4 	bl	80027ba <HAL_GPIO_WritePin>
	        break;
 8000652:	e0f5      	b.n	8000840 <display7SEGhorizontal+0x374>
	    }
	    case 4:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	2140      	movs	r1, #64	; 0x40
 8000658:	487b      	ldr	r0, [pc, #492]	; (8000848 <display7SEGhorizontal+0x37c>)
 800065a:	f002 f8ae 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2180      	movs	r1, #128	; 0x80
 8000662:	4879      	ldr	r0, [pc, #484]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000664:	f002 f8a9 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066e:	4876      	ldr	r0, [pc, #472]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000670:	f002 f8a3 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 7100 	mov.w	r1, #512	; 0x200
 800067a:	4873      	ldr	r0, [pc, #460]	; (8000848 <display7SEGhorizontal+0x37c>)
 800067c:	f002 f89d 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000686:	4870      	ldr	r0, [pc, #448]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000688:	f002 f897 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000692:	486d      	ldr	r0, [pc, #436]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000694:	f002 f891 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800069e:	486a      	ldr	r0, [pc, #424]	; (8000848 <display7SEGhorizontal+0x37c>)
 80006a0:	f002 f88b 	bl	80027ba <HAL_GPIO_WritePin>
	        break;
 80006a4:	e0cc      	b.n	8000840 <display7SEGhorizontal+0x374>
	    }
	    case 5:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2140      	movs	r1, #64	; 0x40
 80006aa:	4867      	ldr	r0, [pc, #412]	; (8000848 <display7SEGhorizontal+0x37c>)
 80006ac:	f002 f885 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	2180      	movs	r1, #128	; 0x80
 80006b4:	4864      	ldr	r0, [pc, #400]	; (8000848 <display7SEGhorizontal+0x37c>)
 80006b6:	f002 f880 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006c0:	4861      	ldr	r0, [pc, #388]	; (8000848 <display7SEGhorizontal+0x37c>)
 80006c2:	f002 f87a 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006cc:	485e      	ldr	r0, [pc, #376]	; (8000848 <display7SEGhorizontal+0x37c>)
 80006ce:	f002 f874 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d8:	485b      	ldr	r0, [pc, #364]	; (8000848 <display7SEGhorizontal+0x37c>)
 80006da:	f002 f86e 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006e4:	4858      	ldr	r0, [pc, #352]	; (8000848 <display7SEGhorizontal+0x37c>)
 80006e6:	f002 f868 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f0:	4855      	ldr	r0, [pc, #340]	; (8000848 <display7SEGhorizontal+0x37c>)
 80006f2:	f002 f862 	bl	80027ba <HAL_GPIO_WritePin>
	        break;
 80006f6:	e0a3      	b.n	8000840 <display7SEGhorizontal+0x374>
	    }
	    case 6:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2140      	movs	r1, #64	; 0x40
 80006fc:	4852      	ldr	r0, [pc, #328]	; (8000848 <display7SEGhorizontal+0x37c>)
 80006fe:	f002 f85c 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 8000702:	2201      	movs	r2, #1
 8000704:	2180      	movs	r1, #128	; 0x80
 8000706:	4850      	ldr	r0, [pc, #320]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000708:	f002 f857 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000712:	484d      	ldr	r0, [pc, #308]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000714:	f002 f851 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071e:	484a      	ldr	r0, [pc, #296]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000720:	f002 f84b 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800072a:	4847      	ldr	r0, [pc, #284]	; (8000848 <display7SEGhorizontal+0x37c>)
 800072c:	f002 f845 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000736:	4844      	ldr	r0, [pc, #272]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000738:	f002 f83f 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000742:	4841      	ldr	r0, [pc, #260]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000744:	f002 f839 	bl	80027ba <HAL_GPIO_WritePin>
	        break;
 8000748:	e07a      	b.n	8000840 <display7SEGhorizontal+0x374>
	    }
	    case 7:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2140      	movs	r1, #64	; 0x40
 800074e:	483e      	ldr	r0, [pc, #248]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000750:	f002 f833 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	2180      	movs	r1, #128	; 0x80
 8000758:	483b      	ldr	r0, [pc, #236]	; (8000848 <display7SEGhorizontal+0x37c>)
 800075a:	f002 f82e 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000764:	4838      	ldr	r0, [pc, #224]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000766:	f002 f828 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 800076a:	2201      	movs	r2, #1
 800076c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000770:	4835      	ldr	r0, [pc, #212]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000772:	f002 f822 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 8000776:	2201      	movs	r2, #1
 8000778:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800077c:	4832      	ldr	r0, [pc, #200]	; (8000848 <display7SEGhorizontal+0x37c>)
 800077e:	f002 f81c 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 8000782:	2201      	movs	r2, #1
 8000784:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000788:	482f      	ldr	r0, [pc, #188]	; (8000848 <display7SEGhorizontal+0x37c>)
 800078a:	f002 f816 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 800078e:	2201      	movs	r2, #1
 8000790:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000794:	482c      	ldr	r0, [pc, #176]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000796:	f002 f810 	bl	80027ba <HAL_GPIO_WritePin>
	        break;
 800079a:	e051      	b.n	8000840 <display7SEGhorizontal+0x374>
	    }
	    case 8:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2140      	movs	r1, #64	; 0x40
 80007a0:	4829      	ldr	r0, [pc, #164]	; (8000848 <display7SEGhorizontal+0x37c>)
 80007a2:	f002 f80a 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2180      	movs	r1, #128	; 0x80
 80007aa:	4827      	ldr	r0, [pc, #156]	; (8000848 <display7SEGhorizontal+0x37c>)
 80007ac:	f002 f805 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b6:	4824      	ldr	r0, [pc, #144]	; (8000848 <display7SEGhorizontal+0x37c>)
 80007b8:	f001 ffff 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c2:	4821      	ldr	r0, [pc, #132]	; (8000848 <display7SEGhorizontal+0x37c>)
 80007c4:	f001 fff9 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ce:	481e      	ldr	r0, [pc, #120]	; (8000848 <display7SEGhorizontal+0x37c>)
 80007d0:	f001 fff3 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007da:	481b      	ldr	r0, [pc, #108]	; (8000848 <display7SEGhorizontal+0x37c>)
 80007dc:	f001 ffed 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e6:	4818      	ldr	r0, [pc, #96]	; (8000848 <display7SEGhorizontal+0x37c>)
 80007e8:	f001 ffe7 	bl	80027ba <HAL_GPIO_WritePin>
	        break;
 80007ec:	e028      	b.n	8000840 <display7SEGhorizontal+0x374>
	    }
	    case 9:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2140      	movs	r1, #64	; 0x40
 80007f2:	4815      	ldr	r0, [pc, #84]	; (8000848 <display7SEGhorizontal+0x37c>)
 80007f4:	f001 ffe1 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2180      	movs	r1, #128	; 0x80
 80007fc:	4812      	ldr	r0, [pc, #72]	; (8000848 <display7SEGhorizontal+0x37c>)
 80007fe:	f001 ffdc 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000808:	480f      	ldr	r0, [pc, #60]	; (8000848 <display7SEGhorizontal+0x37c>)
 800080a:	f001 ffd6 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000814:	480c      	ldr	r0, [pc, #48]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000816:	f001 ffd0 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 800081a:	2201      	movs	r2, #1
 800081c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000820:	4809      	ldr	r0, [pc, #36]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000822:	f001 ffca 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800082c:	4806      	ldr	r0, [pc, #24]	; (8000848 <display7SEGhorizontal+0x37c>)
 800082e:	f001 ffc4 	bl	80027ba <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000838:	4803      	ldr	r0, [pc, #12]	; (8000848 <display7SEGhorizontal+0x37c>)
 800083a:	f001 ffbe 	bl	80027ba <HAL_GPIO_WritePin>
	        break;
 800083e:	bf00      	nop
	    }
	}
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40010800 	.word	0x40010800

0800084c <display7SEGBuffervertical>:

void display7SEGBuffervertical(int num)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	switch(num)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d003      	beq.n	8000862 <display7SEGBuffervertical+0x16>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d012      	beq.n	8000886 <display7SEGBuffervertical+0x3a>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
        display7SEGvertical(buffer_7SEG_vertical[num]);
		break;
	}
	}
}
 8000860:	e023      	b.n	80008aa <display7SEGBuffervertical+0x5e>
        HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2110      	movs	r1, #16
 8000866:	4813      	ldr	r0, [pc, #76]	; (80008b4 <display7SEGBuffervertical+0x68>)
 8000868:	f001 ffa7 	bl	80027ba <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800086c:	2201      	movs	r2, #1
 800086e:	2120      	movs	r1, #32
 8000870:	4810      	ldr	r0, [pc, #64]	; (80008b4 <display7SEGBuffervertical+0x68>)
 8000872:	f001 ffa2 	bl	80027ba <HAL_GPIO_WritePin>
        display7SEGvertical(buffer_7SEG_vertical[num]);
 8000876:	4a10      	ldr	r2, [pc, #64]	; (80008b8 <display7SEGBuffervertical+0x6c>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fc64 	bl	800014c <display7SEGvertical>
		break;
 8000884:	e011      	b.n	80008aa <display7SEGBuffervertical+0x5e>
        HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000886:	2201      	movs	r2, #1
 8000888:	2110      	movs	r1, #16
 800088a:	480a      	ldr	r0, [pc, #40]	; (80008b4 <display7SEGBuffervertical+0x68>)
 800088c:	f001 ff95 	bl	80027ba <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2120      	movs	r1, #32
 8000894:	4807      	ldr	r0, [pc, #28]	; (80008b4 <display7SEGBuffervertical+0x68>)
 8000896:	f001 ff90 	bl	80027ba <HAL_GPIO_WritePin>
        display7SEGvertical(buffer_7SEG_vertical[num]);
 800089a:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <display7SEGBuffervertical+0x6c>)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fc52 	bl	800014c <display7SEGvertical>
		break;
 80008a8:	bf00      	nop
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40010c00 	.word	0x40010c00
 80008b8:	20000088 	.word	0x20000088

080008bc <display7SEGBufferhorizontal>:

void display7SEGBufferhorizontal(int num)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	switch(num)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d003      	beq.n	80008d2 <display7SEGBufferhorizontal+0x16>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d012      	beq.n	80008f6 <display7SEGBufferhorizontal+0x3a>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
        display7SEGhorizontal(buffer_7SEG_horizontal[num]);
		break;
	}
	}
}
 80008d0:	e023      	b.n	800091a <display7SEGBufferhorizontal+0x5e>
        HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2101      	movs	r1, #1
 80008d6:	4813      	ldr	r0, [pc, #76]	; (8000924 <display7SEGBufferhorizontal+0x68>)
 80008d8:	f001 ff6f 	bl	80027ba <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2102      	movs	r1, #2
 80008e0:	4810      	ldr	r0, [pc, #64]	; (8000924 <display7SEGBufferhorizontal+0x68>)
 80008e2:	f001 ff6a 	bl	80027ba <HAL_GPIO_WritePin>
        display7SEGhorizontal(buffer_7SEG_horizontal[num]);
 80008e6:	4a10      	ldr	r2, [pc, #64]	; (8000928 <display7SEGBufferhorizontal+0x6c>)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff fdec 	bl	80004cc <display7SEGhorizontal>
		break;
 80008f4:	e011      	b.n	800091a <display7SEGBufferhorizontal+0x5e>
        HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	2101      	movs	r1, #1
 80008fa:	480a      	ldr	r0, [pc, #40]	; (8000924 <display7SEGBufferhorizontal+0x68>)
 80008fc:	f001 ff5d 	bl	80027ba <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	2102      	movs	r1, #2
 8000904:	4807      	ldr	r0, [pc, #28]	; (8000924 <display7SEGBufferhorizontal+0x68>)
 8000906:	f001 ff58 	bl	80027ba <HAL_GPIO_WritePin>
        display7SEGhorizontal(buffer_7SEG_horizontal[num]);
 800090a:	4a07      	ldr	r2, [pc, #28]	; (8000928 <display7SEGBufferhorizontal+0x6c>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fdda 	bl	80004cc <display7SEGhorizontal>
		break;
 8000918:	bf00      	nop
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40010c00 	.word	0x40010c00
 8000928:	20000090 	.word	0x20000090

0800092c <isButton1Pressed>:
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;

int isButton1Pressed()
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
	if(button1_flag == 1)
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <isButton1Pressed+0x20>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d104      	bne.n	8000942 <isButton1Pressed+0x16>
	{
		button1_flag = 0;
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <isButton1Pressed+0x20>)
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
		return 1;
 800093e:	2301      	movs	r3, #1
 8000940:	e000      	b.n	8000944 <isButton1Pressed+0x18>
	}

	return 0;
 8000942:	2300      	movs	r3, #0
}
 8000944:	4618      	mov	r0, r3
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr
 800094c:	20000098 	.word	0x20000098

08000950 <isButton2Pressed>:

int isButton2Pressed()
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
	if(button2_flag == 1)
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <isButton2Pressed+0x20>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d104      	bne.n	8000966 <isButton2Pressed+0x16>
	{
		button2_flag = 0;
 800095c:	4b04      	ldr	r3, [pc, #16]	; (8000970 <isButton2Pressed+0x20>)
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
		return 1;
 8000962:	2301      	movs	r3, #1
 8000964:	e000      	b.n	8000968 <isButton2Pressed+0x18>
	}

	return 0;
 8000966:	2300      	movs	r3, #0
}
 8000968:	4618      	mov	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	2000009c 	.word	0x2000009c

08000974 <isButton3Pressed>:

int isButton3Pressed()
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
	if(button3_flag == 1)
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <isButton3Pressed+0x20>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d104      	bne.n	800098a <isButton3Pressed+0x16>
	{
		button3_flag = 0;
 8000980:	4b04      	ldr	r3, [pc, #16]	; (8000994 <isButton3Pressed+0x20>)
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
		return 1;
 8000986:	2301      	movs	r3, #1
 8000988:	e000      	b.n	800098c <isButton3Pressed+0x18>
	}

	return 0;
 800098a:	2300      	movs	r3, #0
}
 800098c:	4618      	mov	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	200000a0 	.word	0x200000a0

08000998 <getButton1>:

void getButton1()
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
	int i = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
	keyReg0[i] = keyReg1[i];
 80009a2:	4a39      	ldr	r2, [pc, #228]	; (8000a88 <getButton1+0xf0>)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009aa:	4938      	ldr	r1, [pc, #224]	; (8000a8c <getButton1+0xf4>)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[i] = keyReg2[i];
 80009b2:	4a37      	ldr	r2, [pc, #220]	; (8000a90 <getButton1+0xf8>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009ba:	4933      	ldr	r1, [pc, #204]	; (8000a88 <getButton1+0xf0>)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg2[i] = HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin);
 80009c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c6:	4833      	ldr	r0, [pc, #204]	; (8000a94 <getButton1+0xfc>)
 80009c8:	f001 fee0 	bl	800278c <HAL_GPIO_ReadPin>
 80009cc:	4603      	mov	r3, r0
 80009ce:	4619      	mov	r1, r3
 80009d0:	4a2f      	ldr	r2, [pc, #188]	; (8000a90 <getButton1+0xf8>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 80009d8:	4a2c      	ldr	r2, [pc, #176]	; (8000a8c <getButton1+0xf4>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009e0:	4929      	ldr	r1, [pc, #164]	; (8000a88 <getButton1+0xf0>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d149      	bne.n	8000a80 <getButton1+0xe8>
 80009ec:	4a26      	ldr	r2, [pc, #152]	; (8000a88 <getButton1+0xf0>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009f4:	4926      	ldr	r1, [pc, #152]	; (8000a90 <getButton1+0xf8>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d13f      	bne.n	8000a80 <getButton1+0xe8>
	{
		if(keyReg3[i] != keyReg2[i])
 8000a00:	4a25      	ldr	r2, [pc, #148]	; (8000a98 <getButton1+0x100>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a08:	4921      	ldr	r1, [pc, #132]	; (8000a90 <getButton1+0xf8>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d017      	beq.n	8000a44 <getButton1+0xac>
		{
			keyReg3[i] = keyReg2[i];
 8000a14:	4a1e      	ldr	r2, [pc, #120]	; (8000a90 <getButton1+0xf8>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a1c:	491e      	ldr	r1, [pc, #120]	; (8000a98 <getButton1+0x100>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(keyReg2[i] == PRESSED_STATE)
 8000a24:	4a1a      	ldr	r2, [pc, #104]	; (8000a90 <getButton1+0xf8>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d127      	bne.n	8000a80 <getButton1+0xe8>
			{
				button1_flag = 1;
 8000a30:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <getButton1+0x104>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	601a      	str	r2, [r3, #0]
				TimerForKeyPress[i] = 300;
 8000a36:	4a1a      	ldr	r2, [pc, #104]	; (8000aa0 <getButton1+0x108>)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000a3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimerForKeyPress[i] = 300;
				}
			}
		}
	}
}
 8000a42:	e01d      	b.n	8000a80 <getButton1+0xe8>
			if(keyReg2[i] == PRESSED_STATE)
 8000a44:	4a12      	ldr	r2, [pc, #72]	; (8000a90 <getButton1+0xf8>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d117      	bne.n	8000a80 <getButton1+0xe8>
				TimerForKeyPress[i]--;
 8000a50:	4a13      	ldr	r2, [pc, #76]	; (8000aa0 <getButton1+0x108>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a58:	1e5a      	subs	r2, r3, #1
 8000a5a:	4911      	ldr	r1, [pc, #68]	; (8000aa0 <getButton1+0x108>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeyPress[i] == 0)
 8000a62:	4a0f      	ldr	r2, [pc, #60]	; (8000aa0 <getButton1+0x108>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d108      	bne.n	8000a80 <getButton1+0xe8>
					button1_flag = 1;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <getButton1+0x104>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	601a      	str	r2, [r3, #0]
					TimerForKeyPress[i] = 300;
 8000a74:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <getButton1+0x108>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000a7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	2000000c 	.word	0x2000000c
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20000018 	.word	0x20000018
 8000a94:	40010800 	.word	0x40010800
 8000a98:	20000024 	.word	0x20000024
 8000a9c:	20000098 	.word	0x20000098
 8000aa0:	20000030 	.word	0x20000030

08000aa4 <getButton2>:

void getButton2()
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
	int i = 1;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	607b      	str	r3, [r7, #4]
	keyReg0[i] = keyReg1[i];
 8000aae:	4a38      	ldr	r2, [pc, #224]	; (8000b90 <getButton2+0xec>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ab6:	4937      	ldr	r1, [pc, #220]	; (8000b94 <getButton2+0xf0>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[i] = keyReg2[i];
 8000abe:	4a36      	ldr	r2, [pc, #216]	; (8000b98 <getButton2+0xf4>)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ac6:	4932      	ldr	r1, [pc, #200]	; (8000b90 <getButton2+0xec>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg2[i] = HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin);
 8000ace:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ad2:	4832      	ldr	r0, [pc, #200]	; (8000b9c <getButton2+0xf8>)
 8000ad4:	f001 fe5a 	bl	800278c <HAL_GPIO_ReadPin>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	4619      	mov	r1, r3
 8000adc:	4a2e      	ldr	r2, [pc, #184]	; (8000b98 <getButton2+0xf4>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000ae4:	4a2b      	ldr	r2, [pc, #172]	; (8000b94 <getButton2+0xf0>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aec:	4928      	ldr	r1, [pc, #160]	; (8000b90 <getButton2+0xec>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d147      	bne.n	8000b88 <getButton2+0xe4>
 8000af8:	4a25      	ldr	r2, [pc, #148]	; (8000b90 <getButton2+0xec>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b00:	4925      	ldr	r1, [pc, #148]	; (8000b98 <getButton2+0xf4>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d13d      	bne.n	8000b88 <getButton2+0xe4>
	{
		if(keyReg3[i] != keyReg2[i])
 8000b0c:	4a24      	ldr	r2, [pc, #144]	; (8000ba0 <getButton2+0xfc>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b14:	4920      	ldr	r1, [pc, #128]	; (8000b98 <getButton2+0xf4>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d016      	beq.n	8000b4e <getButton2+0xaa>
		{
			keyReg3[i] = keyReg2[i];
 8000b20:	4a1d      	ldr	r2, [pc, #116]	; (8000b98 <getButton2+0xf4>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b28:	491d      	ldr	r1, [pc, #116]	; (8000ba0 <getButton2+0xfc>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(keyReg2[i] == PRESSED_STATE)
 8000b30:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <getButton2+0xf4>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d125      	bne.n	8000b88 <getButton2+0xe4>
			{
				button2_flag = 1;
 8000b3c:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <getButton2+0x100>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	601a      	str	r2, [r3, #0]
				TimerForKeyPress[i] = 50;
 8000b42:	4a19      	ldr	r2, [pc, #100]	; (8000ba8 <getButton2+0x104>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2132      	movs	r1, #50	; 0x32
 8000b48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimerForKeyPress[i] = 50;
				}
			}
		}
	}
}
 8000b4c:	e01c      	b.n	8000b88 <getButton2+0xe4>
			if(keyReg2[i] == PRESSED_STATE)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <getButton2+0xf4>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d116      	bne.n	8000b88 <getButton2+0xe4>
				TimerForKeyPress[i]--;
 8000b5a:	4a13      	ldr	r2, [pc, #76]	; (8000ba8 <getButton2+0x104>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b62:	1e5a      	subs	r2, r3, #1
 8000b64:	4910      	ldr	r1, [pc, #64]	; (8000ba8 <getButton2+0x104>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeyPress[i] == 0)
 8000b6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ba8 <getButton2+0x104>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d107      	bne.n	8000b88 <getButton2+0xe4>
					button2_flag = 1;
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <getButton2+0x100>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	601a      	str	r2, [r3, #0]
					TimerForKeyPress[i] = 50;
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <getButton2+0x104>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2132      	movs	r1, #50	; 0x32
 8000b84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	2000000c 	.word	0x2000000c
 8000b94:	20000000 	.word	0x20000000
 8000b98:	20000018 	.word	0x20000018
 8000b9c:	40010800 	.word	0x40010800
 8000ba0:	20000024 	.word	0x20000024
 8000ba4:	2000009c 	.word	0x2000009c
 8000ba8:	20000030 	.word	0x20000030

08000bac <getButton3>:

void getButton3()
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
	int i = 2;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	607b      	str	r3, [r7, #4]
	keyReg0[i] = keyReg1[i];
 8000bb6:	4a39      	ldr	r2, [pc, #228]	; (8000c9c <getButton3+0xf0>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bbe:	4938      	ldr	r1, [pc, #224]	; (8000ca0 <getButton3+0xf4>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[i] = keyReg2[i];
 8000bc6:	4a37      	ldr	r2, [pc, #220]	; (8000ca4 <getButton3+0xf8>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bce:	4933      	ldr	r1, [pc, #204]	; (8000c9c <getButton3+0xf0>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg2[i] = HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin);
 8000bd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bda:	4833      	ldr	r0, [pc, #204]	; (8000ca8 <getButton3+0xfc>)
 8000bdc:	f001 fdd6 	bl	800278c <HAL_GPIO_ReadPin>
 8000be0:	4603      	mov	r3, r0
 8000be2:	4619      	mov	r1, r3
 8000be4:	4a2f      	ldr	r2, [pc, #188]	; (8000ca4 <getButton3+0xf8>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000bec:	4a2c      	ldr	r2, [pc, #176]	; (8000ca0 <getButton3+0xf4>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bf4:	4929      	ldr	r1, [pc, #164]	; (8000c9c <getButton3+0xf0>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d149      	bne.n	8000c94 <getButton3+0xe8>
 8000c00:	4a26      	ldr	r2, [pc, #152]	; (8000c9c <getButton3+0xf0>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c08:	4926      	ldr	r1, [pc, #152]	; (8000ca4 <getButton3+0xf8>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d13f      	bne.n	8000c94 <getButton3+0xe8>
	{
		if(keyReg3[i] != keyReg2[i])
 8000c14:	4a25      	ldr	r2, [pc, #148]	; (8000cac <getButton3+0x100>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c1c:	4921      	ldr	r1, [pc, #132]	; (8000ca4 <getButton3+0xf8>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d017      	beq.n	8000c58 <getButton3+0xac>
		{
			keyReg3[i] = keyReg2[i];
 8000c28:	4a1e      	ldr	r2, [pc, #120]	; (8000ca4 <getButton3+0xf8>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c30:	491e      	ldr	r1, [pc, #120]	; (8000cac <getButton3+0x100>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(keyReg2[i] == PRESSED_STATE)
 8000c38:	4a1a      	ldr	r2, [pc, #104]	; (8000ca4 <getButton3+0xf8>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d127      	bne.n	8000c94 <getButton3+0xe8>
			{
				button3_flag = 1;
 8000c44:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <getButton3+0x104>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	601a      	str	r2, [r3, #0]
				TimerForKeyPress[i] = 300;
 8000c4a:	4a1a      	ldr	r2, [pc, #104]	; (8000cb4 <getButton3+0x108>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000c52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimerForKeyPress[i] = 300;
				}
			}
		}
	}
}
 8000c56:	e01d      	b.n	8000c94 <getButton3+0xe8>
			if(keyReg2[i] == PRESSED_STATE)
 8000c58:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <getButton3+0xf8>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d117      	bne.n	8000c94 <getButton3+0xe8>
				TimerForKeyPress[i]--;
 8000c64:	4a13      	ldr	r2, [pc, #76]	; (8000cb4 <getButton3+0x108>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6c:	1e5a      	subs	r2, r3, #1
 8000c6e:	4911      	ldr	r1, [pc, #68]	; (8000cb4 <getButton3+0x108>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeyPress[i] == 0)
 8000c76:	4a0f      	ldr	r2, [pc, #60]	; (8000cb4 <getButton3+0x108>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d108      	bne.n	8000c94 <getButton3+0xe8>
					button3_flag = 1;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <getButton3+0x104>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	601a      	str	r2, [r3, #0]
					TimerForKeyPress[i] = 300;
 8000c88:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <getButton3+0x108>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000c90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	2000000c 	.word	0x2000000c
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	20000018 	.word	0x20000018
 8000ca8:	40010800 	.word	0x40010800
 8000cac:	20000024 	.word	0x20000024
 8000cb0:	200000a0 	.word	0x200000a0
 8000cb4:	20000030 	.word	0x20000030

08000cb8 <fsm_automatic>:

int num_horizontal = 1;
int num_vertical = 1;

void fsm_automatic()
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	fsm_auto_horizontal();
 8000cbc:	f000 f804 	bl	8000cc8 <fsm_auto_horizontal>

	fsm_auto_vertical();
 8000cc0:	f000 f930 	bl	8000f24 <fsm_auto_vertical>

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <fsm_auto_horizontal>:

void fsm_auto_horizontal()
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
	switch(status_horizontal)
 8000cce:	4b8a      	ldr	r3, [pc, #552]	; (8000ef8 <fsm_auto_horizontal+0x230>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b03      	cmp	r3, #3
 8000cd4:	f200 80f3 	bhi.w	8000ebe <fsm_auto_horizontal+0x1f6>
 8000cd8:	a201      	add	r2, pc, #4	; (adr r2, 8000ce0 <fsm_auto_horizontal+0x18>)
 8000cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cde:	bf00      	nop
 8000ce0:	08000cf1 	.word	0x08000cf1
 8000ce4:	08000d29 	.word	0x08000d29
 8000ce8:	08000db3 	.word	0x08000db3
 8000cec:	08000e2d 	.word	0x08000e2d
	{
	case INIT_AUTO:
	{
		for(int i = 0; i < 3; i++)
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	e00a      	b.n	8000d0c <fsm_auto_horizontal+0x44>
		{
			temp_red_yellow_green_auto_time_horizontal[i] = red_yellow_green_auto_time_horizontal[i];
 8000cf6:	4a81      	ldr	r2, [pc, #516]	; (8000efc <fsm_auto_horizontal+0x234>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cfe:	4980      	ldr	r1, [pc, #512]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < 3; i++)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	ddf1      	ble.n	8000cf6 <fsm_auto_horizontal+0x2e>
		}

		setTimer7SEGCountRedhorizontal(1000);
 8000d12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d16:	f000 ff8d 	bl	8001c34 <setTimer7SEGCountRedhorizontal>
		num_horizontal = 1;
 8000d1a:	4b7a      	ldr	r3, [pc, #488]	; (8000f04 <fsm_auto_horizontal+0x23c>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]
		status_horizontal = AUTO_RED;
 8000d20:	4b75      	ldr	r3, [pc, #468]	; (8000ef8 <fsm_auto_horizontal+0x230>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	601a      	str	r2, [r3, #0]
		break;
 8000d26:	e0ca      	b.n	8000ebe <fsm_auto_horizontal+0x1f6>
	}
	case AUTO_RED:
	{
		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_SET);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	2104      	movs	r1, #4
 8000d2c:	4876      	ldr	r0, [pc, #472]	; (8000f08 <fsm_auto_horizontal+0x240>)
 8000d2e:	f001 fd44 	bl	80027ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2108      	movs	r1, #8
 8000d36:	4874      	ldr	r0, [pc, #464]	; (8000f08 <fsm_auto_horizontal+0x240>)
 8000d38:	f001 fd3f 	bl	80027ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2110      	movs	r1, #16
 8000d40:	4871      	ldr	r0, [pc, #452]	; (8000f08 <fsm_auto_horizontal+0x240>)
 8000d42:	f001 fd3a 	bl	80027ba <HAL_GPIO_WritePin>

		if(temp_red_yellow_green_auto_time_horizontal[0] < 0)
 8000d46:	4b6e      	ldr	r3, [pc, #440]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	da09      	bge.n	8000d62 <fsm_auto_horizontal+0x9a>
		{
			setTimer7SEGCountGreenhorizontal(1000);
 8000d4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d52:	f000 ffa3 	bl	8001c9c <setTimer7SEGCountGreenhorizontal>
			num_horizontal = 1;
 8000d56:	4b6b      	ldr	r3, [pc, #428]	; (8000f04 <fsm_auto_horizontal+0x23c>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	601a      	str	r2, [r3, #0]
			status_horizontal = AUTO_GREEN;
 8000d5c:	4b66      	ldr	r3, [pc, #408]	; (8000ef8 <fsm_auto_horizontal+0x230>)
 8000d5e:	2203      	movs	r2, #3
 8000d60:	601a      	str	r2, [r3, #0]
		}

		buffer_7SEG_horizontal[0] = temp_red_yellow_green_auto_time_horizontal[0] / 10;
 8000d62:	4b67      	ldr	r3, [pc, #412]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a69      	ldr	r2, [pc, #420]	; (8000f0c <fsm_auto_horizontal+0x244>)
 8000d68:	fb82 1203 	smull	r1, r2, r2, r3
 8000d6c:	1092      	asrs	r2, r2, #2
 8000d6e:	17db      	asrs	r3, r3, #31
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	4a67      	ldr	r2, [pc, #412]	; (8000f10 <fsm_auto_horizontal+0x248>)
 8000d74:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = temp_red_yellow_green_auto_time_horizontal[0] % 10;
 8000d76:	4b62      	ldr	r3, [pc, #392]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000d78:	6819      	ldr	r1, [r3, #0]
 8000d7a:	4b64      	ldr	r3, [pc, #400]	; (8000f0c <fsm_auto_horizontal+0x244>)
 8000d7c:	fb83 2301 	smull	r2, r3, r3, r1
 8000d80:	109a      	asrs	r2, r3, #2
 8000d82:	17cb      	asrs	r3, r1, #31
 8000d84:	1ad2      	subs	r2, r2, r3
 8000d86:	4613      	mov	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	4413      	add	r3, r2
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	1aca      	subs	r2, r1, r3
 8000d90:	4b5f      	ldr	r3, [pc, #380]	; (8000f10 <fsm_auto_horizontal+0x248>)
 8000d92:	605a      	str	r2, [r3, #4]

		if(timer7SEGCountRedhorizontal_flag == 1)
 8000d94:	4b5f      	ldr	r3, [pc, #380]	; (8000f14 <fsm_auto_horizontal+0x24c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	f040 808b 	bne.w	8000eb4 <fsm_auto_horizontal+0x1ec>
		{
			temp_red_yellow_green_auto_time_horizontal[0]--;
 8000d9e:	4b58      	ldr	r3, [pc, #352]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	4a56      	ldr	r2, [pc, #344]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000da6:	6013      	str	r3, [r2, #0]
			setTimer7SEGCountRedhorizontal(1000);
 8000da8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dac:	f000 ff42 	bl	8001c34 <setTimer7SEGCountRedhorizontal>
		}

		break;
 8000db0:	e080      	b.n	8000eb4 <fsm_auto_horizontal+0x1ec>
	}
	case AUTO_YELLOW:
	{
		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2104      	movs	r1, #4
 8000db6:	4854      	ldr	r0, [pc, #336]	; (8000f08 <fsm_auto_horizontal+0x240>)
 8000db8:	f001 fcff 	bl	80027ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_SET);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	2108      	movs	r1, #8
 8000dc0:	4851      	ldr	r0, [pc, #324]	; (8000f08 <fsm_auto_horizontal+0x240>)
 8000dc2:	f001 fcfa 	bl	80027ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2110      	movs	r1, #16
 8000dca:	484f      	ldr	r0, [pc, #316]	; (8000f08 <fsm_auto_horizontal+0x240>)
 8000dcc:	f001 fcf5 	bl	80027ba <HAL_GPIO_WritePin>

		if(temp_red_yellow_green_auto_time_horizontal[1] < 0)
 8000dd0:	4b4b      	ldr	r3, [pc, #300]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	da02      	bge.n	8000dde <fsm_auto_horizontal+0x116>
		{
			status_horizontal = INIT_AUTO;
 8000dd8:	4b47      	ldr	r3, [pc, #284]	; (8000ef8 <fsm_auto_horizontal+0x230>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
		}

		buffer_7SEG_horizontal[0] = temp_red_yellow_green_auto_time_horizontal[1] / 10;
 8000dde:	4b48      	ldr	r3, [pc, #288]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	4a4a      	ldr	r2, [pc, #296]	; (8000f0c <fsm_auto_horizontal+0x244>)
 8000de4:	fb82 1203 	smull	r1, r2, r2, r3
 8000de8:	1092      	asrs	r2, r2, #2
 8000dea:	17db      	asrs	r3, r3, #31
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	4a48      	ldr	r2, [pc, #288]	; (8000f10 <fsm_auto_horizontal+0x248>)
 8000df0:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = temp_red_yellow_green_auto_time_horizontal[1] % 10;
 8000df2:	4b43      	ldr	r3, [pc, #268]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000df4:	6859      	ldr	r1, [r3, #4]
 8000df6:	4b45      	ldr	r3, [pc, #276]	; (8000f0c <fsm_auto_horizontal+0x244>)
 8000df8:	fb83 2301 	smull	r2, r3, r3, r1
 8000dfc:	109a      	asrs	r2, r3, #2
 8000dfe:	17cb      	asrs	r3, r1, #31
 8000e00:	1ad2      	subs	r2, r2, r3
 8000e02:	4613      	mov	r3, r2
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	4413      	add	r3, r2
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	1aca      	subs	r2, r1, r3
 8000e0c:	4b40      	ldr	r3, [pc, #256]	; (8000f10 <fsm_auto_horizontal+0x248>)
 8000e0e:	605a      	str	r2, [r3, #4]

		if(timer7SEGCountYellowhorizontal_flag == 1)
 8000e10:	4b41      	ldr	r3, [pc, #260]	; (8000f18 <fsm_auto_horizontal+0x250>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d14f      	bne.n	8000eb8 <fsm_auto_horizontal+0x1f0>
		{
			temp_red_yellow_green_auto_time_horizontal[1]--;
 8000e18:	4b39      	ldr	r3, [pc, #228]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	4a38      	ldr	r2, [pc, #224]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000e20:	6053      	str	r3, [r2, #4]
			setTimer7SEGCountYellowhorizontal(1000);
 8000e22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e26:	f000 ff1f 	bl	8001c68 <setTimer7SEGCountYellowhorizontal>
		}

		break;
 8000e2a:	e045      	b.n	8000eb8 <fsm_auto_horizontal+0x1f0>
	}
	case AUTO_GREEN:
	{
		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2104      	movs	r1, #4
 8000e30:	4835      	ldr	r0, [pc, #212]	; (8000f08 <fsm_auto_horizontal+0x240>)
 8000e32:	f001 fcc2 	bl	80027ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2108      	movs	r1, #8
 8000e3a:	4833      	ldr	r0, [pc, #204]	; (8000f08 <fsm_auto_horizontal+0x240>)
 8000e3c:	f001 fcbd 	bl	80027ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_SET);
 8000e40:	2201      	movs	r2, #1
 8000e42:	2110      	movs	r1, #16
 8000e44:	4830      	ldr	r0, [pc, #192]	; (8000f08 <fsm_auto_horizontal+0x240>)
 8000e46:	f001 fcb8 	bl	80027ba <HAL_GPIO_WritePin>

		if(temp_red_yellow_green_auto_time_horizontal[2] < 0)
 8000e4a:	4b2d      	ldr	r3, [pc, #180]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	da09      	bge.n	8000e66 <fsm_auto_horizontal+0x19e>
		{
			setTimer7SEGCountYellowhorizontal(1000);
 8000e52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e56:	f000 ff07 	bl	8001c68 <setTimer7SEGCountYellowhorizontal>
			num_horizontal = 1;
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <fsm_auto_horizontal+0x23c>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	601a      	str	r2, [r3, #0]
			status_horizontal = AUTO_YELLOW;
 8000e60:	4b25      	ldr	r3, [pc, #148]	; (8000ef8 <fsm_auto_horizontal+0x230>)
 8000e62:	2202      	movs	r2, #2
 8000e64:	601a      	str	r2, [r3, #0]
		}

		buffer_7SEG_horizontal[0] = temp_red_yellow_green_auto_time_horizontal[2] / 10;
 8000e66:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	4a28      	ldr	r2, [pc, #160]	; (8000f0c <fsm_auto_horizontal+0x244>)
 8000e6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e70:	1092      	asrs	r2, r2, #2
 8000e72:	17db      	asrs	r3, r3, #31
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	4a26      	ldr	r2, [pc, #152]	; (8000f10 <fsm_auto_horizontal+0x248>)
 8000e78:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = temp_red_yellow_green_auto_time_horizontal[2] % 10;
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000e7c:	6899      	ldr	r1, [r3, #8]
 8000e7e:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <fsm_auto_horizontal+0x244>)
 8000e80:	fb83 2301 	smull	r2, r3, r3, r1
 8000e84:	109a      	asrs	r2, r3, #2
 8000e86:	17cb      	asrs	r3, r1, #31
 8000e88:	1ad2      	subs	r2, r2, r3
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4413      	add	r3, r2
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	1aca      	subs	r2, r1, r3
 8000e94:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <fsm_auto_horizontal+0x248>)
 8000e96:	605a      	str	r2, [r3, #4]

		if(timer7SEGCountGreenhorizontal_flag == 1)
 8000e98:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <fsm_auto_horizontal+0x254>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d10d      	bne.n	8000ebc <fsm_auto_horizontal+0x1f4>
		{
			temp_red_yellow_green_auto_time_horizontal[2]--;
 8000ea0:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	4a16      	ldr	r2, [pc, #88]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000ea8:	6093      	str	r3, [r2, #8]
			setTimer7SEGCountGreenhorizontal(1000);
 8000eaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eae:	f000 fef5 	bl	8001c9c <setTimer7SEGCountGreenhorizontal>
		}

		break;
 8000eb2:	e003      	b.n	8000ebc <fsm_auto_horizontal+0x1f4>
		break;
 8000eb4:	bf00      	nop
 8000eb6:	e002      	b.n	8000ebe <fsm_auto_horizontal+0x1f6>
		break;
 8000eb8:	bf00      	nop
 8000eba:	e000      	b.n	8000ebe <fsm_auto_horizontal+0x1f6>
		break;
 8000ebc:	bf00      	nop
	}
	}

	if(timerENhorizontal_flag == 1)
 8000ebe:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <fsm_auto_horizontal+0x258>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d114      	bne.n	8000ef0 <fsm_auto_horizontal+0x228>
	{
		if(num_horizontal > 1)
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <fsm_auto_horizontal+0x23c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	dd02      	ble.n	8000ed4 <fsm_auto_horizontal+0x20c>
		{
			num_horizontal = 0;
 8000ece:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <fsm_auto_horizontal+0x23c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
		}

		display7SEGBufferhorizontal(num_horizontal);
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <fsm_auto_horizontal+0x23c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fcef 	bl	80008bc <display7SEGBufferhorizontal>

		num_horizontal++;
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <fsm_auto_horizontal+0x23c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <fsm_auto_horizontal+0x23c>)
 8000ee6:	6013      	str	r3, [r2, #0]
		setTimerENhorizontal(500);
 8000ee8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eec:	f000 fe6e 	bl	8001bcc <setTimerENhorizontal>
	}

}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	200000bc 	.word	0x200000bc
 8000efc:	20000048 	.word	0x20000048
 8000f00:	200000b0 	.word	0x200000b0
 8000f04:	20000054 	.word	0x20000054
 8000f08:	40010800 	.word	0x40010800
 8000f0c:	66666667 	.word	0x66666667
 8000f10:	20000090 	.word	0x20000090
 8000f14:	20000100 	.word	0x20000100
 8000f18:	20000108 	.word	0x20000108
 8000f1c:	20000110 	.word	0x20000110
 8000f20:	200000f0 	.word	0x200000f0

08000f24 <fsm_auto_vertical>:

void fsm_auto_vertical()
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0

	switch(status_vertical)
 8000f2a:	4b8f      	ldr	r3, [pc, #572]	; (8001168 <fsm_auto_vertical+0x244>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	f200 80fc 	bhi.w	800112c <fsm_auto_vertical+0x208>
 8000f34:	a201      	add	r2, pc, #4	; (adr r2, 8000f3c <fsm_auto_vertical+0x18>)
 8000f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3a:	bf00      	nop
 8000f3c:	08000f4d 	.word	0x08000f4d
 8000f40:	08000f85 	.word	0x08000f85
 8000f44:	08001007 	.word	0x08001007
 8000f48:	08001095 	.word	0x08001095
	{
	case INIT_AUTO:
	{
		for(int i = 0; i < 3; i++)
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	e00a      	b.n	8000f68 <fsm_auto_vertical+0x44>
		{
			temp_red_yellow_green_auto_time_vertical[i] = red_yellow_green_auto_time_vertical[i];
 8000f52:	4a86      	ldr	r2, [pc, #536]	; (800116c <fsm_auto_vertical+0x248>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f5a:	4985      	ldr	r1, [pc, #532]	; (8001170 <fsm_auto_vertical+0x24c>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < 3; i++)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3301      	adds	r3, #1
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	ddf1      	ble.n	8000f52 <fsm_auto_vertical+0x2e>
		}

		setTimer7SEGCountGreenvertical(1000);
 8000f6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f72:	f000 fee1 	bl	8001d38 <setTimer7SEGCountGreenvertical>
		num_vertical = 1;
 8000f76:	4b7f      	ldr	r3, [pc, #508]	; (8001174 <fsm_auto_vertical+0x250>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	601a      	str	r2, [r3, #0]
		status_vertical = AUTO_GREEN;
 8000f7c:	4b7a      	ldr	r3, [pc, #488]	; (8001168 <fsm_auto_vertical+0x244>)
 8000f7e:	2203      	movs	r2, #3
 8000f80:	601a      	str	r2, [r3, #0]
		break;
 8000f82:	e0d3      	b.n	800112c <fsm_auto_vertical+0x208>
	}
	case AUTO_RED:
	{
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f8a:	487b      	ldr	r0, [pc, #492]	; (8001178 <fsm_auto_vertical+0x254>)
 8000f8c:	f001 fc15 	bl	80027ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f96:	4878      	ldr	r0, [pc, #480]	; (8001178 <fsm_auto_vertical+0x254>)
 8000f98:	f001 fc0f 	bl	80027ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fa2:	4875      	ldr	r0, [pc, #468]	; (8001178 <fsm_auto_vertical+0x254>)
 8000fa4:	f001 fc09 	bl	80027ba <HAL_GPIO_WritePin>

		if(temp_red_yellow_green_auto_time_vertical[0] < 0)
 8000fa8:	4b71      	ldr	r3, [pc, #452]	; (8001170 <fsm_auto_vertical+0x24c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	da02      	bge.n	8000fb6 <fsm_auto_vertical+0x92>
		{
			status_vertical = INIT_AUTO;
 8000fb0:	4b6d      	ldr	r3, [pc, #436]	; (8001168 <fsm_auto_vertical+0x244>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
		}

		buffer_7SEG_vertical[0] = temp_red_yellow_green_auto_time_vertical[0] / 10;
 8000fb6:	4b6e      	ldr	r3, [pc, #440]	; (8001170 <fsm_auto_vertical+0x24c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a70      	ldr	r2, [pc, #448]	; (800117c <fsm_auto_vertical+0x258>)
 8000fbc:	fb82 1203 	smull	r1, r2, r2, r3
 8000fc0:	1092      	asrs	r2, r2, #2
 8000fc2:	17db      	asrs	r3, r3, #31
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	4a6e      	ldr	r2, [pc, #440]	; (8001180 <fsm_auto_vertical+0x25c>)
 8000fc8:	6013      	str	r3, [r2, #0]
		buffer_7SEG_vertical[1] = temp_red_yellow_green_auto_time_vertical[0] % 10;
 8000fca:	4b69      	ldr	r3, [pc, #420]	; (8001170 <fsm_auto_vertical+0x24c>)
 8000fcc:	6819      	ldr	r1, [r3, #0]
 8000fce:	4b6b      	ldr	r3, [pc, #428]	; (800117c <fsm_auto_vertical+0x258>)
 8000fd0:	fb83 2301 	smull	r2, r3, r3, r1
 8000fd4:	109a      	asrs	r2, r3, #2
 8000fd6:	17cb      	asrs	r3, r1, #31
 8000fd8:	1ad2      	subs	r2, r2, r3
 8000fda:	4613      	mov	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4413      	add	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	1aca      	subs	r2, r1, r3
 8000fe4:	4b66      	ldr	r3, [pc, #408]	; (8001180 <fsm_auto_vertical+0x25c>)
 8000fe6:	605a      	str	r2, [r3, #4]


		if(timer7SEGCountRedvertical_flag == 1)
 8000fe8:	4b66      	ldr	r3, [pc, #408]	; (8001184 <fsm_auto_vertical+0x260>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	f040 8098 	bne.w	8001122 <fsm_auto_vertical+0x1fe>
		{
			temp_red_yellow_green_auto_time_vertical[0]--;
 8000ff2:	4b5f      	ldr	r3, [pc, #380]	; (8001170 <fsm_auto_vertical+0x24c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	4a5d      	ldr	r2, [pc, #372]	; (8001170 <fsm_auto_vertical+0x24c>)
 8000ffa:	6013      	str	r3, [r2, #0]
			setTimer7SEGCountRedvertical(1000);
 8000ffc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001000:	f000 fe66 	bl	8001cd0 <setTimer7SEGCountRedvertical>
		}

		break;
 8001004:	e08d      	b.n	8001122 <fsm_auto_vertical+0x1fe>
	}
	case AUTO_YELLOW:
	{
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800100c:	485a      	ldr	r0, [pc, #360]	; (8001178 <fsm_auto_vertical+0x254>)
 800100e:	f001 fbd4 	bl	80027ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);
 8001012:	2201      	movs	r2, #1
 8001014:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001018:	4857      	ldr	r0, [pc, #348]	; (8001178 <fsm_auto_vertical+0x254>)
 800101a:	f001 fbce 	bl	80027ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001024:	4854      	ldr	r0, [pc, #336]	; (8001178 <fsm_auto_vertical+0x254>)
 8001026:	f001 fbc8 	bl	80027ba <HAL_GPIO_WritePin>

		if(temp_red_yellow_green_auto_time_vertical[1] < 0)
 800102a:	4b51      	ldr	r3, [pc, #324]	; (8001170 <fsm_auto_vertical+0x24c>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	da09      	bge.n	8001046 <fsm_auto_vertical+0x122>
		{
			setTimer7SEGCountRedvertical(1000);
 8001032:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001036:	f000 fe4b 	bl	8001cd0 <setTimer7SEGCountRedvertical>
			num_vertical = 1;
 800103a:	4b4e      	ldr	r3, [pc, #312]	; (8001174 <fsm_auto_vertical+0x250>)
 800103c:	2201      	movs	r2, #1
 800103e:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_RED;
 8001040:	4b49      	ldr	r3, [pc, #292]	; (8001168 <fsm_auto_vertical+0x244>)
 8001042:	2201      	movs	r2, #1
 8001044:	601a      	str	r2, [r3, #0]
		}

		buffer_7SEG_vertical[0] = temp_red_yellow_green_auto_time_vertical[1] / 10;
 8001046:	4b4a      	ldr	r3, [pc, #296]	; (8001170 <fsm_auto_vertical+0x24c>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	4a4c      	ldr	r2, [pc, #304]	; (800117c <fsm_auto_vertical+0x258>)
 800104c:	fb82 1203 	smull	r1, r2, r2, r3
 8001050:	1092      	asrs	r2, r2, #2
 8001052:	17db      	asrs	r3, r3, #31
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	4a4a      	ldr	r2, [pc, #296]	; (8001180 <fsm_auto_vertical+0x25c>)
 8001058:	6013      	str	r3, [r2, #0]
		buffer_7SEG_vertical[1] = temp_red_yellow_green_auto_time_vertical[1] % 10;
 800105a:	4b45      	ldr	r3, [pc, #276]	; (8001170 <fsm_auto_vertical+0x24c>)
 800105c:	6859      	ldr	r1, [r3, #4]
 800105e:	4b47      	ldr	r3, [pc, #284]	; (800117c <fsm_auto_vertical+0x258>)
 8001060:	fb83 2301 	smull	r2, r3, r3, r1
 8001064:	109a      	asrs	r2, r3, #2
 8001066:	17cb      	asrs	r3, r1, #31
 8001068:	1ad2      	subs	r2, r2, r3
 800106a:	4613      	mov	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	1aca      	subs	r2, r1, r3
 8001074:	4b42      	ldr	r3, [pc, #264]	; (8001180 <fsm_auto_vertical+0x25c>)
 8001076:	605a      	str	r2, [r3, #4]

		if(timer7SEGCountYellowvertical_flag == 1)
 8001078:	4b43      	ldr	r3, [pc, #268]	; (8001188 <fsm_auto_vertical+0x264>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d152      	bne.n	8001126 <fsm_auto_vertical+0x202>
		{
			temp_red_yellow_green_auto_time_vertical[1]--;
 8001080:	4b3b      	ldr	r3, [pc, #236]	; (8001170 <fsm_auto_vertical+0x24c>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	3b01      	subs	r3, #1
 8001086:	4a3a      	ldr	r2, [pc, #232]	; (8001170 <fsm_auto_vertical+0x24c>)
 8001088:	6053      	str	r3, [r2, #4]
			setTimer7SEGCountYellowvertical(1000);
 800108a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800108e:	f000 fe39 	bl	8001d04 <setTimer7SEGCountYellowvertical>
		}

		break;
 8001092:	e048      	b.n	8001126 <fsm_auto_vertical+0x202>
	}
	case AUTO_GREEN:
	{
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800109a:	4837      	ldr	r0, [pc, #220]	; (8001178 <fsm_auto_vertical+0x254>)
 800109c:	f001 fb8d 	bl	80027ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010a6:	4834      	ldr	r0, [pc, #208]	; (8001178 <fsm_auto_vertical+0x254>)
 80010a8:	f001 fb87 	bl	80027ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 80010ac:	2201      	movs	r2, #1
 80010ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010b2:	4831      	ldr	r0, [pc, #196]	; (8001178 <fsm_auto_vertical+0x254>)
 80010b4:	f001 fb81 	bl	80027ba <HAL_GPIO_WritePin>

		if(temp_red_yellow_green_auto_time_vertical[2] < 0)
 80010b8:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <fsm_auto_vertical+0x24c>)
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	da09      	bge.n	80010d4 <fsm_auto_vertical+0x1b0>
		{
			setTimer7SEGCountYellowvertical(1000);
 80010c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010c4:	f000 fe1e 	bl	8001d04 <setTimer7SEGCountYellowvertical>
			num_vertical = 1;
 80010c8:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <fsm_auto_vertical+0x250>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_YELLOW;
 80010ce:	4b26      	ldr	r3, [pc, #152]	; (8001168 <fsm_auto_vertical+0x244>)
 80010d0:	2202      	movs	r2, #2
 80010d2:	601a      	str	r2, [r3, #0]
		}

		buffer_7SEG_vertical[0] = temp_red_yellow_green_auto_time_vertical[2] / 10;
 80010d4:	4b26      	ldr	r3, [pc, #152]	; (8001170 <fsm_auto_vertical+0x24c>)
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	4a28      	ldr	r2, [pc, #160]	; (800117c <fsm_auto_vertical+0x258>)
 80010da:	fb82 1203 	smull	r1, r2, r2, r3
 80010de:	1092      	asrs	r2, r2, #2
 80010e0:	17db      	asrs	r3, r3, #31
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	4a26      	ldr	r2, [pc, #152]	; (8001180 <fsm_auto_vertical+0x25c>)
 80010e6:	6013      	str	r3, [r2, #0]
		buffer_7SEG_vertical[1] = temp_red_yellow_green_auto_time_vertical[2] % 10;
 80010e8:	4b21      	ldr	r3, [pc, #132]	; (8001170 <fsm_auto_vertical+0x24c>)
 80010ea:	6899      	ldr	r1, [r3, #8]
 80010ec:	4b23      	ldr	r3, [pc, #140]	; (800117c <fsm_auto_vertical+0x258>)
 80010ee:	fb83 2301 	smull	r2, r3, r3, r1
 80010f2:	109a      	asrs	r2, r3, #2
 80010f4:	17cb      	asrs	r3, r1, #31
 80010f6:	1ad2      	subs	r2, r2, r3
 80010f8:	4613      	mov	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	1aca      	subs	r2, r1, r3
 8001102:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <fsm_auto_vertical+0x25c>)
 8001104:	605a      	str	r2, [r3, #4]


		if(timer7SEGCountGreenvertical_flag == 1)
 8001106:	4b21      	ldr	r3, [pc, #132]	; (800118c <fsm_auto_vertical+0x268>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d10d      	bne.n	800112a <fsm_auto_vertical+0x206>
		{
			temp_red_yellow_green_auto_time_vertical[2]--;
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <fsm_auto_vertical+0x24c>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	3b01      	subs	r3, #1
 8001114:	4a16      	ldr	r2, [pc, #88]	; (8001170 <fsm_auto_vertical+0x24c>)
 8001116:	6093      	str	r3, [r2, #8]
			setTimer7SEGCountGreenvertical(1000);
 8001118:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800111c:	f000 fe0c 	bl	8001d38 <setTimer7SEGCountGreenvertical>
		}

		break;
 8001120:	e003      	b.n	800112a <fsm_auto_vertical+0x206>
		break;
 8001122:	bf00      	nop
 8001124:	e002      	b.n	800112c <fsm_auto_vertical+0x208>
		break;
 8001126:	bf00      	nop
 8001128:	e000      	b.n	800112c <fsm_auto_vertical+0x208>
		break;
 800112a:	bf00      	nop
	}
	}

	if(timerENvertical_flag == 1)
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <fsm_auto_vertical+0x26c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d114      	bne.n	800115e <fsm_auto_vertical+0x23a>
	{
		if(num_vertical > 1)
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <fsm_auto_vertical+0x250>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b01      	cmp	r3, #1
 800113a:	dd02      	ble.n	8001142 <fsm_auto_vertical+0x21e>
		{
			num_vertical = 0;
 800113c:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <fsm_auto_vertical+0x250>)
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
		}

		display7SEGBuffervertical(num_vertical);
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <fsm_auto_vertical+0x250>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fb80 	bl	800084c <display7SEGBuffervertical>

		num_vertical++;
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <fsm_auto_vertical+0x250>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	3301      	adds	r3, #1
 8001152:	4a08      	ldr	r2, [pc, #32]	; (8001174 <fsm_auto_vertical+0x250>)
 8001154:	6013      	str	r3, [r2, #0]
		setTimerENvertical(500);
 8001156:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800115a:	f000 fd51 	bl	8001c00 <setTimerENvertical>
	}
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200000c0 	.word	0x200000c0
 800116c:	2000003c 	.word	0x2000003c
 8001170:	200000a4 	.word	0x200000a4
 8001174:	20000058 	.word	0x20000058
 8001178:	40010c00 	.word	0x40010c00
 800117c:	66666667 	.word	0x66666667
 8001180:	20000088 	.word	0x20000088
 8001184:	20000118 	.word	0x20000118
 8001188:	20000120 	.word	0x20000120
 800118c:	20000128 	.word	0x20000128
 8001190:	200000f8 	.word	0x200000f8

08001194 <fsm_setting>:
int check_button2_red = 0;
int check_button2_yellow = 0;
int check_button2_green = 0;

void fsm_setting()
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0

	if(isButton1Pressed() == 1 && status_horizontal < INIT_MANUAL && status_vertical < INIT_MANUAL)
 8001198:	f7ff fbc8 	bl	800092c <isButton1Pressed>
 800119c:	4603      	mov	r3, r0
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d10d      	bne.n	80011be <fsm_setting+0x2a>
 80011a2:	4b99      	ldr	r3, [pc, #612]	; (8001408 <fsm_setting+0x274>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	dc09      	bgt.n	80011be <fsm_setting+0x2a>
 80011aa:	4b98      	ldr	r3, [pc, #608]	; (800140c <fsm_setting+0x278>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	dc05      	bgt.n	80011be <fsm_setting+0x2a>
	{
		status_horizontal = INIT_MANUAL;
 80011b2:	4b95      	ldr	r3, [pc, #596]	; (8001408 <fsm_setting+0x274>)
 80011b4:	2204      	movs	r2, #4
 80011b6:	601a      	str	r2, [r3, #0]
		status_vertical = INIT_MANUAL;
 80011b8:	4b94      	ldr	r3, [pc, #592]	; (800140c <fsm_setting+0x278>)
 80011ba:	2204      	movs	r2, #4
 80011bc:	601a      	str	r2, [r3, #0]
	}

	switch(status_horizontal)
 80011be:	4b92      	ldr	r3, [pc, #584]	; (8001408 <fsm_setting+0x274>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b07      	cmp	r3, #7
 80011c4:	f000 80bb 	beq.w	800133e <fsm_setting+0x1aa>
 80011c8:	2b07      	cmp	r3, #7
 80011ca:	f300 81e7 	bgt.w	800159c <fsm_setting+0x408>
 80011ce:	2b05      	cmp	r3, #5
 80011d0:	d002      	beq.n	80011d8 <fsm_setting+0x44>
 80011d2:	2b06      	cmp	r3, #6
 80011d4:	d040      	beq.n	8001258 <fsm_setting+0xc4>
		}
		break;
	}
	}

}
 80011d6:	e1e1      	b.n	800159c <fsm_setting+0x408>
		if(isButton1Pressed() == 1)
 80011d8:	f7ff fba8 	bl	800092c <isButton1Pressed>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d10d      	bne.n	80011fe <fsm_setting+0x6a>
			status_horizontal = MANUAL_YELLOW;
 80011e2:	4b89      	ldr	r3, [pc, #548]	; (8001408 <fsm_setting+0x274>)
 80011e4:	2206      	movs	r2, #6
 80011e6:	601a      	str	r2, [r3, #0]
			status_vertical = MANUAL_YELLOW;
 80011e8:	4b88      	ldr	r3, [pc, #544]	; (800140c <fsm_setting+0x278>)
 80011ea:	2206      	movs	r2, #6
 80011ec:	601a      	str	r2, [r3, #0]
			setTimerAuto(10000);
 80011ee:	f242 7010 	movw	r0, #10000	; 0x2710
 80011f2:	f000 fdbb 	bl	8001d6c <setTimerAuto>
			setTimerBlinkingYellow(500);
 80011f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011fa:	f000 fdeb 	bl	8001dd4 <setTimerBlinkingYellow>
		if(isButton2Pressed() == 1)
 80011fe:	f7ff fba7 	bl	8000950 <isButton2Pressed>
 8001202:	4603      	mov	r3, r0
 8001204:	2b01      	cmp	r3, #1
 8001206:	d117      	bne.n	8001238 <fsm_setting+0xa4>
			check_button2_red = 1;
 8001208:	4b81      	ldr	r3, [pc, #516]	; (8001410 <fsm_setting+0x27c>)
 800120a:	2201      	movs	r2, #1
 800120c:	601a      	str	r2, [r3, #0]
			if(red_yellow_green_manual_time[0] <= 99 && red_yellow_green_manual_time[0] >= 1)
 800120e:	4b81      	ldr	r3, [pc, #516]	; (8001414 <fsm_setting+0x280>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b63      	cmp	r3, #99	; 0x63
 8001214:	dc09      	bgt.n	800122a <fsm_setting+0x96>
 8001216:	4b7f      	ldr	r3, [pc, #508]	; (8001414 <fsm_setting+0x280>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	dd05      	ble.n	800122a <fsm_setting+0x96>
				red_yellow_green_manual_time[0]++;
 800121e:	4b7d      	ldr	r3, [pc, #500]	; (8001414 <fsm_setting+0x280>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	3301      	adds	r3, #1
 8001224:	4a7b      	ldr	r2, [pc, #492]	; (8001414 <fsm_setting+0x280>)
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	e002      	b.n	8001230 <fsm_setting+0x9c>
				red_yellow_green_manual_time[0] = 1;
 800122a:	4b7a      	ldr	r3, [pc, #488]	; (8001414 <fsm_setting+0x280>)
 800122c:	2201      	movs	r2, #1
 800122e:	601a      	str	r2, [r3, #0]
			setTimerAuto(10000);
 8001230:	f242 7010 	movw	r0, #10000	; 0x2710
 8001234:	f000 fd9a 	bl	8001d6c <setTimerAuto>
		if(isButton3Pressed() == 1)
 8001238:	f7ff fb9c 	bl	8000974 <isButton3Pressed>
 800123c:	4603      	mov	r3, r0
 800123e:	2b01      	cmp	r3, #1
 8001240:	f040 81a7 	bne.w	8001592 <fsm_setting+0x3fe>
			status_horizontal = INIT_AUTO;
 8001244:	4b70      	ldr	r3, [pc, #448]	; (8001408 <fsm_setting+0x274>)
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
			status_vertical = INIT_AUTO;
 800124a:	4b70      	ldr	r3, [pc, #448]	; (800140c <fsm_setting+0x278>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
			timerAuto_flag = 0;
 8001250:	4b71      	ldr	r3, [pc, #452]	; (8001418 <fsm_setting+0x284>)
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
		break;
 8001256:	e19c      	b.n	8001592 <fsm_setting+0x3fe>
		if(isButton1Pressed() == 1)
 8001258:	f7ff fb68 	bl	800092c <isButton1Pressed>
 800125c:	4603      	mov	r3, r0
 800125e:	2b01      	cmp	r3, #1
 8001260:	d10d      	bne.n	800127e <fsm_setting+0xea>
			status_horizontal = MANUAL_GREEN;
 8001262:	4b69      	ldr	r3, [pc, #420]	; (8001408 <fsm_setting+0x274>)
 8001264:	2207      	movs	r2, #7
 8001266:	601a      	str	r2, [r3, #0]
			status_vertical = MANUAL_GREEN;
 8001268:	4b68      	ldr	r3, [pc, #416]	; (800140c <fsm_setting+0x278>)
 800126a:	2207      	movs	r2, #7
 800126c:	601a      	str	r2, [r3, #0]
			setTimerAuto(10000);
 800126e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001272:	f000 fd7b 	bl	8001d6c <setTimerAuto>
			setTimerBlinkingGreen(500);
 8001276:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800127a:	f000 fdc5 	bl	8001e08 <setTimerBlinkingGreen>
		if(isButton2Pressed() == 1)
 800127e:	f7ff fb67 	bl	8000950 <isButton2Pressed>
 8001282:	4603      	mov	r3, r0
 8001284:	2b01      	cmp	r3, #1
 8001286:	d117      	bne.n	80012b8 <fsm_setting+0x124>
			check_button2_yellow = 1;
 8001288:	4b64      	ldr	r3, [pc, #400]	; (800141c <fsm_setting+0x288>)
 800128a:	2201      	movs	r2, #1
 800128c:	601a      	str	r2, [r3, #0]
			if(red_yellow_green_manual_time[1] <= 99 && red_yellow_green_manual_time[1] >= 1)
 800128e:	4b61      	ldr	r3, [pc, #388]	; (8001414 <fsm_setting+0x280>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b63      	cmp	r3, #99	; 0x63
 8001294:	dc09      	bgt.n	80012aa <fsm_setting+0x116>
 8001296:	4b5f      	ldr	r3, [pc, #380]	; (8001414 <fsm_setting+0x280>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	dd05      	ble.n	80012aa <fsm_setting+0x116>
				red_yellow_green_manual_time[1]++;
 800129e:	4b5d      	ldr	r3, [pc, #372]	; (8001414 <fsm_setting+0x280>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	3301      	adds	r3, #1
 80012a4:	4a5b      	ldr	r2, [pc, #364]	; (8001414 <fsm_setting+0x280>)
 80012a6:	6053      	str	r3, [r2, #4]
 80012a8:	e002      	b.n	80012b0 <fsm_setting+0x11c>
				red_yellow_green_manual_time[1] = 1;
 80012aa:	4b5a      	ldr	r3, [pc, #360]	; (8001414 <fsm_setting+0x280>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	605a      	str	r2, [r3, #4]
			setTimerAuto(10000);
 80012b0:	f242 7010 	movw	r0, #10000	; 0x2710
 80012b4:	f000 fd5a 	bl	8001d6c <setTimerAuto>
		if(isButton3Pressed() == 1)
 80012b8:	f7ff fb5c 	bl	8000974 <isButton3Pressed>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b01      	cmp	r3, #1
 80012c0:	f040 8169 	bne.w	8001596 <fsm_setting+0x402>
			if(check_button2_red == 1 && check_button2_yellow == 1)
 80012c4:	4b52      	ldr	r3, [pc, #328]	; (8001410 <fsm_setting+0x27c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d12e      	bne.n	800132a <fsm_setting+0x196>
 80012cc:	4b53      	ldr	r3, [pc, #332]	; (800141c <fsm_setting+0x288>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d12a      	bne.n	800132a <fsm_setting+0x196>
				red_yellow_green_manual_time[2] = red_yellow_green_manual_time[0] - red_yellow_green_manual_time[1];
 80012d4:	4b4f      	ldr	r3, [pc, #316]	; (8001414 <fsm_setting+0x280>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b4e      	ldr	r3, [pc, #312]	; (8001414 <fsm_setting+0x280>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	4a4d      	ldr	r2, [pc, #308]	; (8001414 <fsm_setting+0x280>)
 80012e0:	6093      	str	r3, [r2, #8]
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 80012e2:	4b4c      	ldr	r3, [pc, #304]	; (8001414 <fsm_setting+0x280>)
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	4b4b      	ldr	r3, [pc, #300]	; (8001414 <fsm_setting+0x280>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	da1d      	bge.n	800132a <fsm_setting+0x196>
				&& red_yellow_green_manual_time[1] < red_yellow_green_manual_time[0])
 80012ee:	4b49      	ldr	r3, [pc, #292]	; (8001414 <fsm_setting+0x280>)
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	4b48      	ldr	r3, [pc, #288]	; (8001414 <fsm_setting+0x280>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	da17      	bge.n	800132a <fsm_setting+0x196>
					red_yellow_green_auto_time_horizontal[0] = red_yellow_green_manual_time[0];
 80012fa:	4b46      	ldr	r3, [pc, #280]	; (8001414 <fsm_setting+0x280>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a48      	ldr	r2, [pc, #288]	; (8001420 <fsm_setting+0x28c>)
 8001300:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_vertical[0] = red_yellow_green_manual_time[0];
 8001302:	4b44      	ldr	r3, [pc, #272]	; (8001414 <fsm_setting+0x280>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a47      	ldr	r2, [pc, #284]	; (8001424 <fsm_setting+0x290>)
 8001308:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_horizontal[1] = red_yellow_green_manual_time[1];
 800130a:	4b42      	ldr	r3, [pc, #264]	; (8001414 <fsm_setting+0x280>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	4a44      	ldr	r2, [pc, #272]	; (8001420 <fsm_setting+0x28c>)
 8001310:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_vertical[1] = red_yellow_green_manual_time[1];
 8001312:	4b40      	ldr	r3, [pc, #256]	; (8001414 <fsm_setting+0x280>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	4a43      	ldr	r2, [pc, #268]	; (8001424 <fsm_setting+0x290>)
 8001318:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_horizontal[2] = red_yellow_green_manual_time[2];
 800131a:	4b3e      	ldr	r3, [pc, #248]	; (8001414 <fsm_setting+0x280>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	4a40      	ldr	r2, [pc, #256]	; (8001420 <fsm_setting+0x28c>)
 8001320:	6093      	str	r3, [r2, #8]
					red_yellow_green_auto_time_vertical[2] = red_yellow_green_manual_time[2];
 8001322:	4b3c      	ldr	r3, [pc, #240]	; (8001414 <fsm_setting+0x280>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	4a3f      	ldr	r2, [pc, #252]	; (8001424 <fsm_setting+0x290>)
 8001328:	6093      	str	r3, [r2, #8]
			status_horizontal = INIT_AUTO;
 800132a:	4b37      	ldr	r3, [pc, #220]	; (8001408 <fsm_setting+0x274>)
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
			status_vertical = INIT_AUTO;
 8001330:	4b36      	ldr	r3, [pc, #216]	; (800140c <fsm_setting+0x278>)
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
			timerAuto_flag = 0;
 8001336:	4b38      	ldr	r3, [pc, #224]	; (8001418 <fsm_setting+0x284>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
		break;
 800133c:	e12b      	b.n	8001596 <fsm_setting+0x402>
		if(isButton1Pressed() == 1)
 800133e:	f7ff faf5 	bl	800092c <isButton1Pressed>
 8001342:	4603      	mov	r3, r0
 8001344:	2b01      	cmp	r3, #1
 8001346:	d105      	bne.n	8001354 <fsm_setting+0x1c0>
			status_horizontal = INIT_AUTO;
 8001348:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <fsm_setting+0x274>)
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
			status_vertical = INIT_AUTO;
 800134e:	4b2f      	ldr	r3, [pc, #188]	; (800140c <fsm_setting+0x278>)
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
		if(isButton2Pressed() == 1)
 8001354:	f7ff fafc 	bl	8000950 <isButton2Pressed>
 8001358:	4603      	mov	r3, r0
 800135a:	2b01      	cmp	r3, #1
 800135c:	d117      	bne.n	800138e <fsm_setting+0x1fa>
			check_button2_green = 1;
 800135e:	4b32      	ldr	r3, [pc, #200]	; (8001428 <fsm_setting+0x294>)
 8001360:	2201      	movs	r2, #1
 8001362:	601a      	str	r2, [r3, #0]
			if(red_yellow_green_manual_time[2] <= 99 && red_yellow_green_manual_time[2] >= 1)
 8001364:	4b2b      	ldr	r3, [pc, #172]	; (8001414 <fsm_setting+0x280>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	2b63      	cmp	r3, #99	; 0x63
 800136a:	dc09      	bgt.n	8001380 <fsm_setting+0x1ec>
 800136c:	4b29      	ldr	r3, [pc, #164]	; (8001414 <fsm_setting+0x280>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	2b00      	cmp	r3, #0
 8001372:	dd05      	ble.n	8001380 <fsm_setting+0x1ec>
				red_yellow_green_manual_time[2]++;
 8001374:	4b27      	ldr	r3, [pc, #156]	; (8001414 <fsm_setting+0x280>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	3301      	adds	r3, #1
 800137a:	4a26      	ldr	r2, [pc, #152]	; (8001414 <fsm_setting+0x280>)
 800137c:	6093      	str	r3, [r2, #8]
 800137e:	e002      	b.n	8001386 <fsm_setting+0x1f2>
				red_yellow_green_manual_time[2] = 1;
 8001380:	4b24      	ldr	r3, [pc, #144]	; (8001414 <fsm_setting+0x280>)
 8001382:	2201      	movs	r2, #1
 8001384:	609a      	str	r2, [r3, #8]
			setTimerAuto(10000);
 8001386:	f242 7010 	movw	r0, #10000	; 0x2710
 800138a:	f000 fcef 	bl	8001d6c <setTimerAuto>
		if(isButton3Pressed() == 1)
 800138e:	f7ff faf1 	bl	8000974 <isButton3Pressed>
 8001392:	4603      	mov	r3, r0
 8001394:	2b01      	cmp	r3, #1
 8001396:	f040 8100 	bne.w	800159a <fsm_setting+0x406>
			if(check_button2_red == 1 && check_button2_yellow == 1)
 800139a:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <fsm_setting+0x27c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d144      	bne.n	800142c <fsm_setting+0x298>
 80013a2:	4b1e      	ldr	r3, [pc, #120]	; (800141c <fsm_setting+0x288>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d140      	bne.n	800142c <fsm_setting+0x298>
				red_yellow_green_manual_time[2] = red_yellow_green_manual_time[0] - red_yellow_green_manual_time[1];
 80013aa:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <fsm_setting+0x280>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <fsm_setting+0x280>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	4a17      	ldr	r2, [pc, #92]	; (8001414 <fsm_setting+0x280>)
 80013b6:	6093      	str	r3, [r2, #8]
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 80013b8:	4b16      	ldr	r3, [pc, #88]	; (8001414 <fsm_setting+0x280>)
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <fsm_setting+0x280>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	f280 80d7 	bge.w	8001574 <fsm_setting+0x3e0>
				&& red_yellow_green_manual_time[1] < red_yellow_green_manual_time[0])
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <fsm_setting+0x280>)
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <fsm_setting+0x280>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	f280 80d0 	bge.w	8001574 <fsm_setting+0x3e0>
					red_yellow_green_auto_time_horizontal[0] = red_yellow_green_manual_time[0];
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <fsm_setting+0x280>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a11      	ldr	r2, [pc, #68]	; (8001420 <fsm_setting+0x28c>)
 80013da:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_vertical[0] = red_yellow_green_manual_time[0];
 80013dc:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <fsm_setting+0x280>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a10      	ldr	r2, [pc, #64]	; (8001424 <fsm_setting+0x290>)
 80013e2:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_horizontal[1] = red_yellow_green_manual_time[1];
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <fsm_setting+0x280>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	4a0d      	ldr	r2, [pc, #52]	; (8001420 <fsm_setting+0x28c>)
 80013ea:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_vertical[1] = red_yellow_green_manual_time[1];
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <fsm_setting+0x280>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	4a0c      	ldr	r2, [pc, #48]	; (8001424 <fsm_setting+0x290>)
 80013f2:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_horizontal[2] = red_yellow_green_manual_time[2];
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <fsm_setting+0x280>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	4a09      	ldr	r2, [pc, #36]	; (8001420 <fsm_setting+0x28c>)
 80013fa:	6093      	str	r3, [r2, #8]
					red_yellow_green_auto_time_vertical[2] = red_yellow_green_manual_time[2];
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <fsm_setting+0x280>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	4a08      	ldr	r2, [pc, #32]	; (8001424 <fsm_setting+0x290>)
 8001402:	6093      	str	r3, [r2, #8]
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 8001404:	e0b6      	b.n	8001574 <fsm_setting+0x3e0>
 8001406:	bf00      	nop
 8001408:	200000bc 	.word	0x200000bc
 800140c:	200000c0 	.word	0x200000c0
 8001410:	200000dc 	.word	0x200000dc
 8001414:	200000c4 	.word	0x200000c4
 8001418:	20000130 	.word	0x20000130
 800141c:	200000e0 	.word	0x200000e0
 8001420:	20000048 	.word	0x20000048
 8001424:	2000003c 	.word	0x2000003c
 8001428:	200000e4 	.word	0x200000e4
			else if(check_button2_red == 1 && check_button2_green == 1)
 800142c:	4b5c      	ldr	r3, [pc, #368]	; (80015a0 <fsm_setting+0x40c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d131      	bne.n	8001498 <fsm_setting+0x304>
 8001434:	4b5b      	ldr	r3, [pc, #364]	; (80015a4 <fsm_setting+0x410>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d12d      	bne.n	8001498 <fsm_setting+0x304>
				red_yellow_green_manual_time[1] = red_yellow_green_manual_time[0] - red_yellow_green_manual_time[2];
 800143c:	4b5a      	ldr	r3, [pc, #360]	; (80015a8 <fsm_setting+0x414>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b59      	ldr	r3, [pc, #356]	; (80015a8 <fsm_setting+0x414>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	4a58      	ldr	r2, [pc, #352]	; (80015a8 <fsm_setting+0x414>)
 8001448:	6053      	str	r3, [r2, #4]
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 800144a:	4b57      	ldr	r3, [pc, #348]	; (80015a8 <fsm_setting+0x414>)
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	4b56      	ldr	r3, [pc, #344]	; (80015a8 <fsm_setting+0x414>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	429a      	cmp	r2, r3
 8001454:	f280 8090 	bge.w	8001578 <fsm_setting+0x3e4>
				&& red_yellow_green_manual_time[1] < red_yellow_green_manual_time[0])
 8001458:	4b53      	ldr	r3, [pc, #332]	; (80015a8 <fsm_setting+0x414>)
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	4b52      	ldr	r3, [pc, #328]	; (80015a8 <fsm_setting+0x414>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	429a      	cmp	r2, r3
 8001462:	f280 8089 	bge.w	8001578 <fsm_setting+0x3e4>
					red_yellow_green_auto_time_horizontal[0] = red_yellow_green_manual_time[0];
 8001466:	4b50      	ldr	r3, [pc, #320]	; (80015a8 <fsm_setting+0x414>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a50      	ldr	r2, [pc, #320]	; (80015ac <fsm_setting+0x418>)
 800146c:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_vertical[0] = red_yellow_green_manual_time[0];
 800146e:	4b4e      	ldr	r3, [pc, #312]	; (80015a8 <fsm_setting+0x414>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a4f      	ldr	r2, [pc, #316]	; (80015b0 <fsm_setting+0x41c>)
 8001474:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_horizontal[1] = red_yellow_green_manual_time[1];
 8001476:	4b4c      	ldr	r3, [pc, #304]	; (80015a8 <fsm_setting+0x414>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	4a4c      	ldr	r2, [pc, #304]	; (80015ac <fsm_setting+0x418>)
 800147c:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_vertical[1] = red_yellow_green_manual_time[1];
 800147e:	4b4a      	ldr	r3, [pc, #296]	; (80015a8 <fsm_setting+0x414>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	4a4b      	ldr	r2, [pc, #300]	; (80015b0 <fsm_setting+0x41c>)
 8001484:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_horizontal[2] = red_yellow_green_manual_time[2];
 8001486:	4b48      	ldr	r3, [pc, #288]	; (80015a8 <fsm_setting+0x414>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	4a48      	ldr	r2, [pc, #288]	; (80015ac <fsm_setting+0x418>)
 800148c:	6093      	str	r3, [r2, #8]
					red_yellow_green_auto_time_vertical[2] = red_yellow_green_manual_time[2];
 800148e:	4b46      	ldr	r3, [pc, #280]	; (80015a8 <fsm_setting+0x414>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	4a47      	ldr	r2, [pc, #284]	; (80015b0 <fsm_setting+0x41c>)
 8001494:	6093      	str	r3, [r2, #8]
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 8001496:	e06f      	b.n	8001578 <fsm_setting+0x3e4>
			else if(check_button2_yellow == 1 && check_button2_green == 1)
 8001498:	4b46      	ldr	r3, [pc, #280]	; (80015b4 <fsm_setting+0x420>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d12f      	bne.n	8001500 <fsm_setting+0x36c>
 80014a0:	4b40      	ldr	r3, [pc, #256]	; (80015a4 <fsm_setting+0x410>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d12b      	bne.n	8001500 <fsm_setting+0x36c>
				red_yellow_green_manual_time[0] = red_yellow_green_manual_time[1] + red_yellow_green_manual_time[2];
 80014a8:	4b3f      	ldr	r3, [pc, #252]	; (80015a8 <fsm_setting+0x414>)
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	4b3e      	ldr	r3, [pc, #248]	; (80015a8 <fsm_setting+0x414>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	4413      	add	r3, r2
 80014b2:	4a3d      	ldr	r2, [pc, #244]	; (80015a8 <fsm_setting+0x414>)
 80014b4:	6013      	str	r3, [r2, #0]
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 80014b6:	4b3c      	ldr	r3, [pc, #240]	; (80015a8 <fsm_setting+0x414>)
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4b3b      	ldr	r3, [pc, #236]	; (80015a8 <fsm_setting+0x414>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	429a      	cmp	r2, r3
 80014c0:	da5c      	bge.n	800157c <fsm_setting+0x3e8>
				&& red_yellow_green_manual_time[1] < red_yellow_green_manual_time[0])
 80014c2:	4b39      	ldr	r3, [pc, #228]	; (80015a8 <fsm_setting+0x414>)
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	4b38      	ldr	r3, [pc, #224]	; (80015a8 <fsm_setting+0x414>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	da56      	bge.n	800157c <fsm_setting+0x3e8>
					red_yellow_green_auto_time_horizontal[0] = red_yellow_green_manual_time[0];
 80014ce:	4b36      	ldr	r3, [pc, #216]	; (80015a8 <fsm_setting+0x414>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a36      	ldr	r2, [pc, #216]	; (80015ac <fsm_setting+0x418>)
 80014d4:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_vertical[0] = red_yellow_green_manual_time[0];
 80014d6:	4b34      	ldr	r3, [pc, #208]	; (80015a8 <fsm_setting+0x414>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a35      	ldr	r2, [pc, #212]	; (80015b0 <fsm_setting+0x41c>)
 80014dc:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_horizontal[1] = red_yellow_green_manual_time[1];
 80014de:	4b32      	ldr	r3, [pc, #200]	; (80015a8 <fsm_setting+0x414>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	4a32      	ldr	r2, [pc, #200]	; (80015ac <fsm_setting+0x418>)
 80014e4:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_vertical[1] = red_yellow_green_manual_time[1];
 80014e6:	4b30      	ldr	r3, [pc, #192]	; (80015a8 <fsm_setting+0x414>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	4a31      	ldr	r2, [pc, #196]	; (80015b0 <fsm_setting+0x41c>)
 80014ec:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_horizontal[2] = red_yellow_green_manual_time[2];
 80014ee:	4b2e      	ldr	r3, [pc, #184]	; (80015a8 <fsm_setting+0x414>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	4a2e      	ldr	r2, [pc, #184]	; (80015ac <fsm_setting+0x418>)
 80014f4:	6093      	str	r3, [r2, #8]
					red_yellow_green_auto_time_vertical[2] = red_yellow_green_manual_time[2];
 80014f6:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <fsm_setting+0x414>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	4a2d      	ldr	r2, [pc, #180]	; (80015b0 <fsm_setting+0x41c>)
 80014fc:	6093      	str	r3, [r2, #8]
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 80014fe:	e03d      	b.n	800157c <fsm_setting+0x3e8>
			else if(check_button2_red == 1 && check_button2_yellow == 1 && check_button2_green == 1)
 8001500:	4b27      	ldr	r3, [pc, #156]	; (80015a0 <fsm_setting+0x40c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d13a      	bne.n	800157e <fsm_setting+0x3ea>
 8001508:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <fsm_setting+0x420>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d136      	bne.n	800157e <fsm_setting+0x3ea>
 8001510:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <fsm_setting+0x410>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d132      	bne.n	800157e <fsm_setting+0x3ea>
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 8001518:	4b23      	ldr	r3, [pc, #140]	; (80015a8 <fsm_setting+0x414>)
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <fsm_setting+0x414>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	429a      	cmp	r2, r3
 8001522:	da2c      	bge.n	800157e <fsm_setting+0x3ea>
				&& red_yellow_green_manual_time[1] < red_yellow_green_manual_time[0]
 8001524:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <fsm_setting+0x414>)
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <fsm_setting+0x414>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	da26      	bge.n	800157e <fsm_setting+0x3ea>
				&& red_yellow_green_manual_time[0] == red_yellow_green_manual_time[1] + red_yellow_green_manual_time[2])
 8001530:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <fsm_setting+0x414>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <fsm_setting+0x414>)
 8001536:	6859      	ldr	r1, [r3, #4]
 8001538:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <fsm_setting+0x414>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	440b      	add	r3, r1
 800153e:	429a      	cmp	r2, r3
 8001540:	d11d      	bne.n	800157e <fsm_setting+0x3ea>
					red_yellow_green_auto_time_horizontal[0] = red_yellow_green_manual_time[0];
 8001542:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <fsm_setting+0x414>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a19      	ldr	r2, [pc, #100]	; (80015ac <fsm_setting+0x418>)
 8001548:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_vertical[0] = red_yellow_green_manual_time[0];
 800154a:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <fsm_setting+0x414>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a18      	ldr	r2, [pc, #96]	; (80015b0 <fsm_setting+0x41c>)
 8001550:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_horizontal[1] = red_yellow_green_manual_time[1];
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <fsm_setting+0x414>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	4a15      	ldr	r2, [pc, #84]	; (80015ac <fsm_setting+0x418>)
 8001558:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_vertical[1] = red_yellow_green_manual_time[1];
 800155a:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <fsm_setting+0x414>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <fsm_setting+0x41c>)
 8001560:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_horizontal[2] = red_yellow_green_manual_time[2];
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <fsm_setting+0x414>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	4a11      	ldr	r2, [pc, #68]	; (80015ac <fsm_setting+0x418>)
 8001568:	6093      	str	r3, [r2, #8]
					red_yellow_green_auto_time_vertical[2] = red_yellow_green_manual_time[2];
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <fsm_setting+0x414>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	4a10      	ldr	r2, [pc, #64]	; (80015b0 <fsm_setting+0x41c>)
 8001570:	6093      	str	r3, [r2, #8]
 8001572:	e004      	b.n	800157e <fsm_setting+0x3ea>
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 8001574:	bf00      	nop
 8001576:	e002      	b.n	800157e <fsm_setting+0x3ea>
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 8001578:	bf00      	nop
 800157a:	e000      	b.n	800157e <fsm_setting+0x3ea>
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 800157c:	bf00      	nop
			status_horizontal = INIT_AUTO;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <fsm_setting+0x424>)
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
			status_vertical = INIT_AUTO;
 8001584:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <fsm_setting+0x428>)
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
			timerAuto_flag = 0;
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <fsm_setting+0x42c>)
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
		break;
 8001590:	e003      	b.n	800159a <fsm_setting+0x406>
		break;
 8001592:	bf00      	nop
 8001594:	e002      	b.n	800159c <fsm_setting+0x408>
		break;
 8001596:	bf00      	nop
 8001598:	e000      	b.n	800159c <fsm_setting+0x408>
		break;
 800159a:	bf00      	nop
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	200000dc 	.word	0x200000dc
 80015a4:	200000e4 	.word	0x200000e4
 80015a8:	200000c4 	.word	0x200000c4
 80015ac:	20000048 	.word	0x20000048
 80015b0:	2000003c 	.word	0x2000003c
 80015b4:	200000e0 	.word	0x200000e0
 80015b8:	200000bc 	.word	0x200000bc
 80015bc:	200000c0 	.word	0x200000c0
 80015c0:	20000130 	.word	0x20000130

080015c4 <fsm_manual>:

void fsm_manual()
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
	switch(status_horizontal)
 80015ca:	4b85      	ldr	r3, [pc, #532]	; (80017e0 <fsm_manual+0x21c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	3b04      	subs	r3, #4
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	f200 8193 	bhi.w	80018fc <fsm_manual+0x338>
 80015d6:	a201      	add	r2, pc, #4	; (adr r2, 80015dc <fsm_manual+0x18>)
 80015d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015dc:	080015ed 	.word	0x080015ed
 80015e0:	08001651 	.word	0x08001651
 80015e4:	08001719 	.word	0x08001719
 80015e8:	0800182d 	.word	0x0800182d
	{
	case INIT_MANUAL:
	{
		for(int i = 0; i < 3; i++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	e00a      	b.n	8001608 <fsm_manual+0x44>
		{
			red_yellow_green_manual_time[i] = red_yellow_green_auto_time_horizontal[i];
 80015f2:	4a7c      	ldr	r2, [pc, #496]	; (80017e4 <fsm_manual+0x220>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015fa:	497b      	ldr	r1, [pc, #492]	; (80017e8 <fsm_manual+0x224>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < 3; i++)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3301      	adds	r3, #1
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b02      	cmp	r3, #2
 800160c:	ddf1      	ble.n	80015f2 <fsm_manual+0x2e>
		}

		setTimerAuto(10000);
 800160e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001612:	f000 fbab 	bl	8001d6c <setTimerAuto>
		setTimerBlinkingRed(500);
 8001616:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800161a:	f000 fbc1 	bl	8001da0 <setTimerBlinkingRed>

		check_button2_red = 0;
 800161e:	4b73      	ldr	r3, [pc, #460]	; (80017ec <fsm_manual+0x228>)
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
		check_button2_yellow = 0;
 8001624:	4b72      	ldr	r3, [pc, #456]	; (80017f0 <fsm_manual+0x22c>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
		check_button2_green = 0;
 800162a:	4b72      	ldr	r3, [pc, #456]	; (80017f4 <fsm_manual+0x230>)
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]

		check_sync_red = 0;
 8001630:	4b71      	ldr	r3, [pc, #452]	; (80017f8 <fsm_manual+0x234>)
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
		check_sync_yellow = 0;
 8001636:	4b71      	ldr	r3, [pc, #452]	; (80017fc <fsm_manual+0x238>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
		check_sync_green = 0;
 800163c:	4b70      	ldr	r3, [pc, #448]	; (8001800 <fsm_manual+0x23c>)
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]

		num_horizontal = 1;
 8001642:	4b70      	ldr	r3, [pc, #448]	; (8001804 <fsm_manual+0x240>)
 8001644:	2201      	movs	r2, #1
 8001646:	601a      	str	r2, [r3, #0]
		status_horizontal = MANUAL_RED;
 8001648:	4b65      	ldr	r3, [pc, #404]	; (80017e0 <fsm_manual+0x21c>)
 800164a:	2205      	movs	r2, #5
 800164c:	601a      	str	r2, [r3, #0]
		break;
 800164e:	e155      	b.n	80018fc <fsm_manual+0x338>
	}
	case MANUAL_RED:
	{

		if(check_sync_red == 0)
 8001650:	4b69      	ldr	r3, [pc, #420]	; (80017f8 <fsm_manual+0x234>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d10d      	bne.n	8001674 <fsm_manual+0xb0>
		{
			check_sync_red = 1;
 8001658:	4b67      	ldr	r3, [pc, #412]	; (80017f8 <fsm_manual+0x234>)
 800165a:	2201      	movs	r2, #1
 800165c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(yellow1_GPIO_Port, red1_Pin, GPIO_PIN_SET);
 800165e:	2201      	movs	r2, #1
 8001660:	2104      	movs	r1, #4
 8001662:	4869      	ldr	r0, [pc, #420]	; (8001808 <fsm_manual+0x244>)
 8001664:	f001 f8a9 	bl	80027ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 8001668:	2201      	movs	r2, #1
 800166a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800166e:	4867      	ldr	r0, [pc, #412]	; (800180c <fsm_manual+0x248>)
 8001670:	f001 f8a3 	bl	80027ba <HAL_GPIO_WritePin>
		}

		if(timerBlinkingRed_flag == 1)
 8001674:	4b66      	ldr	r3, [pc, #408]	; (8001810 <fsm_manual+0x24c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d10c      	bne.n	8001696 <fsm_manual+0xd2>
		{
			HAL_GPIO_TogglePin(red1_GPIO_Port, red1_Pin);
 800167c:	2104      	movs	r1, #4
 800167e:	4862      	ldr	r0, [pc, #392]	; (8001808 <fsm_manual+0x244>)
 8001680:	f001 f8b3 	bl	80027ea <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(red2_GPIO_Port, red2_Pin);
 8001684:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001688:	4860      	ldr	r0, [pc, #384]	; (800180c <fsm_manual+0x248>)
 800168a:	f001 f8ae 	bl	80027ea <HAL_GPIO_TogglePin>

			setTimerBlinkingRed(500);
 800168e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001692:	f000 fb85 	bl	8001da0 <setTimerBlinkingRed>
		}

		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	2108      	movs	r1, #8
 800169a:	485b      	ldr	r0, [pc, #364]	; (8001808 <fsm_manual+0x244>)
 800169c:	f001 f88d 	bl	80027ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 80016a0:	2200      	movs	r2, #0
 80016a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016a6:	4859      	ldr	r0, [pc, #356]	; (800180c <fsm_manual+0x248>)
 80016a8:	f001 f887 	bl	80027ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2110      	movs	r1, #16
 80016b0:	4855      	ldr	r0, [pc, #340]	; (8001808 <fsm_manual+0x244>)
 80016b2:	f001 f882 	bl	80027ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016bc:	4853      	ldr	r0, [pc, #332]	; (800180c <fsm_manual+0x248>)
 80016be:	f001 f87c 	bl	80027ba <HAL_GPIO_WritePin>

		buffer_7SEG_horizontal[0] = red_yellow_green_manual_time[0] / 10;
 80016c2:	4b49      	ldr	r3, [pc, #292]	; (80017e8 <fsm_manual+0x224>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a53      	ldr	r2, [pc, #332]	; (8001814 <fsm_manual+0x250>)
 80016c8:	fb82 1203 	smull	r1, r2, r2, r3
 80016cc:	1092      	asrs	r2, r2, #2
 80016ce:	17db      	asrs	r3, r3, #31
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	4a51      	ldr	r2, [pc, #324]	; (8001818 <fsm_manual+0x254>)
 80016d4:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = red_yellow_green_manual_time[0] % 10;
 80016d6:	4b44      	ldr	r3, [pc, #272]	; (80017e8 <fsm_manual+0x224>)
 80016d8:	6819      	ldr	r1, [r3, #0]
 80016da:	4b4e      	ldr	r3, [pc, #312]	; (8001814 <fsm_manual+0x250>)
 80016dc:	fb83 2301 	smull	r2, r3, r3, r1
 80016e0:	109a      	asrs	r2, r3, #2
 80016e2:	17cb      	asrs	r3, r1, #31
 80016e4:	1ad2      	subs	r2, r2, r3
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	1aca      	subs	r2, r1, r3
 80016f0:	4b49      	ldr	r3, [pc, #292]	; (8001818 <fsm_manual+0x254>)
 80016f2:	605a      	str	r2, [r3, #4]

		buffer_7SEG_vertical[0] = 0;
 80016f4:	4b49      	ldr	r3, [pc, #292]	; (800181c <fsm_manual+0x258>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
		buffer_7SEG_vertical[1] = 2;
 80016fa:	4b48      	ldr	r3, [pc, #288]	; (800181c <fsm_manual+0x258>)
 80016fc:	2202      	movs	r2, #2
 80016fe:	605a      	str	r2, [r3, #4]

		if(timerAuto_flag == 1)
 8001700:	4b47      	ldr	r3, [pc, #284]	; (8001820 <fsm_manual+0x25c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b01      	cmp	r3, #1
 8001706:	f040 80f4 	bne.w	80018f2 <fsm_manual+0x32e>
		{
			status_horizontal = INIT_AUTO;
 800170a:	4b35      	ldr	r3, [pc, #212]	; (80017e0 <fsm_manual+0x21c>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
			status_vertical = INIT_AUTO;
 8001710:	4b44      	ldr	r3, [pc, #272]	; (8001824 <fsm_manual+0x260>)
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
		}

		break;
 8001716:	e0ec      	b.n	80018f2 <fsm_manual+0x32e>
	}
	case MANUAL_YELLOW:
	{

		if(check_sync_yellow == 0)
 8001718:	4b38      	ldr	r3, [pc, #224]	; (80017fc <fsm_manual+0x238>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d10d      	bne.n	800173c <fsm_manual+0x178>
		{
			check_sync_yellow = 1;
 8001720:	4b36      	ldr	r3, [pc, #216]	; (80017fc <fsm_manual+0x238>)
 8001722:	2201      	movs	r2, #1
 8001724:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_SET);
 8001726:	2201      	movs	r2, #1
 8001728:	2108      	movs	r1, #8
 800172a:	4837      	ldr	r0, [pc, #220]	; (8001808 <fsm_manual+0x244>)
 800172c:	f001 f845 	bl	80027ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);
 8001730:	2201      	movs	r2, #1
 8001732:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001736:	4835      	ldr	r0, [pc, #212]	; (800180c <fsm_manual+0x248>)
 8001738:	f001 f83f 	bl	80027ba <HAL_GPIO_WritePin>
		}

		if(timerBlinkingYellow_flag == 1)
 800173c:	4b3a      	ldr	r3, [pc, #232]	; (8001828 <fsm_manual+0x264>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d10c      	bne.n	800175e <fsm_manual+0x19a>
		{
			HAL_GPIO_TogglePin(yellow1_GPIO_Port, yellow1_Pin);
 8001744:	2108      	movs	r1, #8
 8001746:	4830      	ldr	r0, [pc, #192]	; (8001808 <fsm_manual+0x244>)
 8001748:	f001 f84f 	bl	80027ea <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(yellow2_GPIO_Port, yellow2_Pin);
 800174c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001750:	482e      	ldr	r0, [pc, #184]	; (800180c <fsm_manual+0x248>)
 8001752:	f001 f84a 	bl	80027ea <HAL_GPIO_TogglePin>

			setTimerBlinkingYellow(500);
 8001756:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800175a:	f000 fb3b 	bl	8001dd4 <setTimerBlinkingYellow>
		}

		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	2104      	movs	r1, #4
 8001762:	4829      	ldr	r0, [pc, #164]	; (8001808 <fsm_manual+0x244>)
 8001764:	f001 f829 	bl	80027ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 8001768:	2200      	movs	r2, #0
 800176a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800176e:	4827      	ldr	r0, [pc, #156]	; (800180c <fsm_manual+0x248>)
 8001770:	f001 f823 	bl	80027ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 8001774:	2200      	movs	r2, #0
 8001776:	2110      	movs	r1, #16
 8001778:	4823      	ldr	r0, [pc, #140]	; (8001808 <fsm_manual+0x244>)
 800177a:	f001 f81e 	bl	80027ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 800177e:	2200      	movs	r2, #0
 8001780:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001784:	4821      	ldr	r0, [pc, #132]	; (800180c <fsm_manual+0x248>)
 8001786:	f001 f818 	bl	80027ba <HAL_GPIO_WritePin>

		buffer_7SEG_horizontal[0] = red_yellow_green_manual_time[1] / 10;
 800178a:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <fsm_manual+0x224>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	4a21      	ldr	r2, [pc, #132]	; (8001814 <fsm_manual+0x250>)
 8001790:	fb82 1203 	smull	r1, r2, r2, r3
 8001794:	1092      	asrs	r2, r2, #2
 8001796:	17db      	asrs	r3, r3, #31
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	4a1f      	ldr	r2, [pc, #124]	; (8001818 <fsm_manual+0x254>)
 800179c:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = red_yellow_green_manual_time[1] % 10;
 800179e:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <fsm_manual+0x224>)
 80017a0:	6859      	ldr	r1, [r3, #4]
 80017a2:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <fsm_manual+0x250>)
 80017a4:	fb83 2301 	smull	r2, r3, r3, r1
 80017a8:	109a      	asrs	r2, r3, #2
 80017aa:	17cb      	asrs	r3, r1, #31
 80017ac:	1ad2      	subs	r2, r2, r3
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	1aca      	subs	r2, r1, r3
 80017b8:	4b17      	ldr	r3, [pc, #92]	; (8001818 <fsm_manual+0x254>)
 80017ba:	605a      	str	r2, [r3, #4]

		buffer_7SEG_vertical[0] = 0;
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <fsm_manual+0x258>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
		buffer_7SEG_vertical[1] = 3;
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <fsm_manual+0x258>)
 80017c4:	2203      	movs	r2, #3
 80017c6:	605a      	str	r2, [r3, #4]

		if(timerAuto_flag == 1)
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <fsm_manual+0x25c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	f040 8092 	bne.w	80018f6 <fsm_manual+0x332>
		{
			status_horizontal = INIT_AUTO;
 80017d2:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <fsm_manual+0x21c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
			status_vertical = INIT_AUTO;
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <fsm_manual+0x260>)
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
		}

		break;
 80017de:	e08a      	b.n	80018f6 <fsm_manual+0x332>
 80017e0:	200000bc 	.word	0x200000bc
 80017e4:	20000048 	.word	0x20000048
 80017e8:	200000c4 	.word	0x200000c4
 80017ec:	200000dc 	.word	0x200000dc
 80017f0:	200000e0 	.word	0x200000e0
 80017f4:	200000e4 	.word	0x200000e4
 80017f8:	200000d0 	.word	0x200000d0
 80017fc:	200000d4 	.word	0x200000d4
 8001800:	200000d8 	.word	0x200000d8
 8001804:	20000054 	.word	0x20000054
 8001808:	40010800 	.word	0x40010800
 800180c:	40010c00 	.word	0x40010c00
 8001810:	20000138 	.word	0x20000138
 8001814:	66666667 	.word	0x66666667
 8001818:	20000090 	.word	0x20000090
 800181c:	20000088 	.word	0x20000088
 8001820:	20000130 	.word	0x20000130
 8001824:	200000c0 	.word	0x200000c0
 8001828:	20000140 	.word	0x20000140
	}
	case MANUAL_GREEN:
	{

		if(check_sync_green == 0)
 800182c:	4b35      	ldr	r3, [pc, #212]	; (8001904 <fsm_manual+0x340>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d10d      	bne.n	8001850 <fsm_manual+0x28c>
		{
			check_sync_green = 1;
 8001834:	4b33      	ldr	r3, [pc, #204]	; (8001904 <fsm_manual+0x340>)
 8001836:	2201      	movs	r2, #1
 8001838:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_SET);
 800183a:	2201      	movs	r2, #1
 800183c:	2110      	movs	r1, #16
 800183e:	4832      	ldr	r0, [pc, #200]	; (8001908 <fsm_manual+0x344>)
 8001840:	f000 ffbb 	bl	80027ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 8001844:	2201      	movs	r2, #1
 8001846:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800184a:	4830      	ldr	r0, [pc, #192]	; (800190c <fsm_manual+0x348>)
 800184c:	f000 ffb5 	bl	80027ba <HAL_GPIO_WritePin>
		}

		if(timerBlinkingGreen_flag == 1)
 8001850:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <fsm_manual+0x34c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d10c      	bne.n	8001872 <fsm_manual+0x2ae>
		{
			HAL_GPIO_TogglePin(green1_GPIO_Port, green1_Pin);
 8001858:	2110      	movs	r1, #16
 800185a:	482b      	ldr	r0, [pc, #172]	; (8001908 <fsm_manual+0x344>)
 800185c:	f000 ffc5 	bl	80027ea <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(green2_GPIO_Port, green2_Pin);
 8001860:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001864:	4829      	ldr	r0, [pc, #164]	; (800190c <fsm_manual+0x348>)
 8001866:	f000 ffc0 	bl	80027ea <HAL_GPIO_TogglePin>

			setTimerBlinkingGreen(500);
 800186a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800186e:	f000 facb 	bl	8001e08 <setTimerBlinkingGreen>
		}

		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 8001872:	2200      	movs	r2, #0
 8001874:	2104      	movs	r1, #4
 8001876:	4824      	ldr	r0, [pc, #144]	; (8001908 <fsm_manual+0x344>)
 8001878:	f000 ff9f 	bl	80027ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 800187c:	2200      	movs	r2, #0
 800187e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001882:	4822      	ldr	r0, [pc, #136]	; (800190c <fsm_manual+0x348>)
 8001884:	f000 ff99 	bl	80027ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 8001888:	2200      	movs	r2, #0
 800188a:	2108      	movs	r1, #8
 800188c:	481e      	ldr	r0, [pc, #120]	; (8001908 <fsm_manual+0x344>)
 800188e:	f000 ff94 	bl	80027ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001898:	481c      	ldr	r0, [pc, #112]	; (800190c <fsm_manual+0x348>)
 800189a:	f000 ff8e 	bl	80027ba <HAL_GPIO_WritePin>

		buffer_7SEG_horizontal[0] = red_yellow_green_manual_time[2] / 10;
 800189e:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <fsm_manual+0x350>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	4a1d      	ldr	r2, [pc, #116]	; (8001918 <fsm_manual+0x354>)
 80018a4:	fb82 1203 	smull	r1, r2, r2, r3
 80018a8:	1092      	asrs	r2, r2, #2
 80018aa:	17db      	asrs	r3, r3, #31
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	4a1b      	ldr	r2, [pc, #108]	; (800191c <fsm_manual+0x358>)
 80018b0:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = red_yellow_green_manual_time[2] % 10;
 80018b2:	4b18      	ldr	r3, [pc, #96]	; (8001914 <fsm_manual+0x350>)
 80018b4:	6899      	ldr	r1, [r3, #8]
 80018b6:	4b18      	ldr	r3, [pc, #96]	; (8001918 <fsm_manual+0x354>)
 80018b8:	fb83 2301 	smull	r2, r3, r3, r1
 80018bc:	109a      	asrs	r2, r3, #2
 80018be:	17cb      	asrs	r3, r1, #31
 80018c0:	1ad2      	subs	r2, r2, r3
 80018c2:	4613      	mov	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	1aca      	subs	r2, r1, r3
 80018cc:	4b13      	ldr	r3, [pc, #76]	; (800191c <fsm_manual+0x358>)
 80018ce:	605a      	str	r2, [r3, #4]

		buffer_7SEG_vertical[0] = 0;
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <fsm_manual+0x35c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
		buffer_7SEG_vertical[1] = 4;
 80018d6:	4b12      	ldr	r3, [pc, #72]	; (8001920 <fsm_manual+0x35c>)
 80018d8:	2204      	movs	r2, #4
 80018da:	605a      	str	r2, [r3, #4]

		if(timerAuto_flag == 1)
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <fsm_manual+0x360>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d10a      	bne.n	80018fa <fsm_manual+0x336>
		{
			status_horizontal = INIT_AUTO;
 80018e4:	4b10      	ldr	r3, [pc, #64]	; (8001928 <fsm_manual+0x364>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
			status_vertical = INIT_AUTO;
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <fsm_manual+0x368>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
		}

		break;
 80018f0:	e003      	b.n	80018fa <fsm_manual+0x336>
		break;
 80018f2:	bf00      	nop
 80018f4:	e002      	b.n	80018fc <fsm_manual+0x338>
		break;
 80018f6:	bf00      	nop
 80018f8:	e000      	b.n	80018fc <fsm_manual+0x338>
		break;
 80018fa:	bf00      	nop
	}

	}

}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	200000d8 	.word	0x200000d8
 8001908:	40010800 	.word	0x40010800
 800190c:	40010c00 	.word	0x40010c00
 8001910:	20000148 	.word	0x20000148
 8001914:	200000c4 	.word	0x200000c4
 8001918:	66666667 	.word	0x66666667
 800191c:	20000090 	.word	0x20000090
 8001920:	20000088 	.word	0x20000088
 8001924:	20000130 	.word	0x20000130
 8001928:	200000bc 	.word	0x200000bc
 800192c:	200000c0 	.word	0x200000c0

08001930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001934:	f000 fc40 	bl	80021b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001938:	f000 f82c 	bl	8001994 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800193c:	f000 f8b2 	bl	8001aa4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001940:	f000 f864 	bl	8001a0c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001944:	4810      	ldr	r0, [pc, #64]	; (8001988 <main+0x58>)
 8001946:	f001 fb95 	bl	8003074 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimerTest(1000);
 800194a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800194e:	f000 f923 	bl	8001b98 <setTimerTest>
  setTimerENhorizontal(500);
 8001952:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001956:	f000 f939 	bl	8001bcc <setTimerENhorizontal>
  setTimerENvertical(500);
 800195a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800195e:	f000 f94f 	bl	8001c00 <setTimerENvertical>

  while (1)
  {
	  if(timerTest_flag == 1)
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <main+0x5c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d107      	bne.n	800197a <main+0x4a>
	  {
		  HAL_GPIO_TogglePin(test_GPIO_Port, test_Pin);
 800196a:	2120      	movs	r1, #32
 800196c:	4808      	ldr	r0, [pc, #32]	; (8001990 <main+0x60>)
 800196e:	f000 ff3c 	bl	80027ea <HAL_GPIO_TogglePin>

		  setTimerTest(1000);
 8001972:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001976:	f000 f90f 	bl	8001b98 <setTimerTest>
	  }

	  fsm_manual();
 800197a:	f7ff fe23 	bl	80015c4 <fsm_manual>

	  fsm_automatic();
 800197e:	f7ff f99b 	bl	8000cb8 <fsm_automatic>

	  fsm_setting();
 8001982:	f7ff fc07 	bl	8001194 <fsm_setting>
	  if(timerTest_flag == 1)
 8001986:	e7ec      	b.n	8001962 <main+0x32>
 8001988:	20000150 	.word	0x20000150
 800198c:	200000e8 	.word	0x200000e8
 8001990:	40010800 	.word	0x40010800

08001994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b090      	sub	sp, #64	; 0x40
 8001998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800199a:	f107 0318 	add.w	r3, r7, #24
 800199e:	2228      	movs	r2, #40	; 0x28
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f001 ff16 	bl	80037d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
 80019b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019b6:	2302      	movs	r3, #2
 80019b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019ba:	2301      	movs	r3, #1
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019be:	2310      	movs	r3, #16
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019c6:	f107 0318 	add.w	r3, r7, #24
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 ff26 	bl	800281c <HAL_RCC_OscConfig>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <SystemClock_Config+0x46>
  {
    Error_Handler();
 80019d6:	f000 f8d9 	bl	8001b8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019da:	230f      	movs	r3, #15
 80019dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f001 f992 	bl	8002d1c <HAL_RCC_ClockConfig>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80019fe:	f000 f8c5 	bl	8001b8c <Error_Handler>
  }
}
 8001a02:	bf00      	nop
 8001a04:	3740      	adds	r7, #64	; 0x40
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a12:	f107 0308 	add.w	r3, r7, #8
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a20:	463b      	mov	r3, r7
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a28:	4b1d      	ldr	r3, [pc, #116]	; (8001aa0 <MX_TIM2_Init+0x94>)
 8001a2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001a30:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <MX_TIM2_Init+0x94>)
 8001a32:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001a36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a38:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <MX_TIM2_Init+0x94>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001a3e:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <MX_TIM2_Init+0x94>)
 8001a40:	2209      	movs	r2, #9
 8001a42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a44:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <MX_TIM2_Init+0x94>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <MX_TIM2_Init+0x94>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a50:	4813      	ldr	r0, [pc, #76]	; (8001aa0 <MX_TIM2_Init+0x94>)
 8001a52:	f001 fabf 	bl	8002fd4 <HAL_TIM_Base_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a5c:	f000 f896 	bl	8001b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a66:	f107 0308 	add.w	r3, r7, #8
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	480c      	ldr	r0, [pc, #48]	; (8001aa0 <MX_TIM2_Init+0x94>)
 8001a6e:	f001 fc3d 	bl	80032ec <HAL_TIM_ConfigClockSource>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a78:	f000 f888 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a84:	463b      	mov	r3, r7
 8001a86:	4619      	mov	r1, r3
 8001a88:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <MX_TIM2_Init+0x94>)
 8001a8a:	f001 fe15 	bl	80036b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a94:	f000 f87a 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a98:	bf00      	nop
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000150 	.word	0x20000150

08001aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aaa:	f107 0308 	add.w	r3, r7, #8
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab8:	4b29      	ldr	r3, [pc, #164]	; (8001b60 <MX_GPIO_Init+0xbc>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	4a28      	ldr	r2, [pc, #160]	; (8001b60 <MX_GPIO_Init+0xbc>)
 8001abe:	f043 0304 	orr.w	r3, r3, #4
 8001ac2:	6193      	str	r3, [r2, #24]
 8001ac4:	4b26      	ldr	r3, [pc, #152]	; (8001b60 <MX_GPIO_Init+0xbc>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad0:	4b23      	ldr	r3, [pc, #140]	; (8001b60 <MX_GPIO_Init+0xbc>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	4a22      	ldr	r2, [pc, #136]	; (8001b60 <MX_GPIO_Init+0xbc>)
 8001ad6:	f043 0308 	orr.w	r3, r3, #8
 8001ada:	6193      	str	r3, [r2, #24]
 8001adc:	4b20      	ldr	r3, [pc, #128]	; (8001b60 <MX_GPIO_Init+0xbc>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	603b      	str	r3, [r7, #0]
 8001ae6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, red1_Pin|yellow1_Pin|green1_Pin|test_Pin
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f641 71fc 	movw	r1, #8188	; 0x1ffc
 8001aee:	481d      	ldr	r0, [pc, #116]	; (8001b64 <MX_GPIO_Init+0xc0>)
 8001af0:	f000 fe63 	bl	80027ba <HAL_GPIO_WritePin>
                          |a1_Pin|b1_Pin|c1_Pin|d1_Pin
                          |e1_Pin|f1_Pin|g1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|e2_Pin|f2_Pin
 8001af4:	2200      	movs	r2, #0
 8001af6:	f64f 71f3 	movw	r1, #65523	; 0xfff3
 8001afa:	481b      	ldr	r0, [pc, #108]	; (8001b68 <MX_GPIO_Init+0xc4>)
 8001afc:	f000 fe5d 	bl	80027ba <HAL_GPIO_WritePin>
                          |c2_Pin|d2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : red1_Pin yellow1_Pin green1_Pin test_Pin
                           a1_Pin b1_Pin c1_Pin d1_Pin
                           e1_Pin f1_Pin g1_Pin */
  GPIO_InitStruct.Pin = red1_Pin|yellow1_Pin|green1_Pin|test_Pin
 8001b00:	f641 73fc 	movw	r3, #8188	; 0x1ffc
 8001b04:	60bb      	str	r3, [r7, #8]
                          |a1_Pin|b1_Pin|c1_Pin|d1_Pin
                          |e1_Pin|f1_Pin|g1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b06:	2301      	movs	r3, #1
 8001b08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b12:	f107 0308 	add.w	r3, r7, #8
 8001b16:	4619      	mov	r1, r3
 8001b18:	4812      	ldr	r0, [pc, #72]	; (8001b64 <MX_GPIO_Init+0xc0>)
 8001b1a:	f000 fcbd 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin e2_Pin f2_Pin
                           g2_Pin red2_Pin yellow2_Pin green2_Pin
                           EN2_Pin EN3_Pin a2_Pin b2_Pin
                           c2_Pin d2_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|e2_Pin|f2_Pin
 8001b1e:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8001b22:	60bb      	str	r3, [r7, #8]
                          |g2_Pin|red2_Pin|yellow2_Pin|green2_Pin
                          |EN2_Pin|EN3_Pin|a2_Pin|b2_Pin
                          |c2_Pin|d2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b24:	2301      	movs	r3, #1
 8001b26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b30:	f107 0308 	add.w	r3, r7, #8
 8001b34:	4619      	mov	r1, r3
 8001b36:	480c      	ldr	r0, [pc, #48]	; (8001b68 <MX_GPIO_Init+0xc4>)
 8001b38:	f000 fcae 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 8001b3c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b46:	2301      	movs	r3, #1
 8001b48:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4a:	f107 0308 	add.w	r3, r7, #8
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4804      	ldr	r0, [pc, #16]	; (8001b64 <MX_GPIO_Init+0xc0>)
 8001b52:	f000 fca1 	bl	8002498 <HAL_GPIO_Init>

}
 8001b56:	bf00      	nop
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40010800 	.word	0x40010800
 8001b68:	40010c00 	.word	0x40010c00

08001b6c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	timerRun();
 8001b74:	f000 f962 	bl	8001e3c <timerRun>
	getButton1();
 8001b78:	f7fe ff0e 	bl	8000998 <getButton1>
	getButton2();
 8001b7c:	f7fe ff92 	bl	8000aa4 <getButton2>
	getButton3();
 8001b80:	f7ff f814 	bl	8000bac <getButton3>
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b90:	b672      	cpsid	i
}
 8001b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <Error_Handler+0x8>
	...

08001b98 <setTimerTest>:
int timerBlinkingGreen_flag = 0;
int timerBlinkingGreen_counter = 0;


void setTimerTest(int duration)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
    timerTest_counter = duration / TIMER_CYCLE;
 8001ba0:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <setTimerTest+0x28>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001baa:	4a06      	ldr	r2, [pc, #24]	; (8001bc4 <setTimerTest+0x2c>)
 8001bac:	6013      	str	r3, [r2, #0]
    timerTest_flag = 0;
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <setTimerTest+0x30>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	2000005c 	.word	0x2000005c
 8001bc4:	200000ec 	.word	0x200000ec
 8001bc8:	200000e8 	.word	0x200000e8

08001bcc <setTimerENhorizontal>:

void setTimerENhorizontal(int duration)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
    timerENhorizontal_counter = duration / TIMER_CYCLE;
 8001bd4:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <setTimerENhorizontal+0x28>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bde:	4a06      	ldr	r2, [pc, #24]	; (8001bf8 <setTimerENhorizontal+0x2c>)
 8001be0:	6013      	str	r3, [r2, #0]
    timerENhorizontal_flag = 0;
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <setTimerENhorizontal+0x30>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	2000005c 	.word	0x2000005c
 8001bf8:	200000f4 	.word	0x200000f4
 8001bfc:	200000f0 	.word	0x200000f0

08001c00 <setTimerENvertical>:

void setTimerENvertical(int duration)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
    timerENvertical_counter = duration / TIMER_CYCLE;
 8001c08:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <setTimerENvertical+0x28>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c12:	4a06      	ldr	r2, [pc, #24]	; (8001c2c <setTimerENvertical+0x2c>)
 8001c14:	6013      	str	r3, [r2, #0]
    timerENvertical_flag = 0;
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <setTimerENvertical+0x30>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	2000005c 	.word	0x2000005c
 8001c2c:	200000fc 	.word	0x200000fc
 8001c30:	200000f8 	.word	0x200000f8

08001c34 <setTimer7SEGCountRedhorizontal>:


void setTimer7SEGCountRedhorizontal(int duration)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
    timer7SEGCountRedhorizontal_counter = duration / TIMER_CYCLE;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <setTimer7SEGCountRedhorizontal+0x28>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c46:	4a06      	ldr	r2, [pc, #24]	; (8001c60 <setTimer7SEGCountRedhorizontal+0x2c>)
 8001c48:	6013      	str	r3, [r2, #0]
    timer7SEGCountRedhorizontal_flag = 0;
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <setTimer7SEGCountRedhorizontal+0x30>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	2000005c 	.word	0x2000005c
 8001c60:	20000104 	.word	0x20000104
 8001c64:	20000100 	.word	0x20000100

08001c68 <setTimer7SEGCountYellowhorizontal>:

void setTimer7SEGCountYellowhorizontal(int duration)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
    timer7SEGCountYellowhorizontal_counter = duration / TIMER_CYCLE;
 8001c70:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <setTimer7SEGCountYellowhorizontal+0x28>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c7a:	4a06      	ldr	r2, [pc, #24]	; (8001c94 <setTimer7SEGCountYellowhorizontal+0x2c>)
 8001c7c:	6013      	str	r3, [r2, #0]
    timer7SEGCountYellowhorizontal_flag = 0;
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <setTimer7SEGCountYellowhorizontal+0x30>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	2000005c 	.word	0x2000005c
 8001c94:	2000010c 	.word	0x2000010c
 8001c98:	20000108 	.word	0x20000108

08001c9c <setTimer7SEGCountGreenhorizontal>:

void setTimer7SEGCountGreenhorizontal(int duration)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
    timer7SEGCountGreenhorizontal_counter = duration / TIMER_CYCLE;
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <setTimer7SEGCountGreenhorizontal+0x28>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	fb92 f3f3 	sdiv	r3, r2, r3
 8001cae:	4a06      	ldr	r2, [pc, #24]	; (8001cc8 <setTimer7SEGCountGreenhorizontal+0x2c>)
 8001cb0:	6013      	str	r3, [r2, #0]
    timer7SEGCountGreenhorizontal_flag = 0;
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <setTimer7SEGCountGreenhorizontal+0x30>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	2000005c 	.word	0x2000005c
 8001cc8:	20000114 	.word	0x20000114
 8001ccc:	20000110 	.word	0x20000110

08001cd0 <setTimer7SEGCountRedvertical>:


void setTimer7SEGCountRedvertical(int duration)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
    timer7SEGCountRedvertical_counter = duration / TIMER_CYCLE;
 8001cd8:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <setTimer7SEGCountRedvertical+0x28>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ce2:	4a06      	ldr	r2, [pc, #24]	; (8001cfc <setTimer7SEGCountRedvertical+0x2c>)
 8001ce4:	6013      	str	r3, [r2, #0]
    timer7SEGCountRedvertical_flag = 0;
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <setTimer7SEGCountRedvertical+0x30>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	2000005c 	.word	0x2000005c
 8001cfc:	2000011c 	.word	0x2000011c
 8001d00:	20000118 	.word	0x20000118

08001d04 <setTimer7SEGCountYellowvertical>:

void setTimer7SEGCountYellowvertical(int duration)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
    timer7SEGCountYellowvertical_counter = duration / TIMER_CYCLE;
 8001d0c:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <setTimer7SEGCountYellowvertical+0x28>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d16:	4a06      	ldr	r2, [pc, #24]	; (8001d30 <setTimer7SEGCountYellowvertical+0x2c>)
 8001d18:	6013      	str	r3, [r2, #0]
    timer7SEGCountYellowvertical_flag = 0;
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <setTimer7SEGCountYellowvertical+0x30>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	2000005c 	.word	0x2000005c
 8001d30:	20000124 	.word	0x20000124
 8001d34:	20000120 	.word	0x20000120

08001d38 <setTimer7SEGCountGreenvertical>:

void setTimer7SEGCountGreenvertical(int duration)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
    timer7SEGCountGreenvertical_counter = duration / TIMER_CYCLE;
 8001d40:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <setTimer7SEGCountGreenvertical+0x28>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d4a:	4a06      	ldr	r2, [pc, #24]	; (8001d64 <setTimer7SEGCountGreenvertical+0x2c>)
 8001d4c:	6013      	str	r3, [r2, #0]
    timer7SEGCountGreenvertical_flag = 0;
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <setTimer7SEGCountGreenvertical+0x30>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	2000005c 	.word	0x2000005c
 8001d64:	2000012c 	.word	0x2000012c
 8001d68:	20000128 	.word	0x20000128

08001d6c <setTimerAuto>:


void setTimerAuto(int duration)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
    timerAuto_counter = duration / TIMER_CYCLE;
 8001d74:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <setTimerAuto+0x28>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d7e:	4a06      	ldr	r2, [pc, #24]	; (8001d98 <setTimerAuto+0x2c>)
 8001d80:	6013      	str	r3, [r2, #0]
    timerAuto_flag = 0;
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <setTimerAuto+0x30>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	2000005c 	.word	0x2000005c
 8001d98:	20000134 	.word	0x20000134
 8001d9c:	20000130 	.word	0x20000130

08001da0 <setTimerBlinkingRed>:


void setTimerBlinkingRed(int duration)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	timerBlinkingRed_counter = duration / TIMER_CYCLE;
 8001da8:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <setTimerBlinkingRed+0x28>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	fb92 f3f3 	sdiv	r3, r2, r3
 8001db2:	4a06      	ldr	r2, [pc, #24]	; (8001dcc <setTimerBlinkingRed+0x2c>)
 8001db4:	6013      	str	r3, [r2, #0]
	timerBlinkingRed_flag = 0;
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <setTimerBlinkingRed+0x30>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	2000005c 	.word	0x2000005c
 8001dcc:	2000013c 	.word	0x2000013c
 8001dd0:	20000138 	.word	0x20000138

08001dd4 <setTimerBlinkingYellow>:

void setTimerBlinkingYellow(int duration) {
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
    timerBlinkingYellow_counter = duration / TIMER_CYCLE;
 8001ddc:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <setTimerBlinkingYellow+0x28>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	fb92 f3f3 	sdiv	r3, r2, r3
 8001de6:	4a06      	ldr	r2, [pc, #24]	; (8001e00 <setTimerBlinkingYellow+0x2c>)
 8001de8:	6013      	str	r3, [r2, #0]
    timerBlinkingYellow_flag = 0;
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <setTimerBlinkingYellow+0x30>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	2000005c 	.word	0x2000005c
 8001e00:	20000144 	.word	0x20000144
 8001e04:	20000140 	.word	0x20000140

08001e08 <setTimerBlinkingGreen>:

void setTimerBlinkingGreen(int duration) {
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
    timerBlinkingGreen_counter = duration / TIMER_CYCLE;
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <setTimerBlinkingGreen+0x28>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e1a:	4a06      	ldr	r2, [pc, #24]	; (8001e34 <setTimerBlinkingGreen+0x2c>)
 8001e1c:	6013      	str	r3, [r2, #0]
    timerBlinkingGreen_flag = 0;
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <setTimerBlinkingGreen+0x30>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	2000005c 	.word	0x2000005c
 8001e34:	2000014c 	.word	0x2000014c
 8001e38:	20000148 	.word	0x20000148

08001e3c <timerRun>:

void timerRun()
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
    if (timerTest_counter > 0)
 8001e40:	4b69      	ldr	r3, [pc, #420]	; (8001fe8 <timerRun+0x1ac>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	dd0b      	ble.n	8001e60 <timerRun+0x24>
    {
        timerTest_counter--;
 8001e48:	4b67      	ldr	r3, [pc, #412]	; (8001fe8 <timerRun+0x1ac>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	4a66      	ldr	r2, [pc, #408]	; (8001fe8 <timerRun+0x1ac>)
 8001e50:	6013      	str	r3, [r2, #0]
        if (timerTest_counter <= 0)
 8001e52:	4b65      	ldr	r3, [pc, #404]	; (8001fe8 <timerRun+0x1ac>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	dc02      	bgt.n	8001e60 <timerRun+0x24>
        {
            timerTest_flag = 1;
 8001e5a:	4b64      	ldr	r3, [pc, #400]	; (8001fec <timerRun+0x1b0>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]
        }
    }


    if (timerENhorizontal_counter > 0)
 8001e60:	4b63      	ldr	r3, [pc, #396]	; (8001ff0 <timerRun+0x1b4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	dd0b      	ble.n	8001e80 <timerRun+0x44>
    {
        timerENhorizontal_counter--;
 8001e68:	4b61      	ldr	r3, [pc, #388]	; (8001ff0 <timerRun+0x1b4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	4a60      	ldr	r2, [pc, #384]	; (8001ff0 <timerRun+0x1b4>)
 8001e70:	6013      	str	r3, [r2, #0]
        if (timerENhorizontal_counter <= 0)
 8001e72:	4b5f      	ldr	r3, [pc, #380]	; (8001ff0 <timerRun+0x1b4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	dc02      	bgt.n	8001e80 <timerRun+0x44>
        {
            timerENhorizontal_flag = 1;
 8001e7a:	4b5e      	ldr	r3, [pc, #376]	; (8001ff4 <timerRun+0x1b8>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]
        }
    }

    if (timerENvertical_counter > 0)
 8001e80:	4b5d      	ldr	r3, [pc, #372]	; (8001ff8 <timerRun+0x1bc>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	dd0b      	ble.n	8001ea0 <timerRun+0x64>
    {
        timerENvertical_counter--;
 8001e88:	4b5b      	ldr	r3, [pc, #364]	; (8001ff8 <timerRun+0x1bc>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	4a5a      	ldr	r2, [pc, #360]	; (8001ff8 <timerRun+0x1bc>)
 8001e90:	6013      	str	r3, [r2, #0]
        if (timerENvertical_counter <= 0)
 8001e92:	4b59      	ldr	r3, [pc, #356]	; (8001ff8 <timerRun+0x1bc>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	dc02      	bgt.n	8001ea0 <timerRun+0x64>
        {
            timerENvertical_flag = 1;
 8001e9a:	4b58      	ldr	r3, [pc, #352]	; (8001ffc <timerRun+0x1c0>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
        }
    }


    if (timer7SEGCountRedhorizontal_counter > 0)
 8001ea0:	4b57      	ldr	r3, [pc, #348]	; (8002000 <timerRun+0x1c4>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	dd0b      	ble.n	8001ec0 <timerRun+0x84>
    {
        timer7SEGCountRedhorizontal_counter--;
 8001ea8:	4b55      	ldr	r3, [pc, #340]	; (8002000 <timerRun+0x1c4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	3b01      	subs	r3, #1
 8001eae:	4a54      	ldr	r2, [pc, #336]	; (8002000 <timerRun+0x1c4>)
 8001eb0:	6013      	str	r3, [r2, #0]
        if (timer7SEGCountRedhorizontal_counter <= 0)
 8001eb2:	4b53      	ldr	r3, [pc, #332]	; (8002000 <timerRun+0x1c4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	dc02      	bgt.n	8001ec0 <timerRun+0x84>
        {
            timer7SEGCountRedhorizontal_flag = 1;
 8001eba:	4b52      	ldr	r3, [pc, #328]	; (8002004 <timerRun+0x1c8>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]
        }
    }

    if (timer7SEGCountYellowhorizontal_counter > 0)
 8001ec0:	4b51      	ldr	r3, [pc, #324]	; (8002008 <timerRun+0x1cc>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	dd0b      	ble.n	8001ee0 <timerRun+0xa4>
    {
        timer7SEGCountYellowhorizontal_counter--;
 8001ec8:	4b4f      	ldr	r3, [pc, #316]	; (8002008 <timerRun+0x1cc>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	4a4e      	ldr	r2, [pc, #312]	; (8002008 <timerRun+0x1cc>)
 8001ed0:	6013      	str	r3, [r2, #0]
        if (timer7SEGCountYellowhorizontal_counter <= 0)
 8001ed2:	4b4d      	ldr	r3, [pc, #308]	; (8002008 <timerRun+0x1cc>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	dc02      	bgt.n	8001ee0 <timerRun+0xa4>
        {
            timer7SEGCountYellowhorizontal_flag = 1;
 8001eda:	4b4c      	ldr	r3, [pc, #304]	; (800200c <timerRun+0x1d0>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	601a      	str	r2, [r3, #0]
        }
    }

    if (timer7SEGCountGreenhorizontal_counter > 0)
 8001ee0:	4b4b      	ldr	r3, [pc, #300]	; (8002010 <timerRun+0x1d4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	dd0b      	ble.n	8001f00 <timerRun+0xc4>
    {
        timer7SEGCountGreenhorizontal_counter--;
 8001ee8:	4b49      	ldr	r3, [pc, #292]	; (8002010 <timerRun+0x1d4>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	3b01      	subs	r3, #1
 8001eee:	4a48      	ldr	r2, [pc, #288]	; (8002010 <timerRun+0x1d4>)
 8001ef0:	6013      	str	r3, [r2, #0]
        if (timer7SEGCountGreenhorizontal_counter <= 0)
 8001ef2:	4b47      	ldr	r3, [pc, #284]	; (8002010 <timerRun+0x1d4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	dc02      	bgt.n	8001f00 <timerRun+0xc4>
        {
            timer7SEGCountGreenhorizontal_flag = 1;
 8001efa:	4b46      	ldr	r3, [pc, #280]	; (8002014 <timerRun+0x1d8>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
        }
    }


    if (timer7SEGCountRedvertical_counter > 0)
 8001f00:	4b45      	ldr	r3, [pc, #276]	; (8002018 <timerRun+0x1dc>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	dd0b      	ble.n	8001f20 <timerRun+0xe4>
    {
        timer7SEGCountRedvertical_counter--;
 8001f08:	4b43      	ldr	r3, [pc, #268]	; (8002018 <timerRun+0x1dc>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	4a42      	ldr	r2, [pc, #264]	; (8002018 <timerRun+0x1dc>)
 8001f10:	6013      	str	r3, [r2, #0]
        if (timer7SEGCountRedvertical_counter <= 0)
 8001f12:	4b41      	ldr	r3, [pc, #260]	; (8002018 <timerRun+0x1dc>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	dc02      	bgt.n	8001f20 <timerRun+0xe4>
        {
            timer7SEGCountRedvertical_flag = 1;
 8001f1a:	4b40      	ldr	r3, [pc, #256]	; (800201c <timerRun+0x1e0>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]
        }
    }

    if (timer7SEGCountYellowvertical_counter > 0)
 8001f20:	4b3f      	ldr	r3, [pc, #252]	; (8002020 <timerRun+0x1e4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	dd0b      	ble.n	8001f40 <timerRun+0x104>
    {
        timer7SEGCountYellowvertical_counter--;
 8001f28:	4b3d      	ldr	r3, [pc, #244]	; (8002020 <timerRun+0x1e4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	4a3c      	ldr	r2, [pc, #240]	; (8002020 <timerRun+0x1e4>)
 8001f30:	6013      	str	r3, [r2, #0]
        if (timer7SEGCountYellowvertical_counter <= 0)
 8001f32:	4b3b      	ldr	r3, [pc, #236]	; (8002020 <timerRun+0x1e4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	dc02      	bgt.n	8001f40 <timerRun+0x104>
        {
            timer7SEGCountYellowvertical_flag = 1;
 8001f3a:	4b3a      	ldr	r3, [pc, #232]	; (8002024 <timerRun+0x1e8>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]
        }
    }

    if (timer7SEGCountGreenvertical_counter > 0)
 8001f40:	4b39      	ldr	r3, [pc, #228]	; (8002028 <timerRun+0x1ec>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	dd0b      	ble.n	8001f60 <timerRun+0x124>
    {
        timer7SEGCountGreenvertical_counter--;
 8001f48:	4b37      	ldr	r3, [pc, #220]	; (8002028 <timerRun+0x1ec>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	4a36      	ldr	r2, [pc, #216]	; (8002028 <timerRun+0x1ec>)
 8001f50:	6013      	str	r3, [r2, #0]
        if (timer7SEGCountGreenvertical_counter <= 0)
 8001f52:	4b35      	ldr	r3, [pc, #212]	; (8002028 <timerRun+0x1ec>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	dc02      	bgt.n	8001f60 <timerRun+0x124>
        {
            timer7SEGCountGreenvertical_flag = 1;
 8001f5a:	4b34      	ldr	r3, [pc, #208]	; (800202c <timerRun+0x1f0>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]
        }
    }


    if (timerAuto_counter > 0)
 8001f60:	4b33      	ldr	r3, [pc, #204]	; (8002030 <timerRun+0x1f4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	dd0b      	ble.n	8001f80 <timerRun+0x144>
    {
        timerAuto_counter--;
 8001f68:	4b31      	ldr	r3, [pc, #196]	; (8002030 <timerRun+0x1f4>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	4a30      	ldr	r2, [pc, #192]	; (8002030 <timerRun+0x1f4>)
 8001f70:	6013      	str	r3, [r2, #0]
        if (timerAuto_counter <= 0)
 8001f72:	4b2f      	ldr	r3, [pc, #188]	; (8002030 <timerRun+0x1f4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	dc02      	bgt.n	8001f80 <timerRun+0x144>
        {
            timerAuto_flag = 1;
 8001f7a:	4b2e      	ldr	r3, [pc, #184]	; (8002034 <timerRun+0x1f8>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]
        }
    }

    if (timerBlinkingRed_counter > 0)
 8001f80:	4b2d      	ldr	r3, [pc, #180]	; (8002038 <timerRun+0x1fc>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	dd0b      	ble.n	8001fa0 <timerRun+0x164>
    {
    	timerBlinkingRed_counter--;
 8001f88:	4b2b      	ldr	r3, [pc, #172]	; (8002038 <timerRun+0x1fc>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	4a2a      	ldr	r2, [pc, #168]	; (8002038 <timerRun+0x1fc>)
 8001f90:	6013      	str	r3, [r2, #0]
    	if (timerBlinkingRed_counter <= 0)
 8001f92:	4b29      	ldr	r3, [pc, #164]	; (8002038 <timerRun+0x1fc>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	dc02      	bgt.n	8001fa0 <timerRun+0x164>
    	{
    		timerBlinkingRed_flag = 1;
 8001f9a:	4b28      	ldr	r3, [pc, #160]	; (800203c <timerRun+0x200>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]
    	}
    }
    if (timerBlinkingYellow_counter > 0)
 8001fa0:	4b27      	ldr	r3, [pc, #156]	; (8002040 <timerRun+0x204>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	dd0b      	ble.n	8001fc0 <timerRun+0x184>
    {
        timerBlinkingYellow_counter--;
 8001fa8:	4b25      	ldr	r3, [pc, #148]	; (8002040 <timerRun+0x204>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	3b01      	subs	r3, #1
 8001fae:	4a24      	ldr	r2, [pc, #144]	; (8002040 <timerRun+0x204>)
 8001fb0:	6013      	str	r3, [r2, #0]
        if (timerBlinkingYellow_counter <= 0)
 8001fb2:	4b23      	ldr	r3, [pc, #140]	; (8002040 <timerRun+0x204>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	dc02      	bgt.n	8001fc0 <timerRun+0x184>
        {
            timerBlinkingYellow_flag = 1;
 8001fba:	4b22      	ldr	r3, [pc, #136]	; (8002044 <timerRun+0x208>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]
        }
    }
    if (timerBlinkingGreen_counter > 0)
 8001fc0:	4b21      	ldr	r3, [pc, #132]	; (8002048 <timerRun+0x20c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	dd0b      	ble.n	8001fe0 <timerRun+0x1a4>
    {
        timerBlinkingGreen_counter--;
 8001fc8:	4b1f      	ldr	r3, [pc, #124]	; (8002048 <timerRun+0x20c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	4a1e      	ldr	r2, [pc, #120]	; (8002048 <timerRun+0x20c>)
 8001fd0:	6013      	str	r3, [r2, #0]
        if (timerBlinkingGreen_counter <= 0)
 8001fd2:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <timerRun+0x20c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	dc02      	bgt.n	8001fe0 <timerRun+0x1a4>
        {
            timerBlinkingGreen_flag = 1;
 8001fda:	4b1c      	ldr	r3, [pc, #112]	; (800204c <timerRun+0x210>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
        }
    }
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr
 8001fe8:	200000ec 	.word	0x200000ec
 8001fec:	200000e8 	.word	0x200000e8
 8001ff0:	200000f4 	.word	0x200000f4
 8001ff4:	200000f0 	.word	0x200000f0
 8001ff8:	200000fc 	.word	0x200000fc
 8001ffc:	200000f8 	.word	0x200000f8
 8002000:	20000104 	.word	0x20000104
 8002004:	20000100 	.word	0x20000100
 8002008:	2000010c 	.word	0x2000010c
 800200c:	20000108 	.word	0x20000108
 8002010:	20000114 	.word	0x20000114
 8002014:	20000110 	.word	0x20000110
 8002018:	2000011c 	.word	0x2000011c
 800201c:	20000118 	.word	0x20000118
 8002020:	20000124 	.word	0x20000124
 8002024:	20000120 	.word	0x20000120
 8002028:	2000012c 	.word	0x2000012c
 800202c:	20000128 	.word	0x20000128
 8002030:	20000134 	.word	0x20000134
 8002034:	20000130 	.word	0x20000130
 8002038:	2000013c 	.word	0x2000013c
 800203c:	20000138 	.word	0x20000138
 8002040:	20000144 	.word	0x20000144
 8002044:	20000140 	.word	0x20000140
 8002048:	2000014c 	.word	0x2000014c
 800204c:	20000148 	.word	0x20000148

08002050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002056:	4b15      	ldr	r3, [pc, #84]	; (80020ac <HAL_MspInit+0x5c>)
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	4a14      	ldr	r2, [pc, #80]	; (80020ac <HAL_MspInit+0x5c>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6193      	str	r3, [r2, #24]
 8002062:	4b12      	ldr	r3, [pc, #72]	; (80020ac <HAL_MspInit+0x5c>)
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800206e:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <HAL_MspInit+0x5c>)
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	4a0e      	ldr	r2, [pc, #56]	; (80020ac <HAL_MspInit+0x5c>)
 8002074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002078:	61d3      	str	r3, [r2, #28]
 800207a:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <HAL_MspInit+0x5c>)
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002086:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <HAL_MspInit+0x60>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <HAL_MspInit+0x60>)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40010000 	.word	0x40010000

080020b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c4:	d113      	bne.n	80020ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <HAL_TIM_Base_MspInit+0x44>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	4a0b      	ldr	r2, [pc, #44]	; (80020f8 <HAL_TIM_Base_MspInit+0x44>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	61d3      	str	r3, [r2, #28]
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_TIM_Base_MspInit+0x44>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	201c      	movs	r0, #28
 80020e4:	f000 f9a1 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020e8:	201c      	movs	r0, #28
 80020ea:	f000 f9ba 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000

080020fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002100:	e7fe      	b.n	8002100 <NMI_Handler+0x4>

08002102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002106:	e7fe      	b.n	8002106 <HardFault_Handler+0x4>

08002108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800210c:	e7fe      	b.n	800210c <MemManage_Handler+0x4>

0800210e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002112:	e7fe      	b.n	8002112 <BusFault_Handler+0x4>

08002114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002118:	e7fe      	b.n	8002118 <UsageFault_Handler+0x4>

0800211a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800211a:	b480      	push	{r7}
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr

08002126 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr

08002132 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr

0800213e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002142:	f000 f87f 	bl	8002244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <TIM2_IRQHandler+0x10>)
 8002152:	f000 ffdb 	bl	800310c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000150 	.word	0x20000150

08002160 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800216c:	f7ff fff8 	bl	8002160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002170:	480b      	ldr	r0, [pc, #44]	; (80021a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002172:	490c      	ldr	r1, [pc, #48]	; (80021a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002174:	4a0c      	ldr	r2, [pc, #48]	; (80021a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002178:	e002      	b.n	8002180 <LoopCopyDataInit>

0800217a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800217a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800217c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800217e:	3304      	adds	r3, #4

08002180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002184:	d3f9      	bcc.n	800217a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002186:	4a09      	ldr	r2, [pc, #36]	; (80021ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002188:	4c09      	ldr	r4, [pc, #36]	; (80021b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800218a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800218c:	e001      	b.n	8002192 <LoopFillZerobss>

0800218e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800218e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002190:	3204      	adds	r2, #4

08002192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002194:	d3fb      	bcc.n	800218e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002196:	f001 faf9 	bl	800378c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800219a:	f7ff fbc9 	bl	8001930 <main>
  bx lr
 800219e:	4770      	bx	lr
  ldr r0, =_sdata
 80021a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80021a8:	08003828 	.word	0x08003828
  ldr r2, =_sbss
 80021ac:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80021b0:	2000019c 	.word	0x2000019c

080021b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021b4:	e7fe      	b.n	80021b4 <ADC1_2_IRQHandler>
	...

080021b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021bc:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <HAL_Init+0x28>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a07      	ldr	r2, [pc, #28]	; (80021e0 <HAL_Init+0x28>)
 80021c2:	f043 0310 	orr.w	r3, r3, #16
 80021c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c8:	2003      	movs	r0, #3
 80021ca:	f000 f923 	bl	8002414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ce:	200f      	movs	r0, #15
 80021d0:	f000 f808 	bl	80021e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d4:	f7ff ff3c 	bl	8002050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40022000 	.word	0x40022000

080021e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021ec:	4b12      	ldr	r3, [pc, #72]	; (8002238 <HAL_InitTick+0x54>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <HAL_InitTick+0x58>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	4619      	mov	r1, r3
 80021f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80021fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f93b 	bl	800247e <HAL_SYSTICK_Config>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e00e      	b.n	8002230 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b0f      	cmp	r3, #15
 8002216:	d80a      	bhi.n	800222e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002218:	2200      	movs	r2, #0
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	f04f 30ff 	mov.w	r0, #4294967295
 8002220:	f000 f903 	bl	800242a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002224:	4a06      	ldr	r2, [pc, #24]	; (8002240 <HAL_InitTick+0x5c>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	e000      	b.n	8002230 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
}
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000060 	.word	0x20000060
 800223c:	20000068 	.word	0x20000068
 8002240:	20000064 	.word	0x20000064

08002244 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <HAL_IncTick+0x1c>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	4b05      	ldr	r3, [pc, #20]	; (8002264 <HAL_IncTick+0x20>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4413      	add	r3, r2
 8002254:	4a03      	ldr	r2, [pc, #12]	; (8002264 <HAL_IncTick+0x20>)
 8002256:	6013      	str	r3, [r2, #0]
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr
 8002260:	20000068 	.word	0x20000068
 8002264:	20000198 	.word	0x20000198

08002268 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return uwTick;
 800226c:	4b02      	ldr	r3, [pc, #8]	; (8002278 <HAL_GetTick+0x10>)
 800226e:	681b      	ldr	r3, [r3, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	20000198 	.word	0x20000198

0800227c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800228c:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002298:	4013      	ands	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ae:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	60d3      	str	r3, [r2, #12]
}
 80022b4:	bf00      	nop
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c8:	4b04      	ldr	r3, [pc, #16]	; (80022dc <__NVIC_GetPriorityGrouping+0x18>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	0a1b      	lsrs	r3, r3, #8
 80022ce:	f003 0307 	and.w	r3, r3, #7
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	db0b      	blt.n	800230a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	f003 021f 	and.w	r2, r3, #31
 80022f8:	4906      	ldr	r1, [pc, #24]	; (8002314 <__NVIC_EnableIRQ+0x34>)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	2001      	movs	r0, #1
 8002302:	fa00 f202 	lsl.w	r2, r0, r2
 8002306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr
 8002314:	e000e100 	.word	0xe000e100

08002318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	6039      	str	r1, [r7, #0]
 8002322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002328:	2b00      	cmp	r3, #0
 800232a:	db0a      	blt.n	8002342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	b2da      	uxtb	r2, r3
 8002330:	490c      	ldr	r1, [pc, #48]	; (8002364 <__NVIC_SetPriority+0x4c>)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	0112      	lsls	r2, r2, #4
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	440b      	add	r3, r1
 800233c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002340:	e00a      	b.n	8002358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4908      	ldr	r1, [pc, #32]	; (8002368 <__NVIC_SetPriority+0x50>)
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	3b04      	subs	r3, #4
 8002350:	0112      	lsls	r2, r2, #4
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	440b      	add	r3, r1
 8002356:	761a      	strb	r2, [r3, #24]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000e100 	.word	0xe000e100
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800236c:	b480      	push	{r7}
 800236e:	b089      	sub	sp, #36	; 0x24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f1c3 0307 	rsb	r3, r3, #7
 8002386:	2b04      	cmp	r3, #4
 8002388:	bf28      	it	cs
 800238a:	2304      	movcs	r3, #4
 800238c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3304      	adds	r3, #4
 8002392:	2b06      	cmp	r3, #6
 8002394:	d902      	bls.n	800239c <NVIC_EncodePriority+0x30>
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3b03      	subs	r3, #3
 800239a:	e000      	b.n	800239e <NVIC_EncodePriority+0x32>
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a0:	f04f 32ff 	mov.w	r2, #4294967295
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43da      	mvns	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	401a      	ands	r2, r3
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b4:	f04f 31ff 	mov.w	r1, #4294967295
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	fa01 f303 	lsl.w	r3, r1, r3
 80023be:	43d9      	mvns	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c4:	4313      	orrs	r3, r2
         );
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3724      	adds	r7, #36	; 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr

080023d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e0:	d301      	bcc.n	80023e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e2:	2301      	movs	r3, #1
 80023e4:	e00f      	b.n	8002406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023e6:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <SysTick_Config+0x40>)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ee:	210f      	movs	r1, #15
 80023f0:	f04f 30ff 	mov.w	r0, #4294967295
 80023f4:	f7ff ff90 	bl	8002318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <SysTick_Config+0x40>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023fe:	4b04      	ldr	r3, [pc, #16]	; (8002410 <SysTick_Config+0x40>)
 8002400:	2207      	movs	r2, #7
 8002402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	e000e010 	.word	0xe000e010

08002414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ff2d 	bl	800227c <__NVIC_SetPriorityGrouping>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800243c:	f7ff ff42 	bl	80022c4 <__NVIC_GetPriorityGrouping>
 8002440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	6978      	ldr	r0, [r7, #20]
 8002448:	f7ff ff90 	bl	800236c <NVIC_EncodePriority>
 800244c:	4602      	mov	r2, r0
 800244e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff5f 	bl	8002318 <__NVIC_SetPriority>
}
 800245a:	bf00      	nop
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	4603      	mov	r3, r0
 800246a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800246c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff35 	bl	80022e0 <__NVIC_EnableIRQ>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff ffa2 	bl	80023d0 <SysTick_Config>
 800248c:	4603      	mov	r3, r0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002498:	b480      	push	{r7}
 800249a:	b08b      	sub	sp, #44	; 0x2c
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024a2:	2300      	movs	r3, #0
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024a6:	2300      	movs	r3, #0
 80024a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024aa:	e148      	b.n	800273e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024ac:	2201      	movs	r2, #1
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	69fa      	ldr	r2, [r7, #28]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	f040 8137 	bne.w	8002738 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4aa3      	ldr	r2, [pc, #652]	; (800275c <HAL_GPIO_Init+0x2c4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d05e      	beq.n	8002592 <HAL_GPIO_Init+0xfa>
 80024d4:	4aa1      	ldr	r2, [pc, #644]	; (800275c <HAL_GPIO_Init+0x2c4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d875      	bhi.n	80025c6 <HAL_GPIO_Init+0x12e>
 80024da:	4aa1      	ldr	r2, [pc, #644]	; (8002760 <HAL_GPIO_Init+0x2c8>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d058      	beq.n	8002592 <HAL_GPIO_Init+0xfa>
 80024e0:	4a9f      	ldr	r2, [pc, #636]	; (8002760 <HAL_GPIO_Init+0x2c8>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d86f      	bhi.n	80025c6 <HAL_GPIO_Init+0x12e>
 80024e6:	4a9f      	ldr	r2, [pc, #636]	; (8002764 <HAL_GPIO_Init+0x2cc>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d052      	beq.n	8002592 <HAL_GPIO_Init+0xfa>
 80024ec:	4a9d      	ldr	r2, [pc, #628]	; (8002764 <HAL_GPIO_Init+0x2cc>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d869      	bhi.n	80025c6 <HAL_GPIO_Init+0x12e>
 80024f2:	4a9d      	ldr	r2, [pc, #628]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d04c      	beq.n	8002592 <HAL_GPIO_Init+0xfa>
 80024f8:	4a9b      	ldr	r2, [pc, #620]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d863      	bhi.n	80025c6 <HAL_GPIO_Init+0x12e>
 80024fe:	4a9b      	ldr	r2, [pc, #620]	; (800276c <HAL_GPIO_Init+0x2d4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d046      	beq.n	8002592 <HAL_GPIO_Init+0xfa>
 8002504:	4a99      	ldr	r2, [pc, #612]	; (800276c <HAL_GPIO_Init+0x2d4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d85d      	bhi.n	80025c6 <HAL_GPIO_Init+0x12e>
 800250a:	2b12      	cmp	r3, #18
 800250c:	d82a      	bhi.n	8002564 <HAL_GPIO_Init+0xcc>
 800250e:	2b12      	cmp	r3, #18
 8002510:	d859      	bhi.n	80025c6 <HAL_GPIO_Init+0x12e>
 8002512:	a201      	add	r2, pc, #4	; (adr r2, 8002518 <HAL_GPIO_Init+0x80>)
 8002514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002518:	08002593 	.word	0x08002593
 800251c:	0800256d 	.word	0x0800256d
 8002520:	0800257f 	.word	0x0800257f
 8002524:	080025c1 	.word	0x080025c1
 8002528:	080025c7 	.word	0x080025c7
 800252c:	080025c7 	.word	0x080025c7
 8002530:	080025c7 	.word	0x080025c7
 8002534:	080025c7 	.word	0x080025c7
 8002538:	080025c7 	.word	0x080025c7
 800253c:	080025c7 	.word	0x080025c7
 8002540:	080025c7 	.word	0x080025c7
 8002544:	080025c7 	.word	0x080025c7
 8002548:	080025c7 	.word	0x080025c7
 800254c:	080025c7 	.word	0x080025c7
 8002550:	080025c7 	.word	0x080025c7
 8002554:	080025c7 	.word	0x080025c7
 8002558:	080025c7 	.word	0x080025c7
 800255c:	08002575 	.word	0x08002575
 8002560:	08002589 	.word	0x08002589
 8002564:	4a82      	ldr	r2, [pc, #520]	; (8002770 <HAL_GPIO_Init+0x2d8>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800256a:	e02c      	b.n	80025c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	623b      	str	r3, [r7, #32]
          break;
 8002572:	e029      	b.n	80025c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	3304      	adds	r3, #4
 800257a:	623b      	str	r3, [r7, #32]
          break;
 800257c:	e024      	b.n	80025c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	3308      	adds	r3, #8
 8002584:	623b      	str	r3, [r7, #32]
          break;
 8002586:	e01f      	b.n	80025c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	330c      	adds	r3, #12
 800258e:	623b      	str	r3, [r7, #32]
          break;
 8002590:	e01a      	b.n	80025c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d102      	bne.n	80025a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800259a:	2304      	movs	r3, #4
 800259c:	623b      	str	r3, [r7, #32]
          break;
 800259e:	e013      	b.n	80025c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d105      	bne.n	80025b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025a8:	2308      	movs	r3, #8
 80025aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69fa      	ldr	r2, [r7, #28]
 80025b0:	611a      	str	r2, [r3, #16]
          break;
 80025b2:	e009      	b.n	80025c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025b4:	2308      	movs	r3, #8
 80025b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	615a      	str	r2, [r3, #20]
          break;
 80025be:	e003      	b.n	80025c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025c0:	2300      	movs	r3, #0
 80025c2:	623b      	str	r3, [r7, #32]
          break;
 80025c4:	e000      	b.n	80025c8 <HAL_GPIO_Init+0x130>
          break;
 80025c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	2bff      	cmp	r3, #255	; 0xff
 80025cc:	d801      	bhi.n	80025d2 <HAL_GPIO_Init+0x13a>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	e001      	b.n	80025d6 <HAL_GPIO_Init+0x13e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3304      	adds	r3, #4
 80025d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	2bff      	cmp	r3, #255	; 0xff
 80025dc:	d802      	bhi.n	80025e4 <HAL_GPIO_Init+0x14c>
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	e002      	b.n	80025ea <HAL_GPIO_Init+0x152>
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	3b08      	subs	r3, #8
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	210f      	movs	r1, #15
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	fa01 f303 	lsl.w	r3, r1, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	401a      	ands	r2, r3
 80025fc:	6a39      	ldr	r1, [r7, #32]
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	fa01 f303 	lsl.w	r3, r1, r3
 8002604:	431a      	orrs	r2, r3
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 8090 	beq.w	8002738 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002618:	4b56      	ldr	r3, [pc, #344]	; (8002774 <HAL_GPIO_Init+0x2dc>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	4a55      	ldr	r2, [pc, #340]	; (8002774 <HAL_GPIO_Init+0x2dc>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6193      	str	r3, [r2, #24]
 8002624:	4b53      	ldr	r3, [pc, #332]	; (8002774 <HAL_GPIO_Init+0x2dc>)
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002630:	4a51      	ldr	r2, [pc, #324]	; (8002778 <HAL_GPIO_Init+0x2e0>)
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	089b      	lsrs	r3, r3, #2
 8002636:	3302      	adds	r3, #2
 8002638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	220f      	movs	r2, #15
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4013      	ands	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a49      	ldr	r2, [pc, #292]	; (800277c <HAL_GPIO_Init+0x2e4>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d00d      	beq.n	8002678 <HAL_GPIO_Init+0x1e0>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a48      	ldr	r2, [pc, #288]	; (8002780 <HAL_GPIO_Init+0x2e8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d007      	beq.n	8002674 <HAL_GPIO_Init+0x1dc>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a47      	ldr	r2, [pc, #284]	; (8002784 <HAL_GPIO_Init+0x2ec>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d101      	bne.n	8002670 <HAL_GPIO_Init+0x1d8>
 800266c:	2302      	movs	r3, #2
 800266e:	e004      	b.n	800267a <HAL_GPIO_Init+0x1e2>
 8002670:	2303      	movs	r3, #3
 8002672:	e002      	b.n	800267a <HAL_GPIO_Init+0x1e2>
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <HAL_GPIO_Init+0x1e2>
 8002678:	2300      	movs	r3, #0
 800267a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800267c:	f002 0203 	and.w	r2, r2, #3
 8002680:	0092      	lsls	r2, r2, #2
 8002682:	4093      	lsls	r3, r2
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800268a:	493b      	ldr	r1, [pc, #236]	; (8002778 <HAL_GPIO_Init+0x2e0>)
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	3302      	adds	r3, #2
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d006      	beq.n	80026b2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026a4:	4b38      	ldr	r3, [pc, #224]	; (8002788 <HAL_GPIO_Init+0x2f0>)
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	4937      	ldr	r1, [pc, #220]	; (8002788 <HAL_GPIO_Init+0x2f0>)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	608b      	str	r3, [r1, #8]
 80026b0:	e006      	b.n	80026c0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026b2:	4b35      	ldr	r3, [pc, #212]	; (8002788 <HAL_GPIO_Init+0x2f0>)
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	4933      	ldr	r1, [pc, #204]	; (8002788 <HAL_GPIO_Init+0x2f0>)
 80026bc:	4013      	ands	r3, r2
 80026be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d006      	beq.n	80026da <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026cc:	4b2e      	ldr	r3, [pc, #184]	; (8002788 <HAL_GPIO_Init+0x2f0>)
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	492d      	ldr	r1, [pc, #180]	; (8002788 <HAL_GPIO_Init+0x2f0>)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	60cb      	str	r3, [r1, #12]
 80026d8:	e006      	b.n	80026e8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026da:	4b2b      	ldr	r3, [pc, #172]	; (8002788 <HAL_GPIO_Init+0x2f0>)
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	43db      	mvns	r3, r3
 80026e2:	4929      	ldr	r1, [pc, #164]	; (8002788 <HAL_GPIO_Init+0x2f0>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d006      	beq.n	8002702 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026f4:	4b24      	ldr	r3, [pc, #144]	; (8002788 <HAL_GPIO_Init+0x2f0>)
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	4923      	ldr	r1, [pc, #140]	; (8002788 <HAL_GPIO_Init+0x2f0>)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	604b      	str	r3, [r1, #4]
 8002700:	e006      	b.n	8002710 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002702:	4b21      	ldr	r3, [pc, #132]	; (8002788 <HAL_GPIO_Init+0x2f0>)
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	43db      	mvns	r3, r3
 800270a:	491f      	ldr	r1, [pc, #124]	; (8002788 <HAL_GPIO_Init+0x2f0>)
 800270c:	4013      	ands	r3, r2
 800270e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d006      	beq.n	800272a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800271c:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <HAL_GPIO_Init+0x2f0>)
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4919      	ldr	r1, [pc, #100]	; (8002788 <HAL_GPIO_Init+0x2f0>)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	4313      	orrs	r3, r2
 8002726:	600b      	str	r3, [r1, #0]
 8002728:	e006      	b.n	8002738 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800272a:	4b17      	ldr	r3, [pc, #92]	; (8002788 <HAL_GPIO_Init+0x2f0>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	43db      	mvns	r3, r3
 8002732:	4915      	ldr	r1, [pc, #84]	; (8002788 <HAL_GPIO_Init+0x2f0>)
 8002734:	4013      	ands	r3, r2
 8002736:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	3301      	adds	r3, #1
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	fa22 f303 	lsr.w	r3, r2, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	f47f aeaf 	bne.w	80024ac <HAL_GPIO_Init+0x14>
  }
}
 800274e:	bf00      	nop
 8002750:	bf00      	nop
 8002752:	372c      	adds	r7, #44	; 0x2c
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	10320000 	.word	0x10320000
 8002760:	10310000 	.word	0x10310000
 8002764:	10220000 	.word	0x10220000
 8002768:	10210000 	.word	0x10210000
 800276c:	10120000 	.word	0x10120000
 8002770:	10110000 	.word	0x10110000
 8002774:	40021000 	.word	0x40021000
 8002778:	40010000 	.word	0x40010000
 800277c:	40010800 	.word	0x40010800
 8002780:	40010c00 	.word	0x40010c00
 8002784:	40011000 	.word	0x40011000
 8002788:	40010400 	.word	0x40010400

0800278c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	887b      	ldrh	r3, [r7, #2]
 800279e:	4013      	ands	r3, r2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027a4:	2301      	movs	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
 80027a8:	e001      	b.n	80027ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027aa:	2300      	movs	r3, #0
 80027ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr

080027ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	460b      	mov	r3, r1
 80027c4:	807b      	strh	r3, [r7, #2]
 80027c6:	4613      	mov	r3, r2
 80027c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027ca:	787b      	ldrb	r3, [r7, #1]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027d0:	887a      	ldrh	r2, [r7, #2]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027d6:	e003      	b.n	80027e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027d8:	887b      	ldrh	r3, [r7, #2]
 80027da:	041a      	lsls	r2, r3, #16
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	611a      	str	r2, [r3, #16]
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr

080027ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b085      	sub	sp, #20
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	460b      	mov	r3, r1
 80027f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027fc:	887a      	ldrh	r2, [r7, #2]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4013      	ands	r3, r2
 8002802:	041a      	lsls	r2, r3, #16
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	43d9      	mvns	r1, r3
 8002808:	887b      	ldrh	r3, [r7, #2]
 800280a:	400b      	ands	r3, r1
 800280c:	431a      	orrs	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	611a      	str	r2, [r3, #16]
}
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e26c      	b.n	8002d08 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 8087 	beq.w	800294a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800283c:	4b92      	ldr	r3, [pc, #584]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 030c 	and.w	r3, r3, #12
 8002844:	2b04      	cmp	r3, #4
 8002846:	d00c      	beq.n	8002862 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002848:	4b8f      	ldr	r3, [pc, #572]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 030c 	and.w	r3, r3, #12
 8002850:	2b08      	cmp	r3, #8
 8002852:	d112      	bne.n	800287a <HAL_RCC_OscConfig+0x5e>
 8002854:	4b8c      	ldr	r3, [pc, #560]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002860:	d10b      	bne.n	800287a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002862:	4b89      	ldr	r3, [pc, #548]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d06c      	beq.n	8002948 <HAL_RCC_OscConfig+0x12c>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d168      	bne.n	8002948 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e246      	b.n	8002d08 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002882:	d106      	bne.n	8002892 <HAL_RCC_OscConfig+0x76>
 8002884:	4b80      	ldr	r3, [pc, #512]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a7f      	ldr	r2, [pc, #508]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 800288a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	e02e      	b.n	80028f0 <HAL_RCC_OscConfig+0xd4>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10c      	bne.n	80028b4 <HAL_RCC_OscConfig+0x98>
 800289a:	4b7b      	ldr	r3, [pc, #492]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a7a      	ldr	r2, [pc, #488]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80028a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	4b78      	ldr	r3, [pc, #480]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a77      	ldr	r2, [pc, #476]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	e01d      	b.n	80028f0 <HAL_RCC_OscConfig+0xd4>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028bc:	d10c      	bne.n	80028d8 <HAL_RCC_OscConfig+0xbc>
 80028be:	4b72      	ldr	r3, [pc, #456]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a71      	ldr	r2, [pc, #452]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	4b6f      	ldr	r3, [pc, #444]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a6e      	ldr	r2, [pc, #440]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80028d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	e00b      	b.n	80028f0 <HAL_RCC_OscConfig+0xd4>
 80028d8:	4b6b      	ldr	r3, [pc, #428]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a6a      	ldr	r2, [pc, #424]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80028de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e2:	6013      	str	r3, [r2, #0]
 80028e4:	4b68      	ldr	r3, [pc, #416]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a67      	ldr	r2, [pc, #412]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80028ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d013      	beq.n	8002920 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f8:	f7ff fcb6 	bl	8002268 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002900:	f7ff fcb2 	bl	8002268 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b64      	cmp	r3, #100	; 0x64
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e1fa      	b.n	8002d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002912:	4b5d      	ldr	r3, [pc, #372]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0xe4>
 800291e:	e014      	b.n	800294a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002920:	f7ff fca2 	bl	8002268 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002928:	f7ff fc9e 	bl	8002268 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b64      	cmp	r3, #100	; 0x64
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e1e6      	b.n	8002d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800293a:	4b53      	ldr	r3, [pc, #332]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x10c>
 8002946:	e000      	b.n	800294a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d063      	beq.n	8002a1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002956:	4b4c      	ldr	r3, [pc, #304]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f003 030c 	and.w	r3, r3, #12
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00b      	beq.n	800297a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002962:	4b49      	ldr	r3, [pc, #292]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b08      	cmp	r3, #8
 800296c:	d11c      	bne.n	80029a8 <HAL_RCC_OscConfig+0x18c>
 800296e:	4b46      	ldr	r3, [pc, #280]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d116      	bne.n	80029a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800297a:	4b43      	ldr	r3, [pc, #268]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d005      	beq.n	8002992 <HAL_RCC_OscConfig+0x176>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d001      	beq.n	8002992 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e1ba      	b.n	8002d08 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002992:	4b3d      	ldr	r3, [pc, #244]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4939      	ldr	r1, [pc, #228]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a6:	e03a      	b.n	8002a1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d020      	beq.n	80029f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b0:	4b36      	ldr	r3, [pc, #216]	; (8002a8c <HAL_RCC_OscConfig+0x270>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b6:	f7ff fc57 	bl	8002268 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029be:	f7ff fc53 	bl	8002268 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e19b      	b.n	8002d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d0:	4b2d      	ldr	r3, [pc, #180]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029dc:	4b2a      	ldr	r3, [pc, #168]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4927      	ldr	r1, [pc, #156]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	600b      	str	r3, [r1, #0]
 80029f0:	e015      	b.n	8002a1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029f2:	4b26      	ldr	r3, [pc, #152]	; (8002a8c <HAL_RCC_OscConfig+0x270>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f8:	f7ff fc36 	bl	8002268 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a00:	f7ff fc32 	bl	8002268 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e17a      	b.n	8002d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a12:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d03a      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d019      	beq.n	8002a66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a32:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <HAL_RCC_OscConfig+0x274>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a38:	f7ff fc16 	bl	8002268 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a40:	f7ff fc12 	bl	8002268 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e15a      	b.n	8002d08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a52:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a5e:	2001      	movs	r0, #1
 8002a60:	f000 fa9a 	bl	8002f98 <RCC_Delay>
 8002a64:	e01c      	b.n	8002aa0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a66:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <HAL_RCC_OscConfig+0x274>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6c:	f7ff fbfc 	bl	8002268 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a72:	e00f      	b.n	8002a94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a74:	f7ff fbf8 	bl	8002268 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d908      	bls.n	8002a94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e140      	b.n	8002d08 <HAL_RCC_OscConfig+0x4ec>
 8002a86:	bf00      	nop
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	42420000 	.word	0x42420000
 8002a90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a94:	4b9e      	ldr	r3, [pc, #632]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1e9      	bne.n	8002a74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80a6 	beq.w	8002bfa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab2:	4b97      	ldr	r3, [pc, #604]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10d      	bne.n	8002ada <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002abe:	4b94      	ldr	r3, [pc, #592]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	4a93      	ldr	r2, [pc, #588]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac8:	61d3      	str	r3, [r2, #28]
 8002aca:	4b91      	ldr	r3, [pc, #580]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ada:	4b8e      	ldr	r3, [pc, #568]	; (8002d14 <HAL_RCC_OscConfig+0x4f8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d118      	bne.n	8002b18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae6:	4b8b      	ldr	r3, [pc, #556]	; (8002d14 <HAL_RCC_OscConfig+0x4f8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a8a      	ldr	r2, [pc, #552]	; (8002d14 <HAL_RCC_OscConfig+0x4f8>)
 8002aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af2:	f7ff fbb9 	bl	8002268 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afa:	f7ff fbb5 	bl	8002268 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b64      	cmp	r3, #100	; 0x64
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e0fd      	b.n	8002d08 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0c:	4b81      	ldr	r3, [pc, #516]	; (8002d14 <HAL_RCC_OscConfig+0x4f8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0f0      	beq.n	8002afa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d106      	bne.n	8002b2e <HAL_RCC_OscConfig+0x312>
 8002b20:	4b7b      	ldr	r3, [pc, #492]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	4a7a      	ldr	r2, [pc, #488]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	6213      	str	r3, [r2, #32]
 8002b2c:	e02d      	b.n	8002b8a <HAL_RCC_OscConfig+0x36e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10c      	bne.n	8002b50 <HAL_RCC_OscConfig+0x334>
 8002b36:	4b76      	ldr	r3, [pc, #472]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	4a75      	ldr	r2, [pc, #468]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002b3c:	f023 0301 	bic.w	r3, r3, #1
 8002b40:	6213      	str	r3, [r2, #32]
 8002b42:	4b73      	ldr	r3, [pc, #460]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	4a72      	ldr	r2, [pc, #456]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002b48:	f023 0304 	bic.w	r3, r3, #4
 8002b4c:	6213      	str	r3, [r2, #32]
 8002b4e:	e01c      	b.n	8002b8a <HAL_RCC_OscConfig+0x36e>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	2b05      	cmp	r3, #5
 8002b56:	d10c      	bne.n	8002b72 <HAL_RCC_OscConfig+0x356>
 8002b58:	4b6d      	ldr	r3, [pc, #436]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	4a6c      	ldr	r2, [pc, #432]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002b5e:	f043 0304 	orr.w	r3, r3, #4
 8002b62:	6213      	str	r3, [r2, #32]
 8002b64:	4b6a      	ldr	r3, [pc, #424]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	4a69      	ldr	r2, [pc, #420]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	6213      	str	r3, [r2, #32]
 8002b70:	e00b      	b.n	8002b8a <HAL_RCC_OscConfig+0x36e>
 8002b72:	4b67      	ldr	r3, [pc, #412]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	4a66      	ldr	r2, [pc, #408]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002b78:	f023 0301 	bic.w	r3, r3, #1
 8002b7c:	6213      	str	r3, [r2, #32]
 8002b7e:	4b64      	ldr	r3, [pc, #400]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	4a63      	ldr	r2, [pc, #396]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002b84:	f023 0304 	bic.w	r3, r3, #4
 8002b88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d015      	beq.n	8002bbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b92:	f7ff fb69 	bl	8002268 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b98:	e00a      	b.n	8002bb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9a:	f7ff fb65 	bl	8002268 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e0ab      	b.n	8002d08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb0:	4b57      	ldr	r3, [pc, #348]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0ee      	beq.n	8002b9a <HAL_RCC_OscConfig+0x37e>
 8002bbc:	e014      	b.n	8002be8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bbe:	f7ff fb53 	bl	8002268 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc4:	e00a      	b.n	8002bdc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc6:	f7ff fb4f 	bl	8002268 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e095      	b.n	8002d08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bdc:	4b4c      	ldr	r3, [pc, #304]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1ee      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002be8:	7dfb      	ldrb	r3, [r7, #23]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d105      	bne.n	8002bfa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bee:	4b48      	ldr	r3, [pc, #288]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	4a47      	ldr	r2, [pc, #284]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 8081 	beq.w	8002d06 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c04:	4b42      	ldr	r3, [pc, #264]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 030c 	and.w	r3, r3, #12
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d061      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d146      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c18:	4b3f      	ldr	r3, [pc, #252]	; (8002d18 <HAL_RCC_OscConfig+0x4fc>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1e:	f7ff fb23 	bl	8002268 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c26:	f7ff fb1f 	bl	8002268 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e067      	b.n	8002d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c38:	4b35      	ldr	r3, [pc, #212]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1f0      	bne.n	8002c26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c4c:	d108      	bne.n	8002c60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c4e:	4b30      	ldr	r3, [pc, #192]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	492d      	ldr	r1, [pc, #180]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c60:	4b2b      	ldr	r3, [pc, #172]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a19      	ldr	r1, [r3, #32]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	430b      	orrs	r3, r1
 8002c72:	4927      	ldr	r1, [pc, #156]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c78:	4b27      	ldr	r3, [pc, #156]	; (8002d18 <HAL_RCC_OscConfig+0x4fc>)
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7e:	f7ff faf3 	bl	8002268 <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c86:	f7ff faef 	bl	8002268 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e037      	b.n	8002d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c98:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0f0      	beq.n	8002c86 <HAL_RCC_OscConfig+0x46a>
 8002ca4:	e02f      	b.n	8002d06 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca6:	4b1c      	ldr	r3, [pc, #112]	; (8002d18 <HAL_RCC_OscConfig+0x4fc>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cac:	f7ff fadc 	bl	8002268 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb4:	f7ff fad8 	bl	8002268 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e020      	b.n	8002d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cc6:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f0      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x498>
 8002cd2:	e018      	b.n	8002d06 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e013      	b.n	8002d08 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <HAL_RCC_OscConfig+0x4f4>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d106      	bne.n	8002d02 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d001      	beq.n	8002d06 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40021000 	.word	0x40021000
 8002d14:	40007000 	.word	0x40007000
 8002d18:	42420060 	.word	0x42420060

08002d1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0d0      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d30:	4b6a      	ldr	r3, [pc, #424]	; (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d910      	bls.n	8002d60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b67      	ldr	r3, [pc, #412]	; (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 0207 	bic.w	r2, r3, #7
 8002d46:	4965      	ldr	r1, [pc, #404]	; (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4e:	4b63      	ldr	r3, [pc, #396]	; (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0b8      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d020      	beq.n	8002dae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d005      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d78:	4b59      	ldr	r3, [pc, #356]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	4a58      	ldr	r2, [pc, #352]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d90:	4b53      	ldr	r3, [pc, #332]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4a52      	ldr	r2, [pc, #328]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d9c:	4b50      	ldr	r3, [pc, #320]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	494d      	ldr	r1, [pc, #308]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d040      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d107      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc2:	4b47      	ldr	r3, [pc, #284]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d115      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e07f      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d107      	bne.n	8002dea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dda:	4b41      	ldr	r3, [pc, #260]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d109      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e073      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dea:	4b3d      	ldr	r3, [pc, #244]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e06b      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dfa:	4b39      	ldr	r3, [pc, #228]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f023 0203 	bic.w	r2, r3, #3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4936      	ldr	r1, [pc, #216]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e0c:	f7ff fa2c 	bl	8002268 <HAL_GetTick>
 8002e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e12:	e00a      	b.n	8002e2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e14:	f7ff fa28 	bl	8002268 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e053      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 020c 	and.w	r2, r3, #12
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d1eb      	bne.n	8002e14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e3c:	4b27      	ldr	r3, [pc, #156]	; (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d210      	bcs.n	8002e6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4a:	4b24      	ldr	r3, [pc, #144]	; (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f023 0207 	bic.w	r2, r3, #7
 8002e52:	4922      	ldr	r1, [pc, #136]	; (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5a:	4b20      	ldr	r3, [pc, #128]	; (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e032      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e78:	4b19      	ldr	r3, [pc, #100]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	4916      	ldr	r1, [pc, #88]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d009      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e96:	4b12      	ldr	r3, [pc, #72]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	490e      	ldr	r1, [pc, #56]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eaa:	f000 f821 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	490a      	ldr	r1, [pc, #40]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ebc:	5ccb      	ldrb	r3, [r1, r3]
 8002ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec2:	4a09      	ldr	r2, [pc, #36]	; (8002ee8 <HAL_RCC_ClockConfig+0x1cc>)
 8002ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ec6:	4b09      	ldr	r3, [pc, #36]	; (8002eec <HAL_RCC_ClockConfig+0x1d0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff f98a 	bl	80021e4 <HAL_InitTick>

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40022000 	.word	0x40022000
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	080037fc 	.word	0x080037fc
 8002ee8:	20000060 	.word	0x20000060
 8002eec:	20000064 	.word	0x20000064

08002ef0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	2300      	movs	r3, #0
 8002f04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f0a:	4b1e      	ldr	r3, [pc, #120]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d002      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x30>
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d003      	beq.n	8002f26 <HAL_RCC_GetSysClockFreq+0x36>
 8002f1e:	e027      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f20:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f22:	613b      	str	r3, [r7, #16]
      break;
 8002f24:	e027      	b.n	8002f76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	0c9b      	lsrs	r3, r3, #18
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	4a17      	ldr	r2, [pc, #92]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f30:	5cd3      	ldrb	r3, [r2, r3]
 8002f32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d010      	beq.n	8002f60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f3e:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	0c5b      	lsrs	r3, r3, #17
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	4a11      	ldr	r2, [pc, #68]	; (8002f90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f4a:	5cd3      	ldrb	r3, [r2, r3]
 8002f4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a0d      	ldr	r2, [pc, #52]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f52:	fb02 f203 	mul.w	r2, r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5c:	617b      	str	r3, [r7, #20]
 8002f5e:	e004      	b.n	8002f6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a0c      	ldr	r2, [pc, #48]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f64:	fb02 f303 	mul.w	r3, r2, r3
 8002f68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	613b      	str	r3, [r7, #16]
      break;
 8002f6e:	e002      	b.n	8002f76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f70:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f72:	613b      	str	r3, [r7, #16]
      break;
 8002f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f76:	693b      	ldr	r3, [r7, #16]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	371c      	adds	r7, #28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
 8002f88:	007a1200 	.word	0x007a1200
 8002f8c:	0800380c 	.word	0x0800380c
 8002f90:	0800381c 	.word	0x0800381c
 8002f94:	003d0900 	.word	0x003d0900

08002f98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fa0:	4b0a      	ldr	r3, [pc, #40]	; (8002fcc <RCC_Delay+0x34>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <RCC_Delay+0x38>)
 8002fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002faa:	0a5b      	lsrs	r3, r3, #9
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	fb02 f303 	mul.w	r3, r2, r3
 8002fb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fb4:	bf00      	nop
  }
  while (Delay --);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	1e5a      	subs	r2, r3, #1
 8002fba:	60fa      	str	r2, [r7, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1f9      	bne.n	8002fb4 <RCC_Delay+0x1c>
}
 8002fc0:	bf00      	nop
 8002fc2:	bf00      	nop
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr
 8002fcc:	20000060 	.word	0x20000060
 8002fd0:	10624dd3 	.word	0x10624dd3

08002fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e041      	b.n	800306a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff f85a 	bl	80020b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3304      	adds	r3, #4
 8003010:	4619      	mov	r1, r3
 8003012:	4610      	mov	r0, r2
 8003014:	f000 fa56 	bl	80034c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b01      	cmp	r3, #1
 8003086:	d001      	beq.n	800308c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e035      	b.n	80030f8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0201 	orr.w	r2, r2, #1
 80030a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a16      	ldr	r2, [pc, #88]	; (8003104 <HAL_TIM_Base_Start_IT+0x90>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d009      	beq.n	80030c2 <HAL_TIM_Base_Start_IT+0x4e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b6:	d004      	beq.n	80030c2 <HAL_TIM_Base_Start_IT+0x4e>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a12      	ldr	r2, [pc, #72]	; (8003108 <HAL_TIM_Base_Start_IT+0x94>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d111      	bne.n	80030e6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2b06      	cmp	r3, #6
 80030d2:	d010      	beq.n	80030f6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e4:	e007      	b.n	80030f6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f042 0201 	orr.w	r2, r2, #1
 80030f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40012c00 	.word	0x40012c00
 8003108:	40000400 	.word	0x40000400

0800310c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d020      	beq.n	8003170 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01b      	beq.n	8003170 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0202 	mvn.w	r2, #2
 8003140:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f998 	bl	800348c <HAL_TIM_IC_CaptureCallback>
 800315c:	e005      	b.n	800316a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f98b 	bl	800347a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f99a 	bl	800349e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	2b00      	cmp	r3, #0
 8003178:	d020      	beq.n	80031bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b00      	cmp	r3, #0
 8003182:	d01b      	beq.n	80031bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0204 	mvn.w	r2, #4
 800318c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2202      	movs	r2, #2
 8003192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f972 	bl	800348c <HAL_TIM_IC_CaptureCallback>
 80031a8:	e005      	b.n	80031b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f965 	bl	800347a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f974 	bl	800349e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d020      	beq.n	8003208 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d01b      	beq.n	8003208 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0208 	mvn.w	r2, #8
 80031d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2204      	movs	r2, #4
 80031de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f94c 	bl	800348c <HAL_TIM_IC_CaptureCallback>
 80031f4:	e005      	b.n	8003202 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f93f 	bl	800347a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f94e 	bl	800349e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	2b00      	cmp	r3, #0
 8003210:	d020      	beq.n	8003254 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f003 0310 	and.w	r3, r3, #16
 8003218:	2b00      	cmp	r3, #0
 800321a:	d01b      	beq.n	8003254 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f06f 0210 	mvn.w	r2, #16
 8003224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2208      	movs	r2, #8
 800322a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f926 	bl	800348c <HAL_TIM_IC_CaptureCallback>
 8003240:	e005      	b.n	800324e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f919 	bl	800347a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f928 	bl	800349e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00c      	beq.n	8003278 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d007      	beq.n	8003278 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0201 	mvn.w	r2, #1
 8003270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fe fc7a 	bl	8001b6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00c      	beq.n	800329c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003288:	2b00      	cmp	r3, #0
 800328a:	d007      	beq.n	800329c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fa6f 	bl	800377a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00c      	beq.n	80032c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d007      	beq.n	80032c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f8f8 	bl	80034b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f003 0320 	and.w	r3, r3, #32
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00c      	beq.n	80032e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d007      	beq.n	80032e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f06f 0220 	mvn.w	r2, #32
 80032dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fa42 	bl	8003768 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032e4:	bf00      	nop
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_TIM_ConfigClockSource+0x1c>
 8003304:	2302      	movs	r3, #2
 8003306:	e0b4      	b.n	8003472 <HAL_TIM_ConfigClockSource+0x186>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800332e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003340:	d03e      	beq.n	80033c0 <HAL_TIM_ConfigClockSource+0xd4>
 8003342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003346:	f200 8087 	bhi.w	8003458 <HAL_TIM_ConfigClockSource+0x16c>
 800334a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800334e:	f000 8086 	beq.w	800345e <HAL_TIM_ConfigClockSource+0x172>
 8003352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003356:	d87f      	bhi.n	8003458 <HAL_TIM_ConfigClockSource+0x16c>
 8003358:	2b70      	cmp	r3, #112	; 0x70
 800335a:	d01a      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0xa6>
 800335c:	2b70      	cmp	r3, #112	; 0x70
 800335e:	d87b      	bhi.n	8003458 <HAL_TIM_ConfigClockSource+0x16c>
 8003360:	2b60      	cmp	r3, #96	; 0x60
 8003362:	d050      	beq.n	8003406 <HAL_TIM_ConfigClockSource+0x11a>
 8003364:	2b60      	cmp	r3, #96	; 0x60
 8003366:	d877      	bhi.n	8003458 <HAL_TIM_ConfigClockSource+0x16c>
 8003368:	2b50      	cmp	r3, #80	; 0x50
 800336a:	d03c      	beq.n	80033e6 <HAL_TIM_ConfigClockSource+0xfa>
 800336c:	2b50      	cmp	r3, #80	; 0x50
 800336e:	d873      	bhi.n	8003458 <HAL_TIM_ConfigClockSource+0x16c>
 8003370:	2b40      	cmp	r3, #64	; 0x40
 8003372:	d058      	beq.n	8003426 <HAL_TIM_ConfigClockSource+0x13a>
 8003374:	2b40      	cmp	r3, #64	; 0x40
 8003376:	d86f      	bhi.n	8003458 <HAL_TIM_ConfigClockSource+0x16c>
 8003378:	2b30      	cmp	r3, #48	; 0x30
 800337a:	d064      	beq.n	8003446 <HAL_TIM_ConfigClockSource+0x15a>
 800337c:	2b30      	cmp	r3, #48	; 0x30
 800337e:	d86b      	bhi.n	8003458 <HAL_TIM_ConfigClockSource+0x16c>
 8003380:	2b20      	cmp	r3, #32
 8003382:	d060      	beq.n	8003446 <HAL_TIM_ConfigClockSource+0x15a>
 8003384:	2b20      	cmp	r3, #32
 8003386:	d867      	bhi.n	8003458 <HAL_TIM_ConfigClockSource+0x16c>
 8003388:	2b00      	cmp	r3, #0
 800338a:	d05c      	beq.n	8003446 <HAL_TIM_ConfigClockSource+0x15a>
 800338c:	2b10      	cmp	r3, #16
 800338e:	d05a      	beq.n	8003446 <HAL_TIM_ConfigClockSource+0x15a>
 8003390:	e062      	b.n	8003458 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	6899      	ldr	r1, [r3, #8]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f000 f96a 	bl	800367a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	609a      	str	r2, [r3, #8]
      break;
 80033be:	e04f      	b.n	8003460 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6818      	ldr	r0, [r3, #0]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	6899      	ldr	r1, [r3, #8]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f000 f953 	bl	800367a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033e2:	609a      	str	r2, [r3, #8]
      break;
 80033e4:	e03c      	b.n	8003460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	6859      	ldr	r1, [r3, #4]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	461a      	mov	r2, r3
 80033f4:	f000 f8ca 	bl	800358c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2150      	movs	r1, #80	; 0x50
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 f921 	bl	8003646 <TIM_ITRx_SetConfig>
      break;
 8003404:	e02c      	b.n	8003460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6818      	ldr	r0, [r3, #0]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	6859      	ldr	r1, [r3, #4]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	461a      	mov	r2, r3
 8003414:	f000 f8e8 	bl	80035e8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2160      	movs	r1, #96	; 0x60
 800341e:	4618      	mov	r0, r3
 8003420:	f000 f911 	bl	8003646 <TIM_ITRx_SetConfig>
      break;
 8003424:	e01c      	b.n	8003460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	6859      	ldr	r1, [r3, #4]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	461a      	mov	r2, r3
 8003434:	f000 f8aa 	bl	800358c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2140      	movs	r1, #64	; 0x40
 800343e:	4618      	mov	r0, r3
 8003440:	f000 f901 	bl	8003646 <TIM_ITRx_SetConfig>
      break;
 8003444:	e00c      	b.n	8003460 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4619      	mov	r1, r3
 8003450:	4610      	mov	r0, r2
 8003452:	f000 f8f8 	bl	8003646 <TIM_ITRx_SetConfig>
      break;
 8003456:	e003      	b.n	8003460 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	73fb      	strb	r3, [r7, #15]
      break;
 800345c:	e000      	b.n	8003460 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800345e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003470:	7bfb      	ldrb	r3, [r7, #15]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr

0800348c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	bc80      	pop	{r7}
 800349c:	4770      	bx	lr

0800349e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr

080034b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	bc80      	pop	{r7}
 80034c0:	4770      	bx	lr
	...

080034c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a2b      	ldr	r2, [pc, #172]	; (8003584 <TIM_Base_SetConfig+0xc0>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d007      	beq.n	80034ec <TIM_Base_SetConfig+0x28>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e2:	d003      	beq.n	80034ec <TIM_Base_SetConfig+0x28>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a28      	ldr	r2, [pc, #160]	; (8003588 <TIM_Base_SetConfig+0xc4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d108      	bne.n	80034fe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a20      	ldr	r2, [pc, #128]	; (8003584 <TIM_Base_SetConfig+0xc0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d007      	beq.n	8003516 <TIM_Base_SetConfig+0x52>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800350c:	d003      	beq.n	8003516 <TIM_Base_SetConfig+0x52>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a1d      	ldr	r2, [pc, #116]	; (8003588 <TIM_Base_SetConfig+0xc4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d108      	bne.n	8003528 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800351c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4313      	orrs	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	4313      	orrs	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a0d      	ldr	r2, [pc, #52]	; (8003584 <TIM_Base_SetConfig+0xc0>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d103      	bne.n	800355c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	691a      	ldr	r2, [r3, #16]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d005      	beq.n	800357a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f023 0201 	bic.w	r2, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	611a      	str	r2, [r3, #16]
  }
}
 800357a:	bf00      	nop
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr
 8003584:	40012c00 	.word	0x40012c00
 8003588:	40000400 	.word	0x40000400

0800358c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800358c:	b480      	push	{r7}
 800358e:	b087      	sub	sp, #28
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	f023 0201 	bic.w	r2, r3, #1
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f023 030a 	bic.w	r3, r3, #10
 80035c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	621a      	str	r2, [r3, #32]
}
 80035de:	bf00      	nop
 80035e0:	371c      	adds	r7, #28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr

080035e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	f023 0210 	bic.w	r2, r3, #16
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	031b      	lsls	r3, r3, #12
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4313      	orrs	r3, r2
 800361c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003624:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	4313      	orrs	r3, r2
 800362e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	621a      	str	r2, [r3, #32]
}
 800363c:	bf00      	nop
 800363e:	371c      	adds	r7, #28
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr

08003646 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003646:	b480      	push	{r7}
 8003648:	b085      	sub	sp, #20
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4313      	orrs	r3, r2
 8003664:	f043 0307 	orr.w	r3, r3, #7
 8003668:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	609a      	str	r2, [r3, #8]
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	bc80      	pop	{r7}
 8003678:	4770      	bx	lr

0800367a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800367a:	b480      	push	{r7}
 800367c:	b087      	sub	sp, #28
 800367e:	af00      	add	r7, sp, #0
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	60b9      	str	r1, [r7, #8]
 8003684:	607a      	str	r2, [r7, #4]
 8003686:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003694:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	021a      	lsls	r2, r3, #8
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	431a      	orrs	r2, r3
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	609a      	str	r2, [r3, #8]
}
 80036ae:	bf00      	nop
 80036b0:	371c      	adds	r7, #28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr

080036b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e041      	b.n	8003754 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a14      	ldr	r2, [pc, #80]	; (8003760 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d009      	beq.n	8003728 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371c:	d004      	beq.n	8003728 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a10      	ldr	r2, [pc, #64]	; (8003764 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d10c      	bne.n	8003742 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800372e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	4313      	orrs	r3, r2
 8003738:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	bc80      	pop	{r7}
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40012c00 	.word	0x40012c00
 8003764:	40000400 	.word	0x40000400

08003768 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr

0800377a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr

0800378c <__libc_init_array>:
 800378c:	b570      	push	{r4, r5, r6, lr}
 800378e:	2600      	movs	r6, #0
 8003790:	4d0c      	ldr	r5, [pc, #48]	; (80037c4 <__libc_init_array+0x38>)
 8003792:	4c0d      	ldr	r4, [pc, #52]	; (80037c8 <__libc_init_array+0x3c>)
 8003794:	1b64      	subs	r4, r4, r5
 8003796:	10a4      	asrs	r4, r4, #2
 8003798:	42a6      	cmp	r6, r4
 800379a:	d109      	bne.n	80037b0 <__libc_init_array+0x24>
 800379c:	f000 f822 	bl	80037e4 <_init>
 80037a0:	2600      	movs	r6, #0
 80037a2:	4d0a      	ldr	r5, [pc, #40]	; (80037cc <__libc_init_array+0x40>)
 80037a4:	4c0a      	ldr	r4, [pc, #40]	; (80037d0 <__libc_init_array+0x44>)
 80037a6:	1b64      	subs	r4, r4, r5
 80037a8:	10a4      	asrs	r4, r4, #2
 80037aa:	42a6      	cmp	r6, r4
 80037ac:	d105      	bne.n	80037ba <__libc_init_array+0x2e>
 80037ae:	bd70      	pop	{r4, r5, r6, pc}
 80037b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037b4:	4798      	blx	r3
 80037b6:	3601      	adds	r6, #1
 80037b8:	e7ee      	b.n	8003798 <__libc_init_array+0xc>
 80037ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80037be:	4798      	blx	r3
 80037c0:	3601      	adds	r6, #1
 80037c2:	e7f2      	b.n	80037aa <__libc_init_array+0x1e>
 80037c4:	08003820 	.word	0x08003820
 80037c8:	08003820 	.word	0x08003820
 80037cc:	08003820 	.word	0x08003820
 80037d0:	08003824 	.word	0x08003824

080037d4 <memset>:
 80037d4:	4603      	mov	r3, r0
 80037d6:	4402      	add	r2, r0
 80037d8:	4293      	cmp	r3, r2
 80037da:	d100      	bne.n	80037de <memset+0xa>
 80037dc:	4770      	bx	lr
 80037de:	f803 1b01 	strb.w	r1, [r3], #1
 80037e2:	e7f9      	b.n	80037d8 <memset+0x4>

080037e4 <_init>:
 80037e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e6:	bf00      	nop
 80037e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ea:	bc08      	pop	{r3}
 80037ec:	469e      	mov	lr, r3
 80037ee:	4770      	bx	lr

080037f0 <_fini>:
 80037f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f2:	bf00      	nop
 80037f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037f6:	bc08      	pop	{r3}
 80037f8:	469e      	mov	lr, r3
 80037fa:	4770      	bx	lr
