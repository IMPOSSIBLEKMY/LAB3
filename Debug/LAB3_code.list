
LAB3_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003808  08003808  00013808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800382c  0800382c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  0800382c  0800382c  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800382c  0800382c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800382c  0800382c  0001382c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003830  08003830  00013830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  2000006c  080038a0  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  080038a0  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b68  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab3  00000000  00000000  00029bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002b6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002c148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b84  00000000  00000000  0002cae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b98a  00000000  00000000  0004366c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000829ab  00000000  00000000  0004eff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d19a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a6c  00000000  00000000  000d19f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	080037f0 	.word	0x080037f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	080037f0 	.word	0x080037f0

0800014c <display7SEGvertical>:
int buffer_7SEG_vertical[2] = {0, 0};

int buffer_7SEG_horizontal[2] = {0, 0};

void display7SEGvertical(int num)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 81b2 	bhi.w	80004c0 <display7SEGvertical+0x374>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <display7SEGvertical+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001df 	.word	0x080001df
 800016c:	08000231 	.word	0x08000231
 8000170:	08000283 	.word	0x08000283
 8000174:	080002d5 	.word	0x080002d5
 8000178:	08000327 	.word	0x08000327
 800017c:	08000379 	.word	0x08000379
 8000180:	080003cb 	.word	0x080003cb
 8000184:	0800041d 	.word	0x0800041d
 8000188:	0800046f 	.word	0x0800046f
	switch(num)
	{
	    case 0:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2140      	movs	r1, #64	; 0x40
 8000190:	48cd      	ldr	r0, [pc, #820]	; (80004c8 <display7SEGvertical+0x37c>)
 8000192:	f002 fb18 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	2180      	movs	r1, #128	; 0x80
 800019a:	48cb      	ldr	r0, [pc, #812]	; (80004c8 <display7SEGvertical+0x37c>)
 800019c:	f002 fb13 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80001a0:	2200      	movs	r2, #0
 80001a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001a6:	48c8      	ldr	r0, [pc, #800]	; (80004c8 <display7SEGvertical+0x37c>)
 80001a8:	f002 fb0d 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 80001ac:	2200      	movs	r2, #0
 80001ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001b2:	48c5      	ldr	r0, [pc, #788]	; (80004c8 <display7SEGvertical+0x37c>)
 80001b4:	f002 fb07 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 80001b8:	2200      	movs	r2, #0
 80001ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001be:	48c2      	ldr	r0, [pc, #776]	; (80004c8 <display7SEGvertical+0x37c>)
 80001c0:	f002 fb01 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 80001c4:	2200      	movs	r2, #0
 80001c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001ca:	48bf      	ldr	r0, [pc, #764]	; (80004c8 <display7SEGvertical+0x37c>)
 80001cc:	f002 fafb 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 80001d0:	2201      	movs	r2, #1
 80001d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001d6:	48bc      	ldr	r0, [pc, #752]	; (80004c8 <display7SEGvertical+0x37c>)
 80001d8:	f002 faf5 	bl	80027c6 <HAL_GPIO_WritePin>
	        break;
 80001dc:	e170      	b.n	80004c0 <display7SEGvertical+0x374>
	    }
	    case 1:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_SET);
 80001de:	2201      	movs	r2, #1
 80001e0:	2140      	movs	r1, #64	; 0x40
 80001e2:	48b9      	ldr	r0, [pc, #740]	; (80004c8 <display7SEGvertical+0x37c>)
 80001e4:	f002 faef 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2180      	movs	r1, #128	; 0x80
 80001ec:	48b6      	ldr	r0, [pc, #728]	; (80004c8 <display7SEGvertical+0x37c>)
 80001ee:	f002 faea 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80001f2:	2200      	movs	r2, #0
 80001f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001f8:	48b3      	ldr	r0, [pc, #716]	; (80004c8 <display7SEGvertical+0x37c>)
 80001fa:	f002 fae4 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 80001fe:	2201      	movs	r2, #1
 8000200:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000204:	48b0      	ldr	r0, [pc, #704]	; (80004c8 <display7SEGvertical+0x37c>)
 8000206:	f002 fade 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 800020a:	2201      	movs	r2, #1
 800020c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000210:	48ad      	ldr	r0, [pc, #692]	; (80004c8 <display7SEGvertical+0x37c>)
 8000212:	f002 fad8 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 8000216:	2201      	movs	r2, #1
 8000218:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800021c:	48aa      	ldr	r0, [pc, #680]	; (80004c8 <display7SEGvertical+0x37c>)
 800021e:	f002 fad2 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 8000222:	2201      	movs	r2, #1
 8000224:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000228:	48a7      	ldr	r0, [pc, #668]	; (80004c8 <display7SEGvertical+0x37c>)
 800022a:	f002 facc 	bl	80027c6 <HAL_GPIO_WritePin>
	        break;
 800022e:	e147      	b.n	80004c0 <display7SEGvertical+0x374>
	    }
	    case 2:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000230:	2200      	movs	r2, #0
 8000232:	2140      	movs	r1, #64	; 0x40
 8000234:	48a4      	ldr	r0, [pc, #656]	; (80004c8 <display7SEGvertical+0x37c>)
 8000236:	f002 fac6 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 800023a:	2200      	movs	r2, #0
 800023c:	2180      	movs	r1, #128	; 0x80
 800023e:	48a2      	ldr	r0, [pc, #648]	; (80004c8 <display7SEGvertical+0x37c>)
 8000240:	f002 fac1 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_SET);
 8000244:	2201      	movs	r2, #1
 8000246:	f44f 7180 	mov.w	r1, #256	; 0x100
 800024a:	489f      	ldr	r0, [pc, #636]	; (80004c8 <display7SEGvertical+0x37c>)
 800024c:	f002 fabb 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000250:	2200      	movs	r2, #0
 8000252:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000256:	489c      	ldr	r0, [pc, #624]	; (80004c8 <display7SEGvertical+0x37c>)
 8000258:	f002 fab5 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000262:	4899      	ldr	r0, [pc, #612]	; (80004c8 <display7SEGvertical+0x37c>)
 8000264:	f002 faaf 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 8000268:	2201      	movs	r2, #1
 800026a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800026e:	4896      	ldr	r0, [pc, #600]	; (80004c8 <display7SEGvertical+0x37c>)
 8000270:	f002 faa9 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000274:	2200      	movs	r2, #0
 8000276:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800027a:	4893      	ldr	r0, [pc, #588]	; (80004c8 <display7SEGvertical+0x37c>)
 800027c:	f002 faa3 	bl	80027c6 <HAL_GPIO_WritePin>
	        break;
 8000280:	e11e      	b.n	80004c0 <display7SEGvertical+0x374>
	    }
	    case 3:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000282:	2200      	movs	r2, #0
 8000284:	2140      	movs	r1, #64	; 0x40
 8000286:	4890      	ldr	r0, [pc, #576]	; (80004c8 <display7SEGvertical+0x37c>)
 8000288:	f002 fa9d 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 800028c:	2200      	movs	r2, #0
 800028e:	2180      	movs	r1, #128	; 0x80
 8000290:	488d      	ldr	r0, [pc, #564]	; (80004c8 <display7SEGvertical+0x37c>)
 8000292:	f002 fa98 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000296:	2200      	movs	r2, #0
 8000298:	f44f 7180 	mov.w	r1, #256	; 0x100
 800029c:	488a      	ldr	r0, [pc, #552]	; (80004c8 <display7SEGvertical+0x37c>)
 800029e:	f002 fa92 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 80002a2:	2200      	movs	r2, #0
 80002a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002a8:	4887      	ldr	r0, [pc, #540]	; (80004c8 <display7SEGvertical+0x37c>)
 80002aa:	f002 fa8c 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 80002ae:	2201      	movs	r2, #1
 80002b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002b4:	4884      	ldr	r0, [pc, #528]	; (80004c8 <display7SEGvertical+0x37c>)
 80002b6:	f002 fa86 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 80002ba:	2201      	movs	r2, #1
 80002bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002c0:	4881      	ldr	r0, [pc, #516]	; (80004c8 <display7SEGvertical+0x37c>)
 80002c2:	f002 fa80 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 80002c6:	2200      	movs	r2, #0
 80002c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002cc:	487e      	ldr	r0, [pc, #504]	; (80004c8 <display7SEGvertical+0x37c>)
 80002ce:	f002 fa7a 	bl	80027c6 <HAL_GPIO_WritePin>
	        break;
 80002d2:	e0f5      	b.n	80004c0 <display7SEGvertical+0x374>
	    }
	    case 4:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2140      	movs	r1, #64	; 0x40
 80002d8:	487b      	ldr	r0, [pc, #492]	; (80004c8 <display7SEGvertical+0x37c>)
 80002da:	f002 fa74 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	2180      	movs	r1, #128	; 0x80
 80002e2:	4879      	ldr	r0, [pc, #484]	; (80004c8 <display7SEGvertical+0x37c>)
 80002e4:	f002 fa6f 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ee:	4876      	ldr	r0, [pc, #472]	; (80004c8 <display7SEGvertical+0x37c>)
 80002f0:	f002 fa69 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002fa:	4873      	ldr	r0, [pc, #460]	; (80004c8 <display7SEGvertical+0x37c>)
 80002fc:	f002 fa63 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8000300:	2201      	movs	r2, #1
 8000302:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000306:	4870      	ldr	r0, [pc, #448]	; (80004c8 <display7SEGvertical+0x37c>)
 8000308:	f002 fa5d 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000312:	486d      	ldr	r0, [pc, #436]	; (80004c8 <display7SEGvertical+0x37c>)
 8000314:	f002 fa57 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800031e:	486a      	ldr	r0, [pc, #424]	; (80004c8 <display7SEGvertical+0x37c>)
 8000320:	f002 fa51 	bl	80027c6 <HAL_GPIO_WritePin>
	        break;
 8000324:	e0cc      	b.n	80004c0 <display7SEGvertical+0x374>
	    }
	    case 5:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	2140      	movs	r1, #64	; 0x40
 800032a:	4867      	ldr	r0, [pc, #412]	; (80004c8 <display7SEGvertical+0x37c>)
 800032c:	f002 fa4b 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_SET);
 8000330:	2201      	movs	r2, #1
 8000332:	2180      	movs	r1, #128	; 0x80
 8000334:	4864      	ldr	r0, [pc, #400]	; (80004c8 <display7SEGvertical+0x37c>)
 8000336:	f002 fa46 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 800033a:	2200      	movs	r2, #0
 800033c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000340:	4861      	ldr	r0, [pc, #388]	; (80004c8 <display7SEGvertical+0x37c>)
 8000342:	f002 fa40 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	f44f 7100 	mov.w	r1, #512	; 0x200
 800034c:	485e      	ldr	r0, [pc, #376]	; (80004c8 <display7SEGvertical+0x37c>)
 800034e:	f002 fa3a 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8000352:	2201      	movs	r2, #1
 8000354:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000358:	485b      	ldr	r0, [pc, #364]	; (80004c8 <display7SEGvertical+0x37c>)
 800035a:	f002 fa34 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000364:	4858      	ldr	r0, [pc, #352]	; (80004c8 <display7SEGvertical+0x37c>)
 8000366:	f002 fa2e 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 800036a:	2200      	movs	r2, #0
 800036c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000370:	4855      	ldr	r0, [pc, #340]	; (80004c8 <display7SEGvertical+0x37c>)
 8000372:	f002 fa28 	bl	80027c6 <HAL_GPIO_WritePin>
	        break;
 8000376:	e0a3      	b.n	80004c0 <display7SEGvertical+0x374>
	    }
	    case 6:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2140      	movs	r1, #64	; 0x40
 800037c:	4852      	ldr	r0, [pc, #328]	; (80004c8 <display7SEGvertical+0x37c>)
 800037e:	f002 fa22 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_SET);
 8000382:	2201      	movs	r2, #1
 8000384:	2180      	movs	r1, #128	; 0x80
 8000386:	4850      	ldr	r0, [pc, #320]	; (80004c8 <display7SEGvertical+0x37c>)
 8000388:	f002 fa1d 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000392:	484d      	ldr	r0, [pc, #308]	; (80004c8 <display7SEGvertical+0x37c>)
 8000394:	f002 fa17 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800039e:	484a      	ldr	r0, [pc, #296]	; (80004c8 <display7SEGvertical+0x37c>)
 80003a0:	f002 fa11 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003aa:	4847      	ldr	r0, [pc, #284]	; (80004c8 <display7SEGvertical+0x37c>)
 80003ac:	f002 fa0b 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003b6:	4844      	ldr	r0, [pc, #272]	; (80004c8 <display7SEGvertical+0x37c>)
 80003b8:	f002 fa05 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003c2:	4841      	ldr	r0, [pc, #260]	; (80004c8 <display7SEGvertical+0x37c>)
 80003c4:	f002 f9ff 	bl	80027c6 <HAL_GPIO_WritePin>
	        break;
 80003c8:	e07a      	b.n	80004c0 <display7SEGvertical+0x374>
	    }
	    case 7:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2140      	movs	r1, #64	; 0x40
 80003ce:	483e      	ldr	r0, [pc, #248]	; (80004c8 <display7SEGvertical+0x37c>)
 80003d0:	f002 f9f9 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	2180      	movs	r1, #128	; 0x80
 80003d8:	483b      	ldr	r0, [pc, #236]	; (80004c8 <display7SEGvertical+0x37c>)
 80003da:	f002 f9f4 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80003de:	2200      	movs	r2, #0
 80003e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e4:	4838      	ldr	r0, [pc, #224]	; (80004c8 <display7SEGvertical+0x37c>)
 80003e6:	f002 f9ee 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 80003ea:	2201      	movs	r2, #1
 80003ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003f0:	4835      	ldr	r0, [pc, #212]	; (80004c8 <display7SEGvertical+0x37c>)
 80003f2:	f002 f9e8 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 80003f6:	2201      	movs	r2, #1
 80003f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003fc:	4832      	ldr	r0, [pc, #200]	; (80004c8 <display7SEGvertical+0x37c>)
 80003fe:	f002 f9e2 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 8000402:	2201      	movs	r2, #1
 8000404:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000408:	482f      	ldr	r0, [pc, #188]	; (80004c8 <display7SEGvertical+0x37c>)
 800040a:	f002 f9dc 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 800040e:	2201      	movs	r2, #1
 8000410:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000414:	482c      	ldr	r0, [pc, #176]	; (80004c8 <display7SEGvertical+0x37c>)
 8000416:	f002 f9d6 	bl	80027c6 <HAL_GPIO_WritePin>
	        break;
 800041a:	e051      	b.n	80004c0 <display7SEGvertical+0x374>
	    }
	    case 8:
	    {
	    	HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	2140      	movs	r1, #64	; 0x40
 8000420:	4829      	ldr	r0, [pc, #164]	; (80004c8 <display7SEGvertical+0x37c>)
 8000422:	f002 f9d0 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8000426:	2200      	movs	r2, #0
 8000428:	2180      	movs	r1, #128	; 0x80
 800042a:	4827      	ldr	r0, [pc, #156]	; (80004c8 <display7SEGvertical+0x37c>)
 800042c:	f002 f9cb 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000436:	4824      	ldr	r0, [pc, #144]	; (80004c8 <display7SEGvertical+0x37c>)
 8000438:	f002 f9c5 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000442:	4821      	ldr	r0, [pc, #132]	; (80004c8 <display7SEGvertical+0x37c>)
 8000444:	f002 f9bf 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800044e:	481e      	ldr	r0, [pc, #120]	; (80004c8 <display7SEGvertical+0x37c>)
 8000450:	f002 f9b9 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800045a:	481b      	ldr	r0, [pc, #108]	; (80004c8 <display7SEGvertical+0x37c>)
 800045c:	f002 f9b3 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000466:	4818      	ldr	r0, [pc, #96]	; (80004c8 <display7SEGvertical+0x37c>)
 8000468:	f002 f9ad 	bl	80027c6 <HAL_GPIO_WritePin>
	        break;
 800046c:	e028      	b.n	80004c0 <display7SEGvertical+0x374>
	    }
	    case 9:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 800046e:	2200      	movs	r2, #0
 8000470:	2140      	movs	r1, #64	; 0x40
 8000472:	4815      	ldr	r0, [pc, #84]	; (80004c8 <display7SEGvertical+0x37c>)
 8000474:	f002 f9a7 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	2180      	movs	r1, #128	; 0x80
 800047c:	4812      	ldr	r0, [pc, #72]	; (80004c8 <display7SEGvertical+0x37c>)
 800047e:	f002 f9a2 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000488:	480f      	ldr	r0, [pc, #60]	; (80004c8 <display7SEGvertical+0x37c>)
 800048a:	f002 f99c 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 800048e:	2200      	movs	r2, #0
 8000490:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000494:	480c      	ldr	r0, [pc, #48]	; (80004c8 <display7SEGvertical+0x37c>)
 8000496:	f002 f996 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 800049a:	2201      	movs	r2, #1
 800049c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004a0:	4809      	ldr	r0, [pc, #36]	; (80004c8 <display7SEGvertical+0x37c>)
 80004a2:	f002 f990 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 80004a6:	2200      	movs	r2, #0
 80004a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004ac:	4806      	ldr	r0, [pc, #24]	; (80004c8 <display7SEGvertical+0x37c>)
 80004ae:	f002 f98a 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 80004b2:	2200      	movs	r2, #0
 80004b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004b8:	4803      	ldr	r0, [pc, #12]	; (80004c8 <display7SEGvertical+0x37c>)
 80004ba:	f002 f984 	bl	80027c6 <HAL_GPIO_WritePin>
	        break;
 80004be:	bf00      	nop
	    }
	}

}
 80004c0:	bf00      	nop
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40010c00 	.word	0x40010c00

080004cc <display7SEGhorizontal>:

void display7SEGhorizontal(int num)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2b09      	cmp	r3, #9
 80004d8:	f200 81b2 	bhi.w	8000840 <display7SEGhorizontal+0x374>
 80004dc:	a201      	add	r2, pc, #4	; (adr r2, 80004e4 <display7SEGhorizontal+0x18>)
 80004de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e2:	bf00      	nop
 80004e4:	0800050d 	.word	0x0800050d
 80004e8:	0800055f 	.word	0x0800055f
 80004ec:	080005b1 	.word	0x080005b1
 80004f0:	08000603 	.word	0x08000603
 80004f4:	08000655 	.word	0x08000655
 80004f8:	080006a7 	.word	0x080006a7
 80004fc:	080006f9 	.word	0x080006f9
 8000500:	0800074b 	.word	0x0800074b
 8000504:	0800079d 	.word	0x0800079d
 8000508:	080007ef 	.word	0x080007ef
	switch(num)
	{
	    case 0:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	2140      	movs	r1, #64	; 0x40
 8000510:	48cd      	ldr	r0, [pc, #820]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000512:	f002 f958 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	2180      	movs	r1, #128	; 0x80
 800051a:	48cb      	ldr	r0, [pc, #812]	; (8000848 <display7SEGhorizontal+0x37c>)
 800051c:	f002 f953 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000526:	48c8      	ldr	r0, [pc, #800]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000528:	f002 f94d 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000532:	48c5      	ldr	r0, [pc, #788]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000534:	f002 f947 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800053e:	48c2      	ldr	r0, [pc, #776]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000540:	f002 f941 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800054a:	48bf      	ldr	r0, [pc, #764]	; (8000848 <display7SEGhorizontal+0x37c>)
 800054c:	f002 f93b 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000556:	48bc      	ldr	r0, [pc, #752]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000558:	f002 f935 	bl	80027c6 <HAL_GPIO_WritePin>
	        break;
 800055c:	e170      	b.n	8000840 <display7SEGhorizontal+0x374>
	    }
	    case 1:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 800055e:	2201      	movs	r2, #1
 8000560:	2140      	movs	r1, #64	; 0x40
 8000562:	48b9      	ldr	r0, [pc, #740]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000564:	f002 f92f 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	2180      	movs	r1, #128	; 0x80
 800056c:	48b6      	ldr	r0, [pc, #728]	; (8000848 <display7SEGhorizontal+0x37c>)
 800056e:	f002 f92a 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000578:	48b3      	ldr	r0, [pc, #716]	; (8000848 <display7SEGhorizontal+0x37c>)
 800057a:	f002 f924 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000584:	48b0      	ldr	r0, [pc, #704]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000586:	f002 f91e 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000590:	48ad      	ldr	r0, [pc, #692]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000592:	f002 f918 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 8000596:	2201      	movs	r2, #1
 8000598:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800059c:	48aa      	ldr	r0, [pc, #680]	; (8000848 <display7SEGhorizontal+0x37c>)
 800059e:	f002 f912 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a8:	48a7      	ldr	r0, [pc, #668]	; (8000848 <display7SEGhorizontal+0x37c>)
 80005aa:	f002 f90c 	bl	80027c6 <HAL_GPIO_WritePin>
	        break;
 80005ae:	e147      	b.n	8000840 <display7SEGhorizontal+0x374>
	    }
	    case 2:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2140      	movs	r1, #64	; 0x40
 80005b4:	48a4      	ldr	r0, [pc, #656]	; (8000848 <display7SEGhorizontal+0x37c>)
 80005b6:	f002 f906 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2180      	movs	r1, #128	; 0x80
 80005be:	48a2      	ldr	r0, [pc, #648]	; (8000848 <display7SEGhorizontal+0x37c>)
 80005c0:	f002 f901 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ca:	489f      	ldr	r0, [pc, #636]	; (8000848 <display7SEGhorizontal+0x37c>)
 80005cc:	f002 f8fb 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d6:	489c      	ldr	r0, [pc, #624]	; (8000848 <display7SEGhorizontal+0x37c>)
 80005d8:	f002 f8f5 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e2:	4899      	ldr	r0, [pc, #612]	; (8000848 <display7SEGhorizontal+0x37c>)
 80005e4:	f002 f8ef 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ee:	4896      	ldr	r0, [pc, #600]	; (8000848 <display7SEGhorizontal+0x37c>)
 80005f0:	f002 f8e9 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005fa:	4893      	ldr	r0, [pc, #588]	; (8000848 <display7SEGhorizontal+0x37c>)
 80005fc:	f002 f8e3 	bl	80027c6 <HAL_GPIO_WritePin>
	        break;
 8000600:	e11e      	b.n	8000840 <display7SEGhorizontal+0x374>
	    }
	    case 3:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2140      	movs	r1, #64	; 0x40
 8000606:	4890      	ldr	r0, [pc, #576]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000608:	f002 f8dd 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	2180      	movs	r1, #128	; 0x80
 8000610:	488d      	ldr	r0, [pc, #564]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000612:	f002 f8d8 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061c:	488a      	ldr	r0, [pc, #552]	; (8000848 <display7SEGhorizontal+0x37c>)
 800061e:	f002 f8d2 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000628:	4887      	ldr	r0, [pc, #540]	; (8000848 <display7SEGhorizontal+0x37c>)
 800062a:	f002 f8cc 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000634:	4884      	ldr	r0, [pc, #528]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000636:	f002 f8c6 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000640:	4881      	ldr	r0, [pc, #516]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000642:	f002 f8c0 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800064c:	487e      	ldr	r0, [pc, #504]	; (8000848 <display7SEGhorizontal+0x37c>)
 800064e:	f002 f8ba 	bl	80027c6 <HAL_GPIO_WritePin>
	        break;
 8000652:	e0f5      	b.n	8000840 <display7SEGhorizontal+0x374>
	    }
	    case 4:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	2140      	movs	r1, #64	; 0x40
 8000658:	487b      	ldr	r0, [pc, #492]	; (8000848 <display7SEGhorizontal+0x37c>)
 800065a:	f002 f8b4 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2180      	movs	r1, #128	; 0x80
 8000662:	4879      	ldr	r0, [pc, #484]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000664:	f002 f8af 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066e:	4876      	ldr	r0, [pc, #472]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000670:	f002 f8a9 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 7100 	mov.w	r1, #512	; 0x200
 800067a:	4873      	ldr	r0, [pc, #460]	; (8000848 <display7SEGhorizontal+0x37c>)
 800067c:	f002 f8a3 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000686:	4870      	ldr	r0, [pc, #448]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000688:	f002 f89d 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000692:	486d      	ldr	r0, [pc, #436]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000694:	f002 f897 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800069e:	486a      	ldr	r0, [pc, #424]	; (8000848 <display7SEGhorizontal+0x37c>)
 80006a0:	f002 f891 	bl	80027c6 <HAL_GPIO_WritePin>
	        break;
 80006a4:	e0cc      	b.n	8000840 <display7SEGhorizontal+0x374>
	    }
	    case 5:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2140      	movs	r1, #64	; 0x40
 80006aa:	4867      	ldr	r0, [pc, #412]	; (8000848 <display7SEGhorizontal+0x37c>)
 80006ac:	f002 f88b 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	2180      	movs	r1, #128	; 0x80
 80006b4:	4864      	ldr	r0, [pc, #400]	; (8000848 <display7SEGhorizontal+0x37c>)
 80006b6:	f002 f886 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006c0:	4861      	ldr	r0, [pc, #388]	; (8000848 <display7SEGhorizontal+0x37c>)
 80006c2:	f002 f880 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006cc:	485e      	ldr	r0, [pc, #376]	; (8000848 <display7SEGhorizontal+0x37c>)
 80006ce:	f002 f87a 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d8:	485b      	ldr	r0, [pc, #364]	; (8000848 <display7SEGhorizontal+0x37c>)
 80006da:	f002 f874 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006e4:	4858      	ldr	r0, [pc, #352]	; (8000848 <display7SEGhorizontal+0x37c>)
 80006e6:	f002 f86e 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f0:	4855      	ldr	r0, [pc, #340]	; (8000848 <display7SEGhorizontal+0x37c>)
 80006f2:	f002 f868 	bl	80027c6 <HAL_GPIO_WritePin>
	        break;
 80006f6:	e0a3      	b.n	8000840 <display7SEGhorizontal+0x374>
	    }
	    case 6:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2140      	movs	r1, #64	; 0x40
 80006fc:	4852      	ldr	r0, [pc, #328]	; (8000848 <display7SEGhorizontal+0x37c>)
 80006fe:	f002 f862 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 8000702:	2201      	movs	r2, #1
 8000704:	2180      	movs	r1, #128	; 0x80
 8000706:	4850      	ldr	r0, [pc, #320]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000708:	f002 f85d 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000712:	484d      	ldr	r0, [pc, #308]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000714:	f002 f857 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071e:	484a      	ldr	r0, [pc, #296]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000720:	f002 f851 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800072a:	4847      	ldr	r0, [pc, #284]	; (8000848 <display7SEGhorizontal+0x37c>)
 800072c:	f002 f84b 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000736:	4844      	ldr	r0, [pc, #272]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000738:	f002 f845 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000742:	4841      	ldr	r0, [pc, #260]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000744:	f002 f83f 	bl	80027c6 <HAL_GPIO_WritePin>
	        break;
 8000748:	e07a      	b.n	8000840 <display7SEGhorizontal+0x374>
	    }
	    case 7:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2140      	movs	r1, #64	; 0x40
 800074e:	483e      	ldr	r0, [pc, #248]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000750:	f002 f839 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	2180      	movs	r1, #128	; 0x80
 8000758:	483b      	ldr	r0, [pc, #236]	; (8000848 <display7SEGhorizontal+0x37c>)
 800075a:	f002 f834 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000764:	4838      	ldr	r0, [pc, #224]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000766:	f002 f82e 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 800076a:	2201      	movs	r2, #1
 800076c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000770:	4835      	ldr	r0, [pc, #212]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000772:	f002 f828 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 8000776:	2201      	movs	r2, #1
 8000778:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800077c:	4832      	ldr	r0, [pc, #200]	; (8000848 <display7SEGhorizontal+0x37c>)
 800077e:	f002 f822 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 8000782:	2201      	movs	r2, #1
 8000784:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000788:	482f      	ldr	r0, [pc, #188]	; (8000848 <display7SEGhorizontal+0x37c>)
 800078a:	f002 f81c 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 800078e:	2201      	movs	r2, #1
 8000790:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000794:	482c      	ldr	r0, [pc, #176]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000796:	f002 f816 	bl	80027c6 <HAL_GPIO_WritePin>
	        break;
 800079a:	e051      	b.n	8000840 <display7SEGhorizontal+0x374>
	    }
	    case 8:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2140      	movs	r1, #64	; 0x40
 80007a0:	4829      	ldr	r0, [pc, #164]	; (8000848 <display7SEGhorizontal+0x37c>)
 80007a2:	f002 f810 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2180      	movs	r1, #128	; 0x80
 80007aa:	4827      	ldr	r0, [pc, #156]	; (8000848 <display7SEGhorizontal+0x37c>)
 80007ac:	f002 f80b 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b6:	4824      	ldr	r0, [pc, #144]	; (8000848 <display7SEGhorizontal+0x37c>)
 80007b8:	f002 f805 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c2:	4821      	ldr	r0, [pc, #132]	; (8000848 <display7SEGhorizontal+0x37c>)
 80007c4:	f001 ffff 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ce:	481e      	ldr	r0, [pc, #120]	; (8000848 <display7SEGhorizontal+0x37c>)
 80007d0:	f001 fff9 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007da:	481b      	ldr	r0, [pc, #108]	; (8000848 <display7SEGhorizontal+0x37c>)
 80007dc:	f001 fff3 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e6:	4818      	ldr	r0, [pc, #96]	; (8000848 <display7SEGhorizontal+0x37c>)
 80007e8:	f001 ffed 	bl	80027c6 <HAL_GPIO_WritePin>
	        break;
 80007ec:	e028      	b.n	8000840 <display7SEGhorizontal+0x374>
	    }
	    case 9:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2140      	movs	r1, #64	; 0x40
 80007f2:	4815      	ldr	r0, [pc, #84]	; (8000848 <display7SEGhorizontal+0x37c>)
 80007f4:	f001 ffe7 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2180      	movs	r1, #128	; 0x80
 80007fc:	4812      	ldr	r0, [pc, #72]	; (8000848 <display7SEGhorizontal+0x37c>)
 80007fe:	f001 ffe2 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000808:	480f      	ldr	r0, [pc, #60]	; (8000848 <display7SEGhorizontal+0x37c>)
 800080a:	f001 ffdc 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000814:	480c      	ldr	r0, [pc, #48]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000816:	f001 ffd6 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 800081a:	2201      	movs	r2, #1
 800081c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000820:	4809      	ldr	r0, [pc, #36]	; (8000848 <display7SEGhorizontal+0x37c>)
 8000822:	f001 ffd0 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800082c:	4806      	ldr	r0, [pc, #24]	; (8000848 <display7SEGhorizontal+0x37c>)
 800082e:	f001 ffca 	bl	80027c6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000838:	4803      	ldr	r0, [pc, #12]	; (8000848 <display7SEGhorizontal+0x37c>)
 800083a:	f001 ffc4 	bl	80027c6 <HAL_GPIO_WritePin>
	        break;
 800083e:	bf00      	nop
	    }
	}
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40010800 	.word	0x40010800

0800084c <display7SEGBuffervertical>:

void display7SEGBuffervertical(int num)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	switch(num)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d003      	beq.n	8000862 <display7SEGBuffervertical+0x16>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d012      	beq.n	8000886 <display7SEGBuffervertical+0x3a>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
        display7SEGvertical(buffer_7SEG_vertical[num]);
		break;
	}
	}
}
 8000860:	e023      	b.n	80008aa <display7SEGBuffervertical+0x5e>
        HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2110      	movs	r1, #16
 8000866:	4813      	ldr	r0, [pc, #76]	; (80008b4 <display7SEGBuffervertical+0x68>)
 8000868:	f001 ffad 	bl	80027c6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800086c:	2201      	movs	r2, #1
 800086e:	2120      	movs	r1, #32
 8000870:	4810      	ldr	r0, [pc, #64]	; (80008b4 <display7SEGBuffervertical+0x68>)
 8000872:	f001 ffa8 	bl	80027c6 <HAL_GPIO_WritePin>
        display7SEGvertical(buffer_7SEG_vertical[num]);
 8000876:	4a10      	ldr	r2, [pc, #64]	; (80008b8 <display7SEGBuffervertical+0x6c>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fc64 	bl	800014c <display7SEGvertical>
		break;
 8000884:	e011      	b.n	80008aa <display7SEGBuffervertical+0x5e>
        HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000886:	2201      	movs	r2, #1
 8000888:	2110      	movs	r1, #16
 800088a:	480a      	ldr	r0, [pc, #40]	; (80008b4 <display7SEGBuffervertical+0x68>)
 800088c:	f001 ff9b 	bl	80027c6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2120      	movs	r1, #32
 8000894:	4807      	ldr	r0, [pc, #28]	; (80008b4 <display7SEGBuffervertical+0x68>)
 8000896:	f001 ff96 	bl	80027c6 <HAL_GPIO_WritePin>
        display7SEGvertical(buffer_7SEG_vertical[num]);
 800089a:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <display7SEGBuffervertical+0x6c>)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fc52 	bl	800014c <display7SEGvertical>
		break;
 80008a8:	bf00      	nop
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40010c00 	.word	0x40010c00
 80008b8:	20000088 	.word	0x20000088

080008bc <display7SEGBufferhorizontal>:

void display7SEGBufferhorizontal(int num)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	switch(num)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d003      	beq.n	80008d2 <display7SEGBufferhorizontal+0x16>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d012      	beq.n	80008f6 <display7SEGBufferhorizontal+0x3a>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
        display7SEGhorizontal(buffer_7SEG_horizontal[num]);
		break;
	}
	}
}
 80008d0:	e023      	b.n	800091a <display7SEGBufferhorizontal+0x5e>
        HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2101      	movs	r1, #1
 80008d6:	4813      	ldr	r0, [pc, #76]	; (8000924 <display7SEGBufferhorizontal+0x68>)
 80008d8:	f001 ff75 	bl	80027c6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2102      	movs	r1, #2
 80008e0:	4810      	ldr	r0, [pc, #64]	; (8000924 <display7SEGBufferhorizontal+0x68>)
 80008e2:	f001 ff70 	bl	80027c6 <HAL_GPIO_WritePin>
        display7SEGhorizontal(buffer_7SEG_horizontal[num]);
 80008e6:	4a10      	ldr	r2, [pc, #64]	; (8000928 <display7SEGBufferhorizontal+0x6c>)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff fdec 	bl	80004cc <display7SEGhorizontal>
		break;
 80008f4:	e011      	b.n	800091a <display7SEGBufferhorizontal+0x5e>
        HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	2101      	movs	r1, #1
 80008fa:	480a      	ldr	r0, [pc, #40]	; (8000924 <display7SEGBufferhorizontal+0x68>)
 80008fc:	f001 ff63 	bl	80027c6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	2102      	movs	r1, #2
 8000904:	4807      	ldr	r0, [pc, #28]	; (8000924 <display7SEGBufferhorizontal+0x68>)
 8000906:	f001 ff5e 	bl	80027c6 <HAL_GPIO_WritePin>
        display7SEGhorizontal(buffer_7SEG_horizontal[num]);
 800090a:	4a07      	ldr	r2, [pc, #28]	; (8000928 <display7SEGBufferhorizontal+0x6c>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fdda 	bl	80004cc <display7SEGhorizontal>
		break;
 8000918:	bf00      	nop
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40010c00 	.word	0x40010c00
 8000928:	20000090 	.word	0x20000090

0800092c <isButton1Pressed>:
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;

int isButton1Pressed()
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
	if(button1_flag == 1)
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <isButton1Pressed+0x20>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d104      	bne.n	8000942 <isButton1Pressed+0x16>
	{
		button1_flag = 0;
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <isButton1Pressed+0x20>)
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
		return 1;
 800093e:	2301      	movs	r3, #1
 8000940:	e000      	b.n	8000944 <isButton1Pressed+0x18>
	}

	return 0;
 8000942:	2300      	movs	r3, #0
}
 8000944:	4618      	mov	r0, r3
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr
 800094c:	20000098 	.word	0x20000098

08000950 <isButton2Pressed>:

int isButton2Pressed()
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
	if(button2_flag == 1)
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <isButton2Pressed+0x20>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d104      	bne.n	8000966 <isButton2Pressed+0x16>
	{
		button2_flag = 0;
 800095c:	4b04      	ldr	r3, [pc, #16]	; (8000970 <isButton2Pressed+0x20>)
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
		return 1;
 8000962:	2301      	movs	r3, #1
 8000964:	e000      	b.n	8000968 <isButton2Pressed+0x18>
	}

	return 0;
 8000966:	2300      	movs	r3, #0
}
 8000968:	4618      	mov	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	2000009c 	.word	0x2000009c

08000974 <isButton3Pressed>:

int isButton3Pressed()
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
	if(button3_flag == 1)
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <isButton3Pressed+0x20>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d104      	bne.n	800098a <isButton3Pressed+0x16>
	{
		button3_flag = 0;
 8000980:	4b04      	ldr	r3, [pc, #16]	; (8000994 <isButton3Pressed+0x20>)
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
		return 1;
 8000986:	2301      	movs	r3, #1
 8000988:	e000      	b.n	800098c <isButton3Pressed+0x18>
	}

	return 0;
 800098a:	2300      	movs	r3, #0
}
 800098c:	4618      	mov	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	200000a0 	.word	0x200000a0

08000998 <getButton1>:

void getButton1()
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
	int i = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
	keyReg0[i] = keyReg1[i];
 80009a2:	4a39      	ldr	r2, [pc, #228]	; (8000a88 <getButton1+0xf0>)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009aa:	4938      	ldr	r1, [pc, #224]	; (8000a8c <getButton1+0xf4>)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[i] = keyReg2[i];
 80009b2:	4a37      	ldr	r2, [pc, #220]	; (8000a90 <getButton1+0xf8>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009ba:	4933      	ldr	r1, [pc, #204]	; (8000a88 <getButton1+0xf0>)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg2[i] = HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin);
 80009c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c6:	4833      	ldr	r0, [pc, #204]	; (8000a94 <getButton1+0xfc>)
 80009c8:	f001 fee6 	bl	8002798 <HAL_GPIO_ReadPin>
 80009cc:	4603      	mov	r3, r0
 80009ce:	4619      	mov	r1, r3
 80009d0:	4a2f      	ldr	r2, [pc, #188]	; (8000a90 <getButton1+0xf8>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 80009d8:	4a2c      	ldr	r2, [pc, #176]	; (8000a8c <getButton1+0xf4>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009e0:	4929      	ldr	r1, [pc, #164]	; (8000a88 <getButton1+0xf0>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d149      	bne.n	8000a80 <getButton1+0xe8>
 80009ec:	4a26      	ldr	r2, [pc, #152]	; (8000a88 <getButton1+0xf0>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009f4:	4926      	ldr	r1, [pc, #152]	; (8000a90 <getButton1+0xf8>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d13f      	bne.n	8000a80 <getButton1+0xe8>
	{
		if(keyReg3[i] != keyReg2[i])
 8000a00:	4a25      	ldr	r2, [pc, #148]	; (8000a98 <getButton1+0x100>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a08:	4921      	ldr	r1, [pc, #132]	; (8000a90 <getButton1+0xf8>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d017      	beq.n	8000a44 <getButton1+0xac>
		{
			keyReg3[i] = keyReg2[i];
 8000a14:	4a1e      	ldr	r2, [pc, #120]	; (8000a90 <getButton1+0xf8>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a1c:	491e      	ldr	r1, [pc, #120]	; (8000a98 <getButton1+0x100>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(keyReg2[i] == PRESSED_STATE)
 8000a24:	4a1a      	ldr	r2, [pc, #104]	; (8000a90 <getButton1+0xf8>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d127      	bne.n	8000a80 <getButton1+0xe8>
			{
				button1_flag = 1;
 8000a30:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <getButton1+0x104>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	601a      	str	r2, [r3, #0]
				TimerForKeyPress[i] = 300;
 8000a36:	4a1a      	ldr	r2, [pc, #104]	; (8000aa0 <getButton1+0x108>)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000a3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimerForKeyPress[i] = 300;
				}
			}
		}
	}
}
 8000a42:	e01d      	b.n	8000a80 <getButton1+0xe8>
			if(keyReg2[i] == PRESSED_STATE)
 8000a44:	4a12      	ldr	r2, [pc, #72]	; (8000a90 <getButton1+0xf8>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d117      	bne.n	8000a80 <getButton1+0xe8>
				TimerForKeyPress[i]--;
 8000a50:	4a13      	ldr	r2, [pc, #76]	; (8000aa0 <getButton1+0x108>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a58:	1e5a      	subs	r2, r3, #1
 8000a5a:	4911      	ldr	r1, [pc, #68]	; (8000aa0 <getButton1+0x108>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeyPress[i] == 0)
 8000a62:	4a0f      	ldr	r2, [pc, #60]	; (8000aa0 <getButton1+0x108>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d108      	bne.n	8000a80 <getButton1+0xe8>
					button1_flag = 1;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <getButton1+0x104>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	601a      	str	r2, [r3, #0]
					TimerForKeyPress[i] = 300;
 8000a74:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <getButton1+0x108>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000a7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	2000000c 	.word	0x2000000c
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20000018 	.word	0x20000018
 8000a94:	40010800 	.word	0x40010800
 8000a98:	20000024 	.word	0x20000024
 8000a9c:	20000098 	.word	0x20000098
 8000aa0:	20000030 	.word	0x20000030

08000aa4 <getButton2>:

void getButton2()
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
	int i = 1;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	607b      	str	r3, [r7, #4]
	keyReg0[i] = keyReg1[i];
 8000aae:	4a38      	ldr	r2, [pc, #224]	; (8000b90 <getButton2+0xec>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ab6:	4937      	ldr	r1, [pc, #220]	; (8000b94 <getButton2+0xf0>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[i] = keyReg2[i];
 8000abe:	4a36      	ldr	r2, [pc, #216]	; (8000b98 <getButton2+0xf4>)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ac6:	4932      	ldr	r1, [pc, #200]	; (8000b90 <getButton2+0xec>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg2[i] = HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin);
 8000ace:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ad2:	4832      	ldr	r0, [pc, #200]	; (8000b9c <getButton2+0xf8>)
 8000ad4:	f001 fe60 	bl	8002798 <HAL_GPIO_ReadPin>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	4619      	mov	r1, r3
 8000adc:	4a2e      	ldr	r2, [pc, #184]	; (8000b98 <getButton2+0xf4>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000ae4:	4a2b      	ldr	r2, [pc, #172]	; (8000b94 <getButton2+0xf0>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aec:	4928      	ldr	r1, [pc, #160]	; (8000b90 <getButton2+0xec>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d147      	bne.n	8000b88 <getButton2+0xe4>
 8000af8:	4a25      	ldr	r2, [pc, #148]	; (8000b90 <getButton2+0xec>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b00:	4925      	ldr	r1, [pc, #148]	; (8000b98 <getButton2+0xf4>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d13d      	bne.n	8000b88 <getButton2+0xe4>
	{
		if(keyReg3[i] != keyReg2[i])
 8000b0c:	4a24      	ldr	r2, [pc, #144]	; (8000ba0 <getButton2+0xfc>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b14:	4920      	ldr	r1, [pc, #128]	; (8000b98 <getButton2+0xf4>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d016      	beq.n	8000b4e <getButton2+0xaa>
		{
			keyReg3[i] = keyReg2[i];
 8000b20:	4a1d      	ldr	r2, [pc, #116]	; (8000b98 <getButton2+0xf4>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b28:	491d      	ldr	r1, [pc, #116]	; (8000ba0 <getButton2+0xfc>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(keyReg2[i] == PRESSED_STATE)
 8000b30:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <getButton2+0xf4>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d125      	bne.n	8000b88 <getButton2+0xe4>
			{
				button2_flag = 1;
 8000b3c:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <getButton2+0x100>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	601a      	str	r2, [r3, #0]
				TimerForKeyPress[i] = 50;
 8000b42:	4a19      	ldr	r2, [pc, #100]	; (8000ba8 <getButton2+0x104>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2132      	movs	r1, #50	; 0x32
 8000b48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimerForKeyPress[i] = 50;
				}
			}
		}
	}
}
 8000b4c:	e01c      	b.n	8000b88 <getButton2+0xe4>
			if(keyReg2[i] == PRESSED_STATE)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <getButton2+0xf4>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d116      	bne.n	8000b88 <getButton2+0xe4>
				TimerForKeyPress[i]--;
 8000b5a:	4a13      	ldr	r2, [pc, #76]	; (8000ba8 <getButton2+0x104>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b62:	1e5a      	subs	r2, r3, #1
 8000b64:	4910      	ldr	r1, [pc, #64]	; (8000ba8 <getButton2+0x104>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeyPress[i] == 0)
 8000b6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ba8 <getButton2+0x104>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d107      	bne.n	8000b88 <getButton2+0xe4>
					button2_flag = 1;
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <getButton2+0x100>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	601a      	str	r2, [r3, #0]
					TimerForKeyPress[i] = 50;
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <getButton2+0x104>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2132      	movs	r1, #50	; 0x32
 8000b84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	2000000c 	.word	0x2000000c
 8000b94:	20000000 	.word	0x20000000
 8000b98:	20000018 	.word	0x20000018
 8000b9c:	40010800 	.word	0x40010800
 8000ba0:	20000024 	.word	0x20000024
 8000ba4:	2000009c 	.word	0x2000009c
 8000ba8:	20000030 	.word	0x20000030

08000bac <getButton3>:

void getButton3()
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
	int i = 2;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	607b      	str	r3, [r7, #4]
	keyReg0[i] = keyReg1[i];
 8000bb6:	4a39      	ldr	r2, [pc, #228]	; (8000c9c <getButton3+0xf0>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bbe:	4938      	ldr	r1, [pc, #224]	; (8000ca0 <getButton3+0xf4>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[i] = keyReg2[i];
 8000bc6:	4a37      	ldr	r2, [pc, #220]	; (8000ca4 <getButton3+0xf8>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bce:	4933      	ldr	r1, [pc, #204]	; (8000c9c <getButton3+0xf0>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg2[i] = HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin);
 8000bd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bda:	4833      	ldr	r0, [pc, #204]	; (8000ca8 <getButton3+0xfc>)
 8000bdc:	f001 fddc 	bl	8002798 <HAL_GPIO_ReadPin>
 8000be0:	4603      	mov	r3, r0
 8000be2:	4619      	mov	r1, r3
 8000be4:	4a2f      	ldr	r2, [pc, #188]	; (8000ca4 <getButton3+0xf8>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000bec:	4a2c      	ldr	r2, [pc, #176]	; (8000ca0 <getButton3+0xf4>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bf4:	4929      	ldr	r1, [pc, #164]	; (8000c9c <getButton3+0xf0>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d149      	bne.n	8000c94 <getButton3+0xe8>
 8000c00:	4a26      	ldr	r2, [pc, #152]	; (8000c9c <getButton3+0xf0>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c08:	4926      	ldr	r1, [pc, #152]	; (8000ca4 <getButton3+0xf8>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d13f      	bne.n	8000c94 <getButton3+0xe8>
	{
		if(keyReg3[i] != keyReg2[i])
 8000c14:	4a25      	ldr	r2, [pc, #148]	; (8000cac <getButton3+0x100>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c1c:	4921      	ldr	r1, [pc, #132]	; (8000ca4 <getButton3+0xf8>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d017      	beq.n	8000c58 <getButton3+0xac>
		{
			keyReg3[i] = keyReg2[i];
 8000c28:	4a1e      	ldr	r2, [pc, #120]	; (8000ca4 <getButton3+0xf8>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c30:	491e      	ldr	r1, [pc, #120]	; (8000cac <getButton3+0x100>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(keyReg2[i] == PRESSED_STATE)
 8000c38:	4a1a      	ldr	r2, [pc, #104]	; (8000ca4 <getButton3+0xf8>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d127      	bne.n	8000c94 <getButton3+0xe8>
			{
				button3_flag = 1;
 8000c44:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <getButton3+0x104>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	601a      	str	r2, [r3, #0]
				TimerForKeyPress[i] = 300;
 8000c4a:	4a1a      	ldr	r2, [pc, #104]	; (8000cb4 <getButton3+0x108>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000c52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimerForKeyPress[i] = 300;
				}
			}
		}
	}
}
 8000c56:	e01d      	b.n	8000c94 <getButton3+0xe8>
			if(keyReg2[i] == PRESSED_STATE)
 8000c58:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <getButton3+0xf8>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d117      	bne.n	8000c94 <getButton3+0xe8>
				TimerForKeyPress[i]--;
 8000c64:	4a13      	ldr	r2, [pc, #76]	; (8000cb4 <getButton3+0x108>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6c:	1e5a      	subs	r2, r3, #1
 8000c6e:	4911      	ldr	r1, [pc, #68]	; (8000cb4 <getButton3+0x108>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeyPress[i] == 0)
 8000c76:	4a0f      	ldr	r2, [pc, #60]	; (8000cb4 <getButton3+0x108>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d108      	bne.n	8000c94 <getButton3+0xe8>
					button3_flag = 1;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <getButton3+0x104>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	601a      	str	r2, [r3, #0]
					TimerForKeyPress[i] = 300;
 8000c88:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <getButton3+0x108>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000c90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	2000000c 	.word	0x2000000c
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	20000018 	.word	0x20000018
 8000ca8:	40010800 	.word	0x40010800
 8000cac:	20000024 	.word	0x20000024
 8000cb0:	200000a0 	.word	0x200000a0
 8000cb4:	20000030 	.word	0x20000030

08000cb8 <fsm_auto_all>:

int num_horizontal = 1;
int num_vertical = 1;

void fsm_auto_all()
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	fsm_auto_horizontal();
 8000cbc:	f000 f804 	bl	8000cc8 <fsm_auto_horizontal>

	fsm_auto_vertical();
 8000cc0:	f000 f930 	bl	8000f24 <fsm_auto_vertical>

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <fsm_auto_horizontal>:

void fsm_auto_horizontal()
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
	switch(status_horizontal)
 8000cce:	4b8a      	ldr	r3, [pc, #552]	; (8000ef8 <fsm_auto_horizontal+0x230>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b03      	cmp	r3, #3
 8000cd4:	f200 80f3 	bhi.w	8000ebe <fsm_auto_horizontal+0x1f6>
 8000cd8:	a201      	add	r2, pc, #4	; (adr r2, 8000ce0 <fsm_auto_horizontal+0x18>)
 8000cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cde:	bf00      	nop
 8000ce0:	08000cf1 	.word	0x08000cf1
 8000ce4:	08000d29 	.word	0x08000d29
 8000ce8:	08000db3 	.word	0x08000db3
 8000cec:	08000e2d 	.word	0x08000e2d
	{
	case INIT_AUTO:
	{
		for(int i = 0; i < 3; i++)
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	e00a      	b.n	8000d0c <fsm_auto_horizontal+0x44>
		{
			temp_red_yellow_green_auto_time_horizontal[i] = red_yellow_green_auto_time_horizontal[i];
 8000cf6:	4a81      	ldr	r2, [pc, #516]	; (8000efc <fsm_auto_horizontal+0x234>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cfe:	4980      	ldr	r1, [pc, #512]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < 3; i++)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	ddf1      	ble.n	8000cf6 <fsm_auto_horizontal+0x2e>
		}

		setTimer7SEGCountRedhorizontal(1000);
 8000d12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d16:	f000 ff93 	bl	8001c40 <setTimer7SEGCountRedhorizontal>
		num_horizontal = 1;
 8000d1a:	4b7a      	ldr	r3, [pc, #488]	; (8000f04 <fsm_auto_horizontal+0x23c>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]
		status_horizontal = AUTO_RED;
 8000d20:	4b75      	ldr	r3, [pc, #468]	; (8000ef8 <fsm_auto_horizontal+0x230>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	601a      	str	r2, [r3, #0]
		break;
 8000d26:	e0ca      	b.n	8000ebe <fsm_auto_horizontal+0x1f6>
	}
	case AUTO_RED:
	{
		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_SET);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	2104      	movs	r1, #4
 8000d2c:	4876      	ldr	r0, [pc, #472]	; (8000f08 <fsm_auto_horizontal+0x240>)
 8000d2e:	f001 fd4a 	bl	80027c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2108      	movs	r1, #8
 8000d36:	4874      	ldr	r0, [pc, #464]	; (8000f08 <fsm_auto_horizontal+0x240>)
 8000d38:	f001 fd45 	bl	80027c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2110      	movs	r1, #16
 8000d40:	4871      	ldr	r0, [pc, #452]	; (8000f08 <fsm_auto_horizontal+0x240>)
 8000d42:	f001 fd40 	bl	80027c6 <HAL_GPIO_WritePin>

		if(temp_red_yellow_green_auto_time_horizontal[0] < 0)
 8000d46:	4b6e      	ldr	r3, [pc, #440]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	da09      	bge.n	8000d62 <fsm_auto_horizontal+0x9a>
		{
			setTimer7SEGCountGreenhorizontal(1000);
 8000d4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d52:	f000 ffa9 	bl	8001ca8 <setTimer7SEGCountGreenhorizontal>
			num_horizontal = 1;
 8000d56:	4b6b      	ldr	r3, [pc, #428]	; (8000f04 <fsm_auto_horizontal+0x23c>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	601a      	str	r2, [r3, #0]
			status_horizontal = AUTO_GREEN;
 8000d5c:	4b66      	ldr	r3, [pc, #408]	; (8000ef8 <fsm_auto_horizontal+0x230>)
 8000d5e:	2203      	movs	r2, #3
 8000d60:	601a      	str	r2, [r3, #0]
		}

		buffer_7SEG_horizontal[0] = temp_red_yellow_green_auto_time_horizontal[0] / 10;
 8000d62:	4b67      	ldr	r3, [pc, #412]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a69      	ldr	r2, [pc, #420]	; (8000f0c <fsm_auto_horizontal+0x244>)
 8000d68:	fb82 1203 	smull	r1, r2, r2, r3
 8000d6c:	1092      	asrs	r2, r2, #2
 8000d6e:	17db      	asrs	r3, r3, #31
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	4a67      	ldr	r2, [pc, #412]	; (8000f10 <fsm_auto_horizontal+0x248>)
 8000d74:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = temp_red_yellow_green_auto_time_horizontal[0] % 10;
 8000d76:	4b62      	ldr	r3, [pc, #392]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000d78:	6819      	ldr	r1, [r3, #0]
 8000d7a:	4b64      	ldr	r3, [pc, #400]	; (8000f0c <fsm_auto_horizontal+0x244>)
 8000d7c:	fb83 2301 	smull	r2, r3, r3, r1
 8000d80:	109a      	asrs	r2, r3, #2
 8000d82:	17cb      	asrs	r3, r1, #31
 8000d84:	1ad2      	subs	r2, r2, r3
 8000d86:	4613      	mov	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	4413      	add	r3, r2
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	1aca      	subs	r2, r1, r3
 8000d90:	4b5f      	ldr	r3, [pc, #380]	; (8000f10 <fsm_auto_horizontal+0x248>)
 8000d92:	605a      	str	r2, [r3, #4]

		if(timer7SEGCountRedhorizontal_flag == 1)
 8000d94:	4b5f      	ldr	r3, [pc, #380]	; (8000f14 <fsm_auto_horizontal+0x24c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	f040 808b 	bne.w	8000eb4 <fsm_auto_horizontal+0x1ec>
		{
			temp_red_yellow_green_auto_time_horizontal[0]--;
 8000d9e:	4b58      	ldr	r3, [pc, #352]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	4a56      	ldr	r2, [pc, #344]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000da6:	6013      	str	r3, [r2, #0]
			setTimer7SEGCountRedhorizontal(1000);
 8000da8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dac:	f000 ff48 	bl	8001c40 <setTimer7SEGCountRedhorizontal>
		}

		break;
 8000db0:	e080      	b.n	8000eb4 <fsm_auto_horizontal+0x1ec>
	}
	case AUTO_YELLOW:
	{
		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2104      	movs	r1, #4
 8000db6:	4854      	ldr	r0, [pc, #336]	; (8000f08 <fsm_auto_horizontal+0x240>)
 8000db8:	f001 fd05 	bl	80027c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_SET);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	2108      	movs	r1, #8
 8000dc0:	4851      	ldr	r0, [pc, #324]	; (8000f08 <fsm_auto_horizontal+0x240>)
 8000dc2:	f001 fd00 	bl	80027c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2110      	movs	r1, #16
 8000dca:	484f      	ldr	r0, [pc, #316]	; (8000f08 <fsm_auto_horizontal+0x240>)
 8000dcc:	f001 fcfb 	bl	80027c6 <HAL_GPIO_WritePin>

		if(temp_red_yellow_green_auto_time_horizontal[1] < 0)
 8000dd0:	4b4b      	ldr	r3, [pc, #300]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	da02      	bge.n	8000dde <fsm_auto_horizontal+0x116>
		{
			status_horizontal = INIT_AUTO;
 8000dd8:	4b47      	ldr	r3, [pc, #284]	; (8000ef8 <fsm_auto_horizontal+0x230>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
		}

		buffer_7SEG_horizontal[0] = temp_red_yellow_green_auto_time_horizontal[1] / 10;
 8000dde:	4b48      	ldr	r3, [pc, #288]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	4a4a      	ldr	r2, [pc, #296]	; (8000f0c <fsm_auto_horizontal+0x244>)
 8000de4:	fb82 1203 	smull	r1, r2, r2, r3
 8000de8:	1092      	asrs	r2, r2, #2
 8000dea:	17db      	asrs	r3, r3, #31
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	4a48      	ldr	r2, [pc, #288]	; (8000f10 <fsm_auto_horizontal+0x248>)
 8000df0:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = temp_red_yellow_green_auto_time_horizontal[1] % 10;
 8000df2:	4b43      	ldr	r3, [pc, #268]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000df4:	6859      	ldr	r1, [r3, #4]
 8000df6:	4b45      	ldr	r3, [pc, #276]	; (8000f0c <fsm_auto_horizontal+0x244>)
 8000df8:	fb83 2301 	smull	r2, r3, r3, r1
 8000dfc:	109a      	asrs	r2, r3, #2
 8000dfe:	17cb      	asrs	r3, r1, #31
 8000e00:	1ad2      	subs	r2, r2, r3
 8000e02:	4613      	mov	r3, r2
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	4413      	add	r3, r2
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	1aca      	subs	r2, r1, r3
 8000e0c:	4b40      	ldr	r3, [pc, #256]	; (8000f10 <fsm_auto_horizontal+0x248>)
 8000e0e:	605a      	str	r2, [r3, #4]

		if(timer7SEGCountYellowhorizontal_flag == 1)
 8000e10:	4b41      	ldr	r3, [pc, #260]	; (8000f18 <fsm_auto_horizontal+0x250>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d14f      	bne.n	8000eb8 <fsm_auto_horizontal+0x1f0>
		{
			temp_red_yellow_green_auto_time_horizontal[1]--;
 8000e18:	4b39      	ldr	r3, [pc, #228]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	4a38      	ldr	r2, [pc, #224]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000e20:	6053      	str	r3, [r2, #4]
			setTimer7SEGCountYellowhorizontal(1000);
 8000e22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e26:	f000 ff25 	bl	8001c74 <setTimer7SEGCountYellowhorizontal>
		}

		break;
 8000e2a:	e045      	b.n	8000eb8 <fsm_auto_horizontal+0x1f0>
	}
	case AUTO_GREEN:
	{
		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2104      	movs	r1, #4
 8000e30:	4835      	ldr	r0, [pc, #212]	; (8000f08 <fsm_auto_horizontal+0x240>)
 8000e32:	f001 fcc8 	bl	80027c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2108      	movs	r1, #8
 8000e3a:	4833      	ldr	r0, [pc, #204]	; (8000f08 <fsm_auto_horizontal+0x240>)
 8000e3c:	f001 fcc3 	bl	80027c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_SET);
 8000e40:	2201      	movs	r2, #1
 8000e42:	2110      	movs	r1, #16
 8000e44:	4830      	ldr	r0, [pc, #192]	; (8000f08 <fsm_auto_horizontal+0x240>)
 8000e46:	f001 fcbe 	bl	80027c6 <HAL_GPIO_WritePin>

		if(temp_red_yellow_green_auto_time_horizontal[2] < 0)
 8000e4a:	4b2d      	ldr	r3, [pc, #180]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	da09      	bge.n	8000e66 <fsm_auto_horizontal+0x19e>
		{
			setTimer7SEGCountYellowhorizontal(1000);
 8000e52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e56:	f000 ff0d 	bl	8001c74 <setTimer7SEGCountYellowhorizontal>
			num_horizontal = 1;
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <fsm_auto_horizontal+0x23c>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	601a      	str	r2, [r3, #0]
			status_horizontal = AUTO_YELLOW;
 8000e60:	4b25      	ldr	r3, [pc, #148]	; (8000ef8 <fsm_auto_horizontal+0x230>)
 8000e62:	2202      	movs	r2, #2
 8000e64:	601a      	str	r2, [r3, #0]
		}

		buffer_7SEG_horizontal[0] = temp_red_yellow_green_auto_time_horizontal[2] / 10;
 8000e66:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	4a28      	ldr	r2, [pc, #160]	; (8000f0c <fsm_auto_horizontal+0x244>)
 8000e6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e70:	1092      	asrs	r2, r2, #2
 8000e72:	17db      	asrs	r3, r3, #31
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	4a26      	ldr	r2, [pc, #152]	; (8000f10 <fsm_auto_horizontal+0x248>)
 8000e78:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = temp_red_yellow_green_auto_time_horizontal[2] % 10;
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000e7c:	6899      	ldr	r1, [r3, #8]
 8000e7e:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <fsm_auto_horizontal+0x244>)
 8000e80:	fb83 2301 	smull	r2, r3, r3, r1
 8000e84:	109a      	asrs	r2, r3, #2
 8000e86:	17cb      	asrs	r3, r1, #31
 8000e88:	1ad2      	subs	r2, r2, r3
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4413      	add	r3, r2
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	1aca      	subs	r2, r1, r3
 8000e94:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <fsm_auto_horizontal+0x248>)
 8000e96:	605a      	str	r2, [r3, #4]

		if(timer7SEGCountGreenhorizontal_flag == 1)
 8000e98:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <fsm_auto_horizontal+0x254>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d10d      	bne.n	8000ebc <fsm_auto_horizontal+0x1f4>
		{
			temp_red_yellow_green_auto_time_horizontal[2]--;
 8000ea0:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	4a16      	ldr	r2, [pc, #88]	; (8000f00 <fsm_auto_horizontal+0x238>)
 8000ea8:	6093      	str	r3, [r2, #8]
			setTimer7SEGCountGreenhorizontal(1000);
 8000eaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eae:	f000 fefb 	bl	8001ca8 <setTimer7SEGCountGreenhorizontal>
		}

		break;
 8000eb2:	e003      	b.n	8000ebc <fsm_auto_horizontal+0x1f4>
		break;
 8000eb4:	bf00      	nop
 8000eb6:	e002      	b.n	8000ebe <fsm_auto_horizontal+0x1f6>
		break;
 8000eb8:	bf00      	nop
 8000eba:	e000      	b.n	8000ebe <fsm_auto_horizontal+0x1f6>
		break;
 8000ebc:	bf00      	nop
	}
	}

	if(timerENhorizontal_flag == 1)
 8000ebe:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <fsm_auto_horizontal+0x258>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d114      	bne.n	8000ef0 <fsm_auto_horizontal+0x228>
	{
		if(num_horizontal > 1)
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <fsm_auto_horizontal+0x23c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	dd02      	ble.n	8000ed4 <fsm_auto_horizontal+0x20c>
		{
			num_horizontal = 0;
 8000ece:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <fsm_auto_horizontal+0x23c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
		}

		display7SEGBufferhorizontal(num_horizontal);
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <fsm_auto_horizontal+0x23c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fcef 	bl	80008bc <display7SEGBufferhorizontal>

		num_horizontal++;
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <fsm_auto_horizontal+0x23c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <fsm_auto_horizontal+0x23c>)
 8000ee6:	6013      	str	r3, [r2, #0]
		setTimerENhorizontal(500);
 8000ee8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eec:	f000 fe74 	bl	8001bd8 <setTimerENhorizontal>
	}

}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	200000bc 	.word	0x200000bc
 8000efc:	20000048 	.word	0x20000048
 8000f00:	200000b0 	.word	0x200000b0
 8000f04:	20000054 	.word	0x20000054
 8000f08:	40010800 	.word	0x40010800
 8000f0c:	66666667 	.word	0x66666667
 8000f10:	20000090 	.word	0x20000090
 8000f14:	20000100 	.word	0x20000100
 8000f18:	20000108 	.word	0x20000108
 8000f1c:	20000110 	.word	0x20000110
 8000f20:	200000f0 	.word	0x200000f0

08000f24 <fsm_auto_vertical>:

void fsm_auto_vertical()
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
	if(timerENvertical_flag == 1)
 8000f2a:	4b8e      	ldr	r3, [pc, #568]	; (8001164 <fsm_auto_vertical+0x240>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d114      	bne.n	8000f5c <fsm_auto_vertical+0x38>
	{
		if(num_vertical > 1)
 8000f32:	4b8d      	ldr	r3, [pc, #564]	; (8001168 <fsm_auto_vertical+0x244>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	dd02      	ble.n	8000f40 <fsm_auto_vertical+0x1c>
		{
			num_vertical = 0;
 8000f3a:	4b8b      	ldr	r3, [pc, #556]	; (8001168 <fsm_auto_vertical+0x244>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
		}

		display7SEGBuffervertical(num_vertical);
 8000f40:	4b89      	ldr	r3, [pc, #548]	; (8001168 <fsm_auto_vertical+0x244>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fc81 	bl	800084c <display7SEGBuffervertical>

		num_vertical++;
 8000f4a:	4b87      	ldr	r3, [pc, #540]	; (8001168 <fsm_auto_vertical+0x244>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	4a85      	ldr	r2, [pc, #532]	; (8001168 <fsm_auto_vertical+0x244>)
 8000f52:	6013      	str	r3, [r2, #0]
		setTimerENvertical(500);
 8000f54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f58:	f000 fe58 	bl	8001c0c <setTimerENvertical>
	}

	switch(status_vertical)
 8000f5c:	4b83      	ldr	r3, [pc, #524]	; (800116c <fsm_auto_vertical+0x248>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b03      	cmp	r3, #3
 8000f62:	f200 80fb 	bhi.w	800115c <fsm_auto_vertical+0x238>
 8000f66:	a201      	add	r2, pc, #4	; (adr r2, 8000f6c <fsm_auto_vertical+0x48>)
 8000f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f6c:	08000f7d 	.word	0x08000f7d
 8000f70:	08000fb5 	.word	0x08000fb5
 8000f74:	08001037 	.word	0x08001037
 8000f78:	080010c5 	.word	0x080010c5
	{
	case INIT_AUTO:
	{
		for(int i = 0; i < 3; i++)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	e00a      	b.n	8000f98 <fsm_auto_vertical+0x74>
		{
			temp_red_yellow_green_auto_time_vertical[i] = red_yellow_green_auto_time_vertical[i];
 8000f82:	4a7b      	ldr	r2, [pc, #492]	; (8001170 <fsm_auto_vertical+0x24c>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f8a:	497a      	ldr	r1, [pc, #488]	; (8001174 <fsm_auto_vertical+0x250>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < 3; i++)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3301      	adds	r3, #1
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	ddf1      	ble.n	8000f82 <fsm_auto_vertical+0x5e>
		}

		setTimer7SEGCountGreenvertical(1000);
 8000f9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fa2:	f000 fecf 	bl	8001d44 <setTimer7SEGCountGreenvertical>
		num_vertical = 1;
 8000fa6:	4b70      	ldr	r3, [pc, #448]	; (8001168 <fsm_auto_vertical+0x244>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	601a      	str	r2, [r3, #0]
		status_vertical = AUTO_GREEN;
 8000fac:	4b6f      	ldr	r3, [pc, #444]	; (800116c <fsm_auto_vertical+0x248>)
 8000fae:	2203      	movs	r2, #3
 8000fb0:	601a      	str	r2, [r3, #0]
		break;
 8000fb2:	e0d3      	b.n	800115c <fsm_auto_vertical+0x238>
	}
	case AUTO_RED:
	{
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fba:	486f      	ldr	r0, [pc, #444]	; (8001178 <fsm_auto_vertical+0x254>)
 8000fbc:	f001 fc03 	bl	80027c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fc6:	486c      	ldr	r0, [pc, #432]	; (8001178 <fsm_auto_vertical+0x254>)
 8000fc8:	f001 fbfd 	bl	80027c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd2:	4869      	ldr	r0, [pc, #420]	; (8001178 <fsm_auto_vertical+0x254>)
 8000fd4:	f001 fbf7 	bl	80027c6 <HAL_GPIO_WritePin>

		if(temp_red_yellow_green_auto_time_vertical[0] < 0)
 8000fd8:	4b66      	ldr	r3, [pc, #408]	; (8001174 <fsm_auto_vertical+0x250>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	da02      	bge.n	8000fe6 <fsm_auto_vertical+0xc2>
		{
			status_vertical = INIT_AUTO;
 8000fe0:	4b62      	ldr	r3, [pc, #392]	; (800116c <fsm_auto_vertical+0x248>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
		}

		buffer_7SEG_vertical[0] = temp_red_yellow_green_auto_time_vertical[0] / 10;
 8000fe6:	4b63      	ldr	r3, [pc, #396]	; (8001174 <fsm_auto_vertical+0x250>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a64      	ldr	r2, [pc, #400]	; (800117c <fsm_auto_vertical+0x258>)
 8000fec:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff0:	1092      	asrs	r2, r2, #2
 8000ff2:	17db      	asrs	r3, r3, #31
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	4a62      	ldr	r2, [pc, #392]	; (8001180 <fsm_auto_vertical+0x25c>)
 8000ff8:	6013      	str	r3, [r2, #0]
		buffer_7SEG_vertical[1] = temp_red_yellow_green_auto_time_vertical[0] % 10;
 8000ffa:	4b5e      	ldr	r3, [pc, #376]	; (8001174 <fsm_auto_vertical+0x250>)
 8000ffc:	6819      	ldr	r1, [r3, #0]
 8000ffe:	4b5f      	ldr	r3, [pc, #380]	; (800117c <fsm_auto_vertical+0x258>)
 8001000:	fb83 2301 	smull	r2, r3, r3, r1
 8001004:	109a      	asrs	r2, r3, #2
 8001006:	17cb      	asrs	r3, r1, #31
 8001008:	1ad2      	subs	r2, r2, r3
 800100a:	4613      	mov	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	1aca      	subs	r2, r1, r3
 8001014:	4b5a      	ldr	r3, [pc, #360]	; (8001180 <fsm_auto_vertical+0x25c>)
 8001016:	605a      	str	r2, [r3, #4]


		if(timer7SEGCountRedvertical_flag == 1)
 8001018:	4b5a      	ldr	r3, [pc, #360]	; (8001184 <fsm_auto_vertical+0x260>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b01      	cmp	r3, #1
 800101e:	f040 8098 	bne.w	8001152 <fsm_auto_vertical+0x22e>
		{
			temp_red_yellow_green_auto_time_vertical[0]--;
 8001022:	4b54      	ldr	r3, [pc, #336]	; (8001174 <fsm_auto_vertical+0x250>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	3b01      	subs	r3, #1
 8001028:	4a52      	ldr	r2, [pc, #328]	; (8001174 <fsm_auto_vertical+0x250>)
 800102a:	6013      	str	r3, [r2, #0]
			setTimer7SEGCountRedvertical(1000);
 800102c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001030:	f000 fe54 	bl	8001cdc <setTimer7SEGCountRedvertical>
		}

		break;
 8001034:	e08d      	b.n	8001152 <fsm_auto_vertical+0x22e>
	}
	case AUTO_YELLOW:
	{
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800103c:	484e      	ldr	r0, [pc, #312]	; (8001178 <fsm_auto_vertical+0x254>)
 800103e:	f001 fbc2 	bl	80027c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001048:	484b      	ldr	r0, [pc, #300]	; (8001178 <fsm_auto_vertical+0x254>)
 800104a:	f001 fbbc 	bl	80027c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001054:	4848      	ldr	r0, [pc, #288]	; (8001178 <fsm_auto_vertical+0x254>)
 8001056:	f001 fbb6 	bl	80027c6 <HAL_GPIO_WritePin>

		if(temp_red_yellow_green_auto_time_vertical[1] < 0)
 800105a:	4b46      	ldr	r3, [pc, #280]	; (8001174 <fsm_auto_vertical+0x250>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	da09      	bge.n	8001076 <fsm_auto_vertical+0x152>
		{
			setTimer7SEGCountRedvertical(1000);
 8001062:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001066:	f000 fe39 	bl	8001cdc <setTimer7SEGCountRedvertical>
			num_vertical = 1;
 800106a:	4b3f      	ldr	r3, [pc, #252]	; (8001168 <fsm_auto_vertical+0x244>)
 800106c:	2201      	movs	r2, #1
 800106e:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_RED;
 8001070:	4b3e      	ldr	r3, [pc, #248]	; (800116c <fsm_auto_vertical+0x248>)
 8001072:	2201      	movs	r2, #1
 8001074:	601a      	str	r2, [r3, #0]
		}

		buffer_7SEG_vertical[0] = temp_red_yellow_green_auto_time_vertical[1] / 10;
 8001076:	4b3f      	ldr	r3, [pc, #252]	; (8001174 <fsm_auto_vertical+0x250>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	4a40      	ldr	r2, [pc, #256]	; (800117c <fsm_auto_vertical+0x258>)
 800107c:	fb82 1203 	smull	r1, r2, r2, r3
 8001080:	1092      	asrs	r2, r2, #2
 8001082:	17db      	asrs	r3, r3, #31
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	4a3e      	ldr	r2, [pc, #248]	; (8001180 <fsm_auto_vertical+0x25c>)
 8001088:	6013      	str	r3, [r2, #0]
		buffer_7SEG_vertical[1] = temp_red_yellow_green_auto_time_vertical[1] % 10;
 800108a:	4b3a      	ldr	r3, [pc, #232]	; (8001174 <fsm_auto_vertical+0x250>)
 800108c:	6859      	ldr	r1, [r3, #4]
 800108e:	4b3b      	ldr	r3, [pc, #236]	; (800117c <fsm_auto_vertical+0x258>)
 8001090:	fb83 2301 	smull	r2, r3, r3, r1
 8001094:	109a      	asrs	r2, r3, #2
 8001096:	17cb      	asrs	r3, r1, #31
 8001098:	1ad2      	subs	r2, r2, r3
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	1aca      	subs	r2, r1, r3
 80010a4:	4b36      	ldr	r3, [pc, #216]	; (8001180 <fsm_auto_vertical+0x25c>)
 80010a6:	605a      	str	r2, [r3, #4]

		if(timer7SEGCountYellowvertical_flag == 1)
 80010a8:	4b37      	ldr	r3, [pc, #220]	; (8001188 <fsm_auto_vertical+0x264>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d152      	bne.n	8001156 <fsm_auto_vertical+0x232>
		{
			temp_red_yellow_green_auto_time_vertical[1]--;
 80010b0:	4b30      	ldr	r3, [pc, #192]	; (8001174 <fsm_auto_vertical+0x250>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	4a2f      	ldr	r2, [pc, #188]	; (8001174 <fsm_auto_vertical+0x250>)
 80010b8:	6053      	str	r3, [r2, #4]
			setTimer7SEGCountYellowvertical(1000);
 80010ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010be:	f000 fe27 	bl	8001d10 <setTimer7SEGCountYellowvertical>
		}

		break;
 80010c2:	e048      	b.n	8001156 <fsm_auto_vertical+0x232>
	}
	case AUTO_GREEN:
	{
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ca:	482b      	ldr	r0, [pc, #172]	; (8001178 <fsm_auto_vertical+0x254>)
 80010cc:	f001 fb7b 	bl	80027c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010d6:	4828      	ldr	r0, [pc, #160]	; (8001178 <fsm_auto_vertical+0x254>)
 80010d8:	f001 fb75 	bl	80027c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010e2:	4825      	ldr	r0, [pc, #148]	; (8001178 <fsm_auto_vertical+0x254>)
 80010e4:	f001 fb6f 	bl	80027c6 <HAL_GPIO_WritePin>

		if(temp_red_yellow_green_auto_time_vertical[2] < 0)
 80010e8:	4b22      	ldr	r3, [pc, #136]	; (8001174 <fsm_auto_vertical+0x250>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	da09      	bge.n	8001104 <fsm_auto_vertical+0x1e0>
		{
			setTimer7SEGCountYellowvertical(1000);
 80010f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f4:	f000 fe0c 	bl	8001d10 <setTimer7SEGCountYellowvertical>
			num_vertical = 1;
 80010f8:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <fsm_auto_vertical+0x244>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_YELLOW;
 80010fe:	4b1b      	ldr	r3, [pc, #108]	; (800116c <fsm_auto_vertical+0x248>)
 8001100:	2202      	movs	r2, #2
 8001102:	601a      	str	r2, [r3, #0]
		}

		buffer_7SEG_vertical[0] = temp_red_yellow_green_auto_time_vertical[2] / 10;
 8001104:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <fsm_auto_vertical+0x250>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	4a1c      	ldr	r2, [pc, #112]	; (800117c <fsm_auto_vertical+0x258>)
 800110a:	fb82 1203 	smull	r1, r2, r2, r3
 800110e:	1092      	asrs	r2, r2, #2
 8001110:	17db      	asrs	r3, r3, #31
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	4a1a      	ldr	r2, [pc, #104]	; (8001180 <fsm_auto_vertical+0x25c>)
 8001116:	6013      	str	r3, [r2, #0]
		buffer_7SEG_vertical[1] = temp_red_yellow_green_auto_time_vertical[2] % 10;
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <fsm_auto_vertical+0x250>)
 800111a:	6899      	ldr	r1, [r3, #8]
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <fsm_auto_vertical+0x258>)
 800111e:	fb83 2301 	smull	r2, r3, r3, r1
 8001122:	109a      	asrs	r2, r3, #2
 8001124:	17cb      	asrs	r3, r1, #31
 8001126:	1ad2      	subs	r2, r2, r3
 8001128:	4613      	mov	r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	1aca      	subs	r2, r1, r3
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <fsm_auto_vertical+0x25c>)
 8001134:	605a      	str	r2, [r3, #4]


		if(timer7SEGCountGreenvertical_flag == 1)
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <fsm_auto_vertical+0x268>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d10d      	bne.n	800115a <fsm_auto_vertical+0x236>
		{
			temp_red_yellow_green_auto_time_vertical[2]--;
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <fsm_auto_vertical+0x250>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	3b01      	subs	r3, #1
 8001144:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <fsm_auto_vertical+0x250>)
 8001146:	6093      	str	r3, [r2, #8]
			setTimer7SEGCountGreenvertical(1000);
 8001148:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800114c:	f000 fdfa 	bl	8001d44 <setTimer7SEGCountGreenvertical>
		}

		break;
 8001150:	e003      	b.n	800115a <fsm_auto_vertical+0x236>
		break;
 8001152:	bf00      	nop
 8001154:	e002      	b.n	800115c <fsm_auto_vertical+0x238>
		break;
 8001156:	bf00      	nop
 8001158:	e000      	b.n	800115c <fsm_auto_vertical+0x238>
		break;
 800115a:	bf00      	nop
	}
	}

}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200000f8 	.word	0x200000f8
 8001168:	20000058 	.word	0x20000058
 800116c:	200000c0 	.word	0x200000c0
 8001170:	2000003c 	.word	0x2000003c
 8001174:	200000a4 	.word	0x200000a4
 8001178:	40010c00 	.word	0x40010c00
 800117c:	66666667 	.word	0x66666667
 8001180:	20000088 	.word	0x20000088
 8001184:	20000118 	.word	0x20000118
 8001188:	20000120 	.word	0x20000120
 800118c:	20000128 	.word	0x20000128

08001190 <fsm_manual_all>:
int check_button2_red = 0;
int check_button2_yellow = 0;
int check_button2_green = 0;

void fsm_manual_all()
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	change_to_manual_mode();
 8001194:	f000 f804 	bl	80011a0 <change_to_manual_mode>

	fsm_manual();
 8001198:	f000 f81e 	bl	80011d8 <fsm_manual>

}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}

080011a0 <change_to_manual_mode>:

void change_to_manual_mode()
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0

	if(isButton1Pressed() == 1 && status_horizontal < INIT_MANUAL && status_vertical < INIT_MANUAL)
 80011a4:	f7ff fbc2 	bl	800092c <isButton1Pressed>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d10d      	bne.n	80011ca <change_to_manual_mode+0x2a>
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <change_to_manual_mode+0x30>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b03      	cmp	r3, #3
 80011b4:	dc09      	bgt.n	80011ca <change_to_manual_mode+0x2a>
 80011b6:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <change_to_manual_mode+0x34>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	dc05      	bgt.n	80011ca <change_to_manual_mode+0x2a>
	{
		status_horizontal = INIT_MANUAL;
 80011be:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <change_to_manual_mode+0x30>)
 80011c0:	2204      	movs	r2, #4
 80011c2:	601a      	str	r2, [r3, #0]
		status_vertical = INIT_MANUAL;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <change_to_manual_mode+0x34>)
 80011c6:	2204      	movs	r2, #4
 80011c8:	601a      	str	r2, [r3, #0]
	}

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200000bc 	.word	0x200000bc
 80011d4:	200000c0 	.word	0x200000c0

080011d8 <fsm_manual>:

void fsm_manual()
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
	switch(status_horizontal)
 80011de:	4b72      	ldr	r3, [pc, #456]	; (80013a8 <fsm_manual+0x1d0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	3b04      	subs	r3, #4
 80011e4:	2b03      	cmp	r3, #3
 80011e6:	f200 8395 	bhi.w	8001914 <fsm_manual+0x73c>
 80011ea:	a201      	add	r2, pc, #4	; (adr r2, 80011f0 <fsm_manual+0x18>)
 80011ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f0:	08001201 	.word	0x08001201
 80011f4:	08001265 	.word	0x08001265
 80011f8:	080013f1 	.word	0x080013f1
 80011fc:	080015d9 	.word	0x080015d9
	{
	case INIT_MANUAL:
	{
		for(int i = 0; i < 3; i++)
 8001200:	2300      	movs	r3, #0
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	e00a      	b.n	800121c <fsm_manual+0x44>
		{
			red_yellow_green_manual_time[i] = red_yellow_green_auto_time_horizontal[i];
 8001206:	4a69      	ldr	r2, [pc, #420]	; (80013ac <fsm_manual+0x1d4>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800120e:	4968      	ldr	r1, [pc, #416]	; (80013b0 <fsm_manual+0x1d8>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < 3; i++)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3301      	adds	r3, #1
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b02      	cmp	r3, #2
 8001220:	ddf1      	ble.n	8001206 <fsm_manual+0x2e>
		}

		setTimerAuto(10000);
 8001222:	f242 7010 	movw	r0, #10000	; 0x2710
 8001226:	f000 fda7 	bl	8001d78 <setTimerAuto>
		setTimerBlinkingRed(500);
 800122a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800122e:	f000 fdbd 	bl	8001dac <setTimerBlinkingRed>

		check_button2_red = 0;
 8001232:	4b60      	ldr	r3, [pc, #384]	; (80013b4 <fsm_manual+0x1dc>)
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
		check_button2_yellow = 0;
 8001238:	4b5f      	ldr	r3, [pc, #380]	; (80013b8 <fsm_manual+0x1e0>)
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
		check_button2_green = 0;
 800123e:	4b5f      	ldr	r3, [pc, #380]	; (80013bc <fsm_manual+0x1e4>)
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]

		check_sync_red = 0;
 8001244:	4b5e      	ldr	r3, [pc, #376]	; (80013c0 <fsm_manual+0x1e8>)
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
		check_sync_yellow = 0;
 800124a:	4b5e      	ldr	r3, [pc, #376]	; (80013c4 <fsm_manual+0x1ec>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
		check_sync_green = 0;
 8001250:	4b5d      	ldr	r3, [pc, #372]	; (80013c8 <fsm_manual+0x1f0>)
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]

		num_horizontal = 1;
 8001256:	4b5d      	ldr	r3, [pc, #372]	; (80013cc <fsm_manual+0x1f4>)
 8001258:	2201      	movs	r2, #1
 800125a:	601a      	str	r2, [r3, #0]
		status_horizontal = MANUAL_RED;
 800125c:	4b52      	ldr	r3, [pc, #328]	; (80013a8 <fsm_manual+0x1d0>)
 800125e:	2205      	movs	r2, #5
 8001260:	601a      	str	r2, [r3, #0]
		break;
 8001262:	e357      	b.n	8001914 <fsm_manual+0x73c>
	}
	case MANUAL_RED:
	{

		if(check_sync_red == 0)
 8001264:	4b56      	ldr	r3, [pc, #344]	; (80013c0 <fsm_manual+0x1e8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d10d      	bne.n	8001288 <fsm_manual+0xb0>
		{
			check_sync_red = 1;
 800126c:	4b54      	ldr	r3, [pc, #336]	; (80013c0 <fsm_manual+0x1e8>)
 800126e:	2201      	movs	r2, #1
 8001270:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(yellow1_GPIO_Port, red1_Pin, GPIO_PIN_SET);
 8001272:	2201      	movs	r2, #1
 8001274:	2104      	movs	r1, #4
 8001276:	4856      	ldr	r0, [pc, #344]	; (80013d0 <fsm_manual+0x1f8>)
 8001278:	f001 faa5 	bl	80027c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 800127c:	2201      	movs	r2, #1
 800127e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001282:	4854      	ldr	r0, [pc, #336]	; (80013d4 <fsm_manual+0x1fc>)
 8001284:	f001 fa9f 	bl	80027c6 <HAL_GPIO_WritePin>
		}

		if(timerBlinkingRed_flag == 1)
 8001288:	4b53      	ldr	r3, [pc, #332]	; (80013d8 <fsm_manual+0x200>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d10c      	bne.n	80012aa <fsm_manual+0xd2>
		{
			HAL_GPIO_TogglePin(red1_GPIO_Port, red1_Pin);
 8001290:	2104      	movs	r1, #4
 8001292:	484f      	ldr	r0, [pc, #316]	; (80013d0 <fsm_manual+0x1f8>)
 8001294:	f001 faaf 	bl	80027f6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(red2_GPIO_Port, red2_Pin);
 8001298:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800129c:	484d      	ldr	r0, [pc, #308]	; (80013d4 <fsm_manual+0x1fc>)
 800129e:	f001 faaa 	bl	80027f6 <HAL_GPIO_TogglePin>

			setTimerBlinkingRed(500);
 80012a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012a6:	f000 fd81 	bl	8001dac <setTimerBlinkingRed>
		}

		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2108      	movs	r1, #8
 80012ae:	4848      	ldr	r0, [pc, #288]	; (80013d0 <fsm_manual+0x1f8>)
 80012b0:	f001 fa89 	bl	80027c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012ba:	4846      	ldr	r0, [pc, #280]	; (80013d4 <fsm_manual+0x1fc>)
 80012bc:	f001 fa83 	bl	80027c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2110      	movs	r1, #16
 80012c4:	4842      	ldr	r0, [pc, #264]	; (80013d0 <fsm_manual+0x1f8>)
 80012c6:	f001 fa7e 	bl	80027c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012d0:	4840      	ldr	r0, [pc, #256]	; (80013d4 <fsm_manual+0x1fc>)
 80012d2:	f001 fa78 	bl	80027c6 <HAL_GPIO_WritePin>

		buffer_7SEG_horizontal[0] = red_yellow_green_manual_time[0] / 10;
 80012d6:	4b36      	ldr	r3, [pc, #216]	; (80013b0 <fsm_manual+0x1d8>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a40      	ldr	r2, [pc, #256]	; (80013dc <fsm_manual+0x204>)
 80012dc:	fb82 1203 	smull	r1, r2, r2, r3
 80012e0:	1092      	asrs	r2, r2, #2
 80012e2:	17db      	asrs	r3, r3, #31
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	4a3e      	ldr	r2, [pc, #248]	; (80013e0 <fsm_manual+0x208>)
 80012e8:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = red_yellow_green_manual_time[0] % 10;
 80012ea:	4b31      	ldr	r3, [pc, #196]	; (80013b0 <fsm_manual+0x1d8>)
 80012ec:	6819      	ldr	r1, [r3, #0]
 80012ee:	4b3b      	ldr	r3, [pc, #236]	; (80013dc <fsm_manual+0x204>)
 80012f0:	fb83 2301 	smull	r2, r3, r3, r1
 80012f4:	109a      	asrs	r2, r3, #2
 80012f6:	17cb      	asrs	r3, r1, #31
 80012f8:	1ad2      	subs	r2, r2, r3
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	1aca      	subs	r2, r1, r3
 8001304:	4b36      	ldr	r3, [pc, #216]	; (80013e0 <fsm_manual+0x208>)
 8001306:	605a      	str	r2, [r3, #4]

		buffer_7SEG_vertical[0] = 0;
 8001308:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <fsm_manual+0x20c>)
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
		buffer_7SEG_vertical[1] = 2;
 800130e:	4b35      	ldr	r3, [pc, #212]	; (80013e4 <fsm_manual+0x20c>)
 8001310:	2202      	movs	r2, #2
 8001312:	605a      	str	r2, [r3, #4]

		if(timerAuto_flag == 1)
 8001314:	4b34      	ldr	r3, [pc, #208]	; (80013e8 <fsm_manual+0x210>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d105      	bne.n	8001328 <fsm_manual+0x150>
		{
			status_horizontal = INIT_AUTO;
 800131c:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <fsm_manual+0x1d0>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
			status_vertical = INIT_AUTO;
 8001322:	4b32      	ldr	r3, [pc, #200]	; (80013ec <fsm_manual+0x214>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
		}

		if(isButton1Pressed() == 1)
 8001328:	f7ff fb00 	bl	800092c <isButton1Pressed>
 800132c:	4603      	mov	r3, r0
 800132e:	2b01      	cmp	r3, #1
 8001330:	d10d      	bne.n	800134e <fsm_manual+0x176>
		{
			status_horizontal = MANUAL_YELLOW;
 8001332:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <fsm_manual+0x1d0>)
 8001334:	2206      	movs	r2, #6
 8001336:	601a      	str	r2, [r3, #0]
			status_vertical = MANUAL_YELLOW;
 8001338:	4b2c      	ldr	r3, [pc, #176]	; (80013ec <fsm_manual+0x214>)
 800133a:	2206      	movs	r2, #6
 800133c:	601a      	str	r2, [r3, #0]
			setTimerAuto(10000);
 800133e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001342:	f000 fd19 	bl	8001d78 <setTimerAuto>
			setTimerBlinkingYellow(500);
 8001346:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800134a:	f000 fd49 	bl	8001de0 <setTimerBlinkingYellow>
		}

		if(isButton2Pressed() == 1)
 800134e:	f7ff faff 	bl	8000950 <isButton2Pressed>
 8001352:	4603      	mov	r3, r0
 8001354:	2b01      	cmp	r3, #1
 8001356:	d117      	bne.n	8001388 <fsm_manual+0x1b0>
		{
			check_button2_red = 1;
 8001358:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <fsm_manual+0x1dc>)
 800135a:	2201      	movs	r2, #1
 800135c:	601a      	str	r2, [r3, #0]

			if(red_yellow_green_manual_time[0] <= 99 && red_yellow_green_manual_time[0] >= 1)
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <fsm_manual+0x1d8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b63      	cmp	r3, #99	; 0x63
 8001364:	dc09      	bgt.n	800137a <fsm_manual+0x1a2>
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <fsm_manual+0x1d8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	dd05      	ble.n	800137a <fsm_manual+0x1a2>
			{
				red_yellow_green_manual_time[0]++;
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <fsm_manual+0x1d8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	3301      	adds	r3, #1
 8001374:	4a0e      	ldr	r2, [pc, #56]	; (80013b0 <fsm_manual+0x1d8>)
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	e002      	b.n	8001380 <fsm_manual+0x1a8>
			}
			else
			{
				red_yellow_green_manual_time[0] = 1;
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <fsm_manual+0x1d8>)
 800137c:	2201      	movs	r2, #1
 800137e:	601a      	str	r2, [r3, #0]
			}
			setTimerAuto(10000);
 8001380:	f242 7010 	movw	r0, #10000	; 0x2710
 8001384:	f000 fcf8 	bl	8001d78 <setTimerAuto>
		}

		if(isButton3Pressed() == 1)
 8001388:	f7ff faf4 	bl	8000974 <isButton3Pressed>
 800138c:	4603      	mov	r3, r0
 800138e:	2b01      	cmp	r3, #1
 8001390:	f040 82bb 	bne.w	800190a <fsm_manual+0x732>
		{
			status_horizontal = INIT_AUTO;
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <fsm_manual+0x1d0>)
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
			status_vertical = INIT_AUTO;
 800139a:	4b14      	ldr	r3, [pc, #80]	; (80013ec <fsm_manual+0x214>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
			timerAuto_flag = 0;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <fsm_manual+0x210>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
		}

		break;
 80013a6:	e2b0      	b.n	800190a <fsm_manual+0x732>
 80013a8:	200000bc 	.word	0x200000bc
 80013ac:	20000048 	.word	0x20000048
 80013b0:	200000c4 	.word	0x200000c4
 80013b4:	200000dc 	.word	0x200000dc
 80013b8:	200000e0 	.word	0x200000e0
 80013bc:	200000e4 	.word	0x200000e4
 80013c0:	200000d0 	.word	0x200000d0
 80013c4:	200000d4 	.word	0x200000d4
 80013c8:	200000d8 	.word	0x200000d8
 80013cc:	20000054 	.word	0x20000054
 80013d0:	40010800 	.word	0x40010800
 80013d4:	40010c00 	.word	0x40010c00
 80013d8:	20000138 	.word	0x20000138
 80013dc:	66666667 	.word	0x66666667
 80013e0:	20000090 	.word	0x20000090
 80013e4:	20000088 	.word	0x20000088
 80013e8:	20000130 	.word	0x20000130
 80013ec:	200000c0 	.word	0x200000c0
	}
	case MANUAL_YELLOW:
	{

		if(check_sync_yellow == 0)
 80013f0:	4b6a      	ldr	r3, [pc, #424]	; (800159c <fsm_manual+0x3c4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d10d      	bne.n	8001414 <fsm_manual+0x23c>
		{
			check_sync_yellow = 1;
 80013f8:	4b68      	ldr	r3, [pc, #416]	; (800159c <fsm_manual+0x3c4>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_SET);
 80013fe:	2201      	movs	r2, #1
 8001400:	2108      	movs	r1, #8
 8001402:	4867      	ldr	r0, [pc, #412]	; (80015a0 <fsm_manual+0x3c8>)
 8001404:	f001 f9df 	bl	80027c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);
 8001408:	2201      	movs	r2, #1
 800140a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800140e:	4865      	ldr	r0, [pc, #404]	; (80015a4 <fsm_manual+0x3cc>)
 8001410:	f001 f9d9 	bl	80027c6 <HAL_GPIO_WritePin>
		}

		if(timerBlinkingYellow_flag == 1)
 8001414:	4b64      	ldr	r3, [pc, #400]	; (80015a8 <fsm_manual+0x3d0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d10c      	bne.n	8001436 <fsm_manual+0x25e>
		{
			HAL_GPIO_TogglePin(yellow1_GPIO_Port, yellow1_Pin);
 800141c:	2108      	movs	r1, #8
 800141e:	4860      	ldr	r0, [pc, #384]	; (80015a0 <fsm_manual+0x3c8>)
 8001420:	f001 f9e9 	bl	80027f6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(yellow2_GPIO_Port, yellow2_Pin);
 8001424:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001428:	485e      	ldr	r0, [pc, #376]	; (80015a4 <fsm_manual+0x3cc>)
 800142a:	f001 f9e4 	bl	80027f6 <HAL_GPIO_TogglePin>

			setTimerBlinkingYellow(500);
 800142e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001432:	f000 fcd5 	bl	8001de0 <setTimerBlinkingYellow>
		}

		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	2104      	movs	r1, #4
 800143a:	4859      	ldr	r0, [pc, #356]	; (80015a0 <fsm_manual+0x3c8>)
 800143c:	f001 f9c3 	bl	80027c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001446:	4857      	ldr	r0, [pc, #348]	; (80015a4 <fsm_manual+0x3cc>)
 8001448:	f001 f9bd 	bl	80027c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	2110      	movs	r1, #16
 8001450:	4853      	ldr	r0, [pc, #332]	; (80015a0 <fsm_manual+0x3c8>)
 8001452:	f001 f9b8 	bl	80027c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800145c:	4851      	ldr	r0, [pc, #324]	; (80015a4 <fsm_manual+0x3cc>)
 800145e:	f001 f9b2 	bl	80027c6 <HAL_GPIO_WritePin>

		buffer_7SEG_horizontal[0] = red_yellow_green_manual_time[1] / 10;
 8001462:	4b52      	ldr	r3, [pc, #328]	; (80015ac <fsm_manual+0x3d4>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	4a52      	ldr	r2, [pc, #328]	; (80015b0 <fsm_manual+0x3d8>)
 8001468:	fb82 1203 	smull	r1, r2, r2, r3
 800146c:	1092      	asrs	r2, r2, #2
 800146e:	17db      	asrs	r3, r3, #31
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	4a50      	ldr	r2, [pc, #320]	; (80015b4 <fsm_manual+0x3dc>)
 8001474:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = red_yellow_green_manual_time[1] % 10;
 8001476:	4b4d      	ldr	r3, [pc, #308]	; (80015ac <fsm_manual+0x3d4>)
 8001478:	6859      	ldr	r1, [r3, #4]
 800147a:	4b4d      	ldr	r3, [pc, #308]	; (80015b0 <fsm_manual+0x3d8>)
 800147c:	fb83 2301 	smull	r2, r3, r3, r1
 8001480:	109a      	asrs	r2, r3, #2
 8001482:	17cb      	asrs	r3, r1, #31
 8001484:	1ad2      	subs	r2, r2, r3
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	1aca      	subs	r2, r1, r3
 8001490:	4b48      	ldr	r3, [pc, #288]	; (80015b4 <fsm_manual+0x3dc>)
 8001492:	605a      	str	r2, [r3, #4]

		buffer_7SEG_vertical[0] = 0;
 8001494:	4b48      	ldr	r3, [pc, #288]	; (80015b8 <fsm_manual+0x3e0>)
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
		buffer_7SEG_vertical[1] = 3;
 800149a:	4b47      	ldr	r3, [pc, #284]	; (80015b8 <fsm_manual+0x3e0>)
 800149c:	2203      	movs	r2, #3
 800149e:	605a      	str	r2, [r3, #4]

		if(timerAuto_flag == 1)
 80014a0:	4b46      	ldr	r3, [pc, #280]	; (80015bc <fsm_manual+0x3e4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d105      	bne.n	80014b4 <fsm_manual+0x2dc>
		{
			status_horizontal = INIT_AUTO;
 80014a8:	4b45      	ldr	r3, [pc, #276]	; (80015c0 <fsm_manual+0x3e8>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
			status_vertical = INIT_AUTO;
 80014ae:	4b45      	ldr	r3, [pc, #276]	; (80015c4 <fsm_manual+0x3ec>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
		}

		if(isButton1Pressed() == 1)
 80014b4:	f7ff fa3a 	bl	800092c <isButton1Pressed>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d10d      	bne.n	80014da <fsm_manual+0x302>
		{
			status_horizontal = MANUAL_GREEN;
 80014be:	4b40      	ldr	r3, [pc, #256]	; (80015c0 <fsm_manual+0x3e8>)
 80014c0:	2207      	movs	r2, #7
 80014c2:	601a      	str	r2, [r3, #0]
			status_vertical = MANUAL_GREEN;
 80014c4:	4b3f      	ldr	r3, [pc, #252]	; (80015c4 <fsm_manual+0x3ec>)
 80014c6:	2207      	movs	r2, #7
 80014c8:	601a      	str	r2, [r3, #0]
			setTimerAuto(10000);
 80014ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80014ce:	f000 fc53 	bl	8001d78 <setTimerAuto>
			setTimerBlinkingGreen(500);
 80014d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014d6:	f000 fc9d 	bl	8001e14 <setTimerBlinkingGreen>
		}

		if(isButton2Pressed() == 1)
 80014da:	f7ff fa39 	bl	8000950 <isButton2Pressed>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d117      	bne.n	8001514 <fsm_manual+0x33c>
		{
			check_button2_yellow = 1;
 80014e4:	4b38      	ldr	r3, [pc, #224]	; (80015c8 <fsm_manual+0x3f0>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	601a      	str	r2, [r3, #0]

			if(red_yellow_green_manual_time[1] <= 99 && red_yellow_green_manual_time[1] >= 1)
 80014ea:	4b30      	ldr	r3, [pc, #192]	; (80015ac <fsm_manual+0x3d4>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b63      	cmp	r3, #99	; 0x63
 80014f0:	dc09      	bgt.n	8001506 <fsm_manual+0x32e>
 80014f2:	4b2e      	ldr	r3, [pc, #184]	; (80015ac <fsm_manual+0x3d4>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	dd05      	ble.n	8001506 <fsm_manual+0x32e>
			{
				red_yellow_green_manual_time[1]++;
 80014fa:	4b2c      	ldr	r3, [pc, #176]	; (80015ac <fsm_manual+0x3d4>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	3301      	adds	r3, #1
 8001500:	4a2a      	ldr	r2, [pc, #168]	; (80015ac <fsm_manual+0x3d4>)
 8001502:	6053      	str	r3, [r2, #4]
 8001504:	e002      	b.n	800150c <fsm_manual+0x334>
			}
			else
			{
				red_yellow_green_manual_time[1] = 1;
 8001506:	4b29      	ldr	r3, [pc, #164]	; (80015ac <fsm_manual+0x3d4>)
 8001508:	2201      	movs	r2, #1
 800150a:	605a      	str	r2, [r3, #4]
			}
			setTimerAuto(10000);
 800150c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001510:	f000 fc32 	bl	8001d78 <setTimerAuto>
		}

		if(isButton3Pressed() == 1)
 8001514:	f7ff fa2e 	bl	8000974 <isButton3Pressed>
 8001518:	4603      	mov	r3, r0
 800151a:	2b01      	cmp	r3, #1
 800151c:	f040 81f7 	bne.w	800190e <fsm_manual+0x736>
		{
			if(check_button2_red == 1 && check_button2_yellow == 1)
 8001520:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <fsm_manual+0x3f4>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d12e      	bne.n	8001586 <fsm_manual+0x3ae>
 8001528:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <fsm_manual+0x3f0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d12a      	bne.n	8001586 <fsm_manual+0x3ae>
			{
				red_yellow_green_manual_time[2] = red_yellow_green_manual_time[0] - red_yellow_green_manual_time[1];
 8001530:	4b1e      	ldr	r3, [pc, #120]	; (80015ac <fsm_manual+0x3d4>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <fsm_manual+0x3d4>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	4a1c      	ldr	r2, [pc, #112]	; (80015ac <fsm_manual+0x3d4>)
 800153c:	6093      	str	r3, [r2, #8]

				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 800153e:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <fsm_manual+0x3d4>)
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <fsm_manual+0x3d4>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	429a      	cmp	r2, r3
 8001548:	da1d      	bge.n	8001586 <fsm_manual+0x3ae>
				&& red_yellow_green_manual_time[1] < red_yellow_green_manual_time[0])
 800154a:	4b18      	ldr	r3, [pc, #96]	; (80015ac <fsm_manual+0x3d4>)
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	4b17      	ldr	r3, [pc, #92]	; (80015ac <fsm_manual+0x3d4>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	da17      	bge.n	8001586 <fsm_manual+0x3ae>
				{
					red_yellow_green_auto_time_horizontal[0] = red_yellow_green_manual_time[0];
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <fsm_manual+0x3d4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a1d      	ldr	r2, [pc, #116]	; (80015d0 <fsm_manual+0x3f8>)
 800155c:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_vertical[0] = red_yellow_green_manual_time[0];
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <fsm_manual+0x3d4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a1c      	ldr	r2, [pc, #112]	; (80015d4 <fsm_manual+0x3fc>)
 8001564:	6013      	str	r3, [r2, #0]

					red_yellow_green_auto_time_horizontal[1] = red_yellow_green_manual_time[1];
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <fsm_manual+0x3d4>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <fsm_manual+0x3f8>)
 800156c:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_vertical[1] = red_yellow_green_manual_time[1];
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <fsm_manual+0x3d4>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	4a18      	ldr	r2, [pc, #96]	; (80015d4 <fsm_manual+0x3fc>)
 8001574:	6053      	str	r3, [r2, #4]

					red_yellow_green_auto_time_horizontal[2] = red_yellow_green_manual_time[2];
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <fsm_manual+0x3d4>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	4a15      	ldr	r2, [pc, #84]	; (80015d0 <fsm_manual+0x3f8>)
 800157c:	6093      	str	r3, [r2, #8]
					red_yellow_green_auto_time_vertical[2] = red_yellow_green_manual_time[2];
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <fsm_manual+0x3d4>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <fsm_manual+0x3fc>)
 8001584:	6093      	str	r3, [r2, #8]
				}

			}

			status_horizontal = INIT_AUTO;
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <fsm_manual+0x3e8>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
			status_vertical = INIT_AUTO;
 800158c:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <fsm_manual+0x3ec>)
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
			timerAuto_flag = 0;
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <fsm_manual+0x3e4>)
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
		}

		break;
 8001598:	e1b9      	b.n	800190e <fsm_manual+0x736>
 800159a:	bf00      	nop
 800159c:	200000d4 	.word	0x200000d4
 80015a0:	40010800 	.word	0x40010800
 80015a4:	40010c00 	.word	0x40010c00
 80015a8:	20000140 	.word	0x20000140
 80015ac:	200000c4 	.word	0x200000c4
 80015b0:	66666667 	.word	0x66666667
 80015b4:	20000090 	.word	0x20000090
 80015b8:	20000088 	.word	0x20000088
 80015bc:	20000130 	.word	0x20000130
 80015c0:	200000bc 	.word	0x200000bc
 80015c4:	200000c0 	.word	0x200000c0
 80015c8:	200000e0 	.word	0x200000e0
 80015cc:	200000dc 	.word	0x200000dc
 80015d0:	20000048 	.word	0x20000048
 80015d4:	2000003c 	.word	0x2000003c
	}
	case MANUAL_GREEN:
	{

		if(check_sync_green == 0)
 80015d8:	4b97      	ldr	r3, [pc, #604]	; (8001838 <fsm_manual+0x660>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10d      	bne.n	80015fc <fsm_manual+0x424>
		{
			check_sync_green = 1;
 80015e0:	4b95      	ldr	r3, [pc, #596]	; (8001838 <fsm_manual+0x660>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_SET);
 80015e6:	2201      	movs	r2, #1
 80015e8:	2110      	movs	r1, #16
 80015ea:	4894      	ldr	r0, [pc, #592]	; (800183c <fsm_manual+0x664>)
 80015ec:	f001 f8eb 	bl	80027c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 80015f0:	2201      	movs	r2, #1
 80015f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015f6:	4892      	ldr	r0, [pc, #584]	; (8001840 <fsm_manual+0x668>)
 80015f8:	f001 f8e5 	bl	80027c6 <HAL_GPIO_WritePin>
		}

		if(timerBlinkingGreen_flag == 1)
 80015fc:	4b91      	ldr	r3, [pc, #580]	; (8001844 <fsm_manual+0x66c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d10c      	bne.n	800161e <fsm_manual+0x446>
		{
			HAL_GPIO_TogglePin(green1_GPIO_Port, green1_Pin);
 8001604:	2110      	movs	r1, #16
 8001606:	488d      	ldr	r0, [pc, #564]	; (800183c <fsm_manual+0x664>)
 8001608:	f001 f8f5 	bl	80027f6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(green2_GPIO_Port, green2_Pin);
 800160c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001610:	488b      	ldr	r0, [pc, #556]	; (8001840 <fsm_manual+0x668>)
 8001612:	f001 f8f0 	bl	80027f6 <HAL_GPIO_TogglePin>

			setTimerBlinkingGreen(500);
 8001616:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800161a:	f000 fbfb 	bl	8001e14 <setTimerBlinkingGreen>
		}

		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	2104      	movs	r1, #4
 8001622:	4886      	ldr	r0, [pc, #536]	; (800183c <fsm_manual+0x664>)
 8001624:	f001 f8cf 	bl	80027c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800162e:	4884      	ldr	r0, [pc, #528]	; (8001840 <fsm_manual+0x668>)
 8001630:	f001 f8c9 	bl	80027c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	2108      	movs	r1, #8
 8001638:	4880      	ldr	r0, [pc, #512]	; (800183c <fsm_manual+0x664>)
 800163a:	f001 f8c4 	bl	80027c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001644:	487e      	ldr	r0, [pc, #504]	; (8001840 <fsm_manual+0x668>)
 8001646:	f001 f8be 	bl	80027c6 <HAL_GPIO_WritePin>

		buffer_7SEG_horizontal[0] = red_yellow_green_manual_time[2] / 10;
 800164a:	4b7f      	ldr	r3, [pc, #508]	; (8001848 <fsm_manual+0x670>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	4a7f      	ldr	r2, [pc, #508]	; (800184c <fsm_manual+0x674>)
 8001650:	fb82 1203 	smull	r1, r2, r2, r3
 8001654:	1092      	asrs	r2, r2, #2
 8001656:	17db      	asrs	r3, r3, #31
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	4a7d      	ldr	r2, [pc, #500]	; (8001850 <fsm_manual+0x678>)
 800165c:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = red_yellow_green_manual_time[2] % 10;
 800165e:	4b7a      	ldr	r3, [pc, #488]	; (8001848 <fsm_manual+0x670>)
 8001660:	6899      	ldr	r1, [r3, #8]
 8001662:	4b7a      	ldr	r3, [pc, #488]	; (800184c <fsm_manual+0x674>)
 8001664:	fb83 2301 	smull	r2, r3, r3, r1
 8001668:	109a      	asrs	r2, r3, #2
 800166a:	17cb      	asrs	r3, r1, #31
 800166c:	1ad2      	subs	r2, r2, r3
 800166e:	4613      	mov	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	1aca      	subs	r2, r1, r3
 8001678:	4b75      	ldr	r3, [pc, #468]	; (8001850 <fsm_manual+0x678>)
 800167a:	605a      	str	r2, [r3, #4]

		buffer_7SEG_vertical[0] = 0;
 800167c:	4b75      	ldr	r3, [pc, #468]	; (8001854 <fsm_manual+0x67c>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
		buffer_7SEG_vertical[1] = 4;
 8001682:	4b74      	ldr	r3, [pc, #464]	; (8001854 <fsm_manual+0x67c>)
 8001684:	2204      	movs	r2, #4
 8001686:	605a      	str	r2, [r3, #4]

		if(timerAuto_flag == 1)
 8001688:	4b73      	ldr	r3, [pc, #460]	; (8001858 <fsm_manual+0x680>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d105      	bne.n	800169c <fsm_manual+0x4c4>
		{
			status_horizontal = INIT_AUTO;
 8001690:	4b72      	ldr	r3, [pc, #456]	; (800185c <fsm_manual+0x684>)
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
			status_vertical = INIT_AUTO;
 8001696:	4b72      	ldr	r3, [pc, #456]	; (8001860 <fsm_manual+0x688>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
		}

		if(isButton1Pressed() == 1)
 800169c:	f7ff f946 	bl	800092c <isButton1Pressed>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d105      	bne.n	80016b2 <fsm_manual+0x4da>
		{
			status_horizontal = INIT_AUTO;
 80016a6:	4b6d      	ldr	r3, [pc, #436]	; (800185c <fsm_manual+0x684>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
			status_vertical = INIT_AUTO;
 80016ac:	4b6c      	ldr	r3, [pc, #432]	; (8001860 <fsm_manual+0x688>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
		}

		if(isButton2Pressed() == 1)
 80016b2:	f7ff f94d 	bl	8000950 <isButton2Pressed>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d117      	bne.n	80016ec <fsm_manual+0x514>
		{
			check_button2_green = 1;
 80016bc:	4b69      	ldr	r3, [pc, #420]	; (8001864 <fsm_manual+0x68c>)
 80016be:	2201      	movs	r2, #1
 80016c0:	601a      	str	r2, [r3, #0]

			if(red_yellow_green_manual_time[2] <= 99 && red_yellow_green_manual_time[2] >= 1)
 80016c2:	4b61      	ldr	r3, [pc, #388]	; (8001848 <fsm_manual+0x670>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b63      	cmp	r3, #99	; 0x63
 80016c8:	dc09      	bgt.n	80016de <fsm_manual+0x506>
 80016ca:	4b5f      	ldr	r3, [pc, #380]	; (8001848 <fsm_manual+0x670>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	dd05      	ble.n	80016de <fsm_manual+0x506>
			{
				red_yellow_green_manual_time[2]++;
 80016d2:	4b5d      	ldr	r3, [pc, #372]	; (8001848 <fsm_manual+0x670>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	3301      	adds	r3, #1
 80016d8:	4a5b      	ldr	r2, [pc, #364]	; (8001848 <fsm_manual+0x670>)
 80016da:	6093      	str	r3, [r2, #8]
 80016dc:	e002      	b.n	80016e4 <fsm_manual+0x50c>
			}
			else
			{
				red_yellow_green_manual_time[2] = 1;
 80016de:	4b5a      	ldr	r3, [pc, #360]	; (8001848 <fsm_manual+0x670>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	609a      	str	r2, [r3, #8]
			}
			setTimerAuto(10000);
 80016e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80016e8:	f000 fb46 	bl	8001d78 <setTimerAuto>
		}

		if(isButton3Pressed() == 1)
 80016ec:	f7ff f942 	bl	8000974 <isButton3Pressed>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	f040 810d 	bne.w	8001912 <fsm_manual+0x73a>
		{
			if(check_button2_red == 1 && check_button2_yellow == 1)
 80016f8:	4b5b      	ldr	r3, [pc, #364]	; (8001868 <fsm_manual+0x690>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d131      	bne.n	8001764 <fsm_manual+0x58c>
 8001700:	4b5a      	ldr	r3, [pc, #360]	; (800186c <fsm_manual+0x694>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d12d      	bne.n	8001764 <fsm_manual+0x58c>
			{
				red_yellow_green_manual_time[2] = red_yellow_green_manual_time[0] - red_yellow_green_manual_time[1];
 8001708:	4b4f      	ldr	r3, [pc, #316]	; (8001848 <fsm_manual+0x670>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b4e      	ldr	r3, [pc, #312]	; (8001848 <fsm_manual+0x670>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	4a4d      	ldr	r2, [pc, #308]	; (8001848 <fsm_manual+0x670>)
 8001714:	6093      	str	r3, [r2, #8]

				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 8001716:	4b4c      	ldr	r3, [pc, #304]	; (8001848 <fsm_manual+0x670>)
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	4b4b      	ldr	r3, [pc, #300]	; (8001848 <fsm_manual+0x670>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	429a      	cmp	r2, r3
 8001720:	f280 80e4 	bge.w	80018ec <fsm_manual+0x714>
				&& red_yellow_green_manual_time[1] < red_yellow_green_manual_time[0])
 8001724:	4b48      	ldr	r3, [pc, #288]	; (8001848 <fsm_manual+0x670>)
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	4b47      	ldr	r3, [pc, #284]	; (8001848 <fsm_manual+0x670>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	f280 80dd 	bge.w	80018ec <fsm_manual+0x714>
				{
					red_yellow_green_auto_time_horizontal[0] = red_yellow_green_manual_time[0];
 8001732:	4b45      	ldr	r3, [pc, #276]	; (8001848 <fsm_manual+0x670>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a4e      	ldr	r2, [pc, #312]	; (8001870 <fsm_manual+0x698>)
 8001738:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_vertical[0] = red_yellow_green_manual_time[0];
 800173a:	4b43      	ldr	r3, [pc, #268]	; (8001848 <fsm_manual+0x670>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a4d      	ldr	r2, [pc, #308]	; (8001874 <fsm_manual+0x69c>)
 8001740:	6013      	str	r3, [r2, #0]

					red_yellow_green_auto_time_horizontal[1] = red_yellow_green_manual_time[1];
 8001742:	4b41      	ldr	r3, [pc, #260]	; (8001848 <fsm_manual+0x670>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	4a4a      	ldr	r2, [pc, #296]	; (8001870 <fsm_manual+0x698>)
 8001748:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_vertical[1] = red_yellow_green_manual_time[1];
 800174a:	4b3f      	ldr	r3, [pc, #252]	; (8001848 <fsm_manual+0x670>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4a49      	ldr	r2, [pc, #292]	; (8001874 <fsm_manual+0x69c>)
 8001750:	6053      	str	r3, [r2, #4]

					red_yellow_green_auto_time_horizontal[2] = red_yellow_green_manual_time[2];
 8001752:	4b3d      	ldr	r3, [pc, #244]	; (8001848 <fsm_manual+0x670>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	4a46      	ldr	r2, [pc, #280]	; (8001870 <fsm_manual+0x698>)
 8001758:	6093      	str	r3, [r2, #8]
					red_yellow_green_auto_time_vertical[2] = red_yellow_green_manual_time[2];
 800175a:	4b3b      	ldr	r3, [pc, #236]	; (8001848 <fsm_manual+0x670>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	4a45      	ldr	r2, [pc, #276]	; (8001874 <fsm_manual+0x69c>)
 8001760:	6093      	str	r3, [r2, #8]
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 8001762:	e0c3      	b.n	80018ec <fsm_manual+0x714>
				}

			}
			else if(check_button2_red == 1 && check_button2_green == 1)
 8001764:	4b40      	ldr	r3, [pc, #256]	; (8001868 <fsm_manual+0x690>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d131      	bne.n	80017d0 <fsm_manual+0x5f8>
 800176c:	4b3d      	ldr	r3, [pc, #244]	; (8001864 <fsm_manual+0x68c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d12d      	bne.n	80017d0 <fsm_manual+0x5f8>
			{
				red_yellow_green_manual_time[1] = red_yellow_green_manual_time[0] - red_yellow_green_manual_time[2];
 8001774:	4b34      	ldr	r3, [pc, #208]	; (8001848 <fsm_manual+0x670>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b33      	ldr	r3, [pc, #204]	; (8001848 <fsm_manual+0x670>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	4a32      	ldr	r2, [pc, #200]	; (8001848 <fsm_manual+0x670>)
 8001780:	6053      	str	r3, [r2, #4]

				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 8001782:	4b31      	ldr	r3, [pc, #196]	; (8001848 <fsm_manual+0x670>)
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	4b30      	ldr	r3, [pc, #192]	; (8001848 <fsm_manual+0x670>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	429a      	cmp	r2, r3
 800178c:	f280 80b0 	bge.w	80018f0 <fsm_manual+0x718>
				&& red_yellow_green_manual_time[1] < red_yellow_green_manual_time[0])
 8001790:	4b2d      	ldr	r3, [pc, #180]	; (8001848 <fsm_manual+0x670>)
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	4b2c      	ldr	r3, [pc, #176]	; (8001848 <fsm_manual+0x670>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	f280 80a9 	bge.w	80018f0 <fsm_manual+0x718>
				{
					red_yellow_green_auto_time_horizontal[0] = red_yellow_green_manual_time[0];
 800179e:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <fsm_manual+0x670>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a33      	ldr	r2, [pc, #204]	; (8001870 <fsm_manual+0x698>)
 80017a4:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_vertical[0] = red_yellow_green_manual_time[0];
 80017a6:	4b28      	ldr	r3, [pc, #160]	; (8001848 <fsm_manual+0x670>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a32      	ldr	r2, [pc, #200]	; (8001874 <fsm_manual+0x69c>)
 80017ac:	6013      	str	r3, [r2, #0]

					red_yellow_green_auto_time_horizontal[1] = red_yellow_green_manual_time[1];
 80017ae:	4b26      	ldr	r3, [pc, #152]	; (8001848 <fsm_manual+0x670>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4a2f      	ldr	r2, [pc, #188]	; (8001870 <fsm_manual+0x698>)
 80017b4:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_vertical[1] = red_yellow_green_manual_time[1];
 80017b6:	4b24      	ldr	r3, [pc, #144]	; (8001848 <fsm_manual+0x670>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4a2e      	ldr	r2, [pc, #184]	; (8001874 <fsm_manual+0x69c>)
 80017bc:	6053      	str	r3, [r2, #4]

					red_yellow_green_auto_time_horizontal[2] = red_yellow_green_manual_time[2];
 80017be:	4b22      	ldr	r3, [pc, #136]	; (8001848 <fsm_manual+0x670>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	4a2b      	ldr	r2, [pc, #172]	; (8001870 <fsm_manual+0x698>)
 80017c4:	6093      	str	r3, [r2, #8]
					red_yellow_green_auto_time_vertical[2] = red_yellow_green_manual_time[2];
 80017c6:	4b20      	ldr	r3, [pc, #128]	; (8001848 <fsm_manual+0x670>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	4a2a      	ldr	r2, [pc, #168]	; (8001874 <fsm_manual+0x69c>)
 80017cc:	6093      	str	r3, [r2, #8]
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 80017ce:	e08f      	b.n	80018f0 <fsm_manual+0x718>
				}

			}
			else if(check_button2_yellow == 1 && check_button2_green == 1)
 80017d0:	4b26      	ldr	r3, [pc, #152]	; (800186c <fsm_manual+0x694>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d14f      	bne.n	8001878 <fsm_manual+0x6a0>
 80017d8:	4b22      	ldr	r3, [pc, #136]	; (8001864 <fsm_manual+0x68c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d14b      	bne.n	8001878 <fsm_manual+0x6a0>
			{
				red_yellow_green_manual_time[0] = red_yellow_green_manual_time[1] + red_yellow_green_manual_time[2];
 80017e0:	4b19      	ldr	r3, [pc, #100]	; (8001848 <fsm_manual+0x670>)
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	4b18      	ldr	r3, [pc, #96]	; (8001848 <fsm_manual+0x670>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	4413      	add	r3, r2
 80017ea:	4a17      	ldr	r2, [pc, #92]	; (8001848 <fsm_manual+0x670>)
 80017ec:	6013      	str	r3, [r2, #0]

				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 80017ee:	4b16      	ldr	r3, [pc, #88]	; (8001848 <fsm_manual+0x670>)
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <fsm_manual+0x670>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	da7c      	bge.n	80018f4 <fsm_manual+0x71c>
				&& red_yellow_green_manual_time[1] < red_yellow_green_manual_time[0])
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <fsm_manual+0x670>)
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	4b12      	ldr	r3, [pc, #72]	; (8001848 <fsm_manual+0x670>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	da76      	bge.n	80018f4 <fsm_manual+0x71c>
				{
					red_yellow_green_auto_time_horizontal[0] = red_yellow_green_manual_time[0];
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <fsm_manual+0x670>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a19      	ldr	r2, [pc, #100]	; (8001870 <fsm_manual+0x698>)
 800180c:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_vertical[0] = red_yellow_green_manual_time[0];
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <fsm_manual+0x670>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a18      	ldr	r2, [pc, #96]	; (8001874 <fsm_manual+0x69c>)
 8001814:	6013      	str	r3, [r2, #0]

					red_yellow_green_auto_time_horizontal[1] = red_yellow_green_manual_time[1];
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <fsm_manual+0x670>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4a15      	ldr	r2, [pc, #84]	; (8001870 <fsm_manual+0x698>)
 800181c:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_vertical[1] = red_yellow_green_manual_time[1];
 800181e:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <fsm_manual+0x670>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	4a14      	ldr	r2, [pc, #80]	; (8001874 <fsm_manual+0x69c>)
 8001824:	6053      	str	r3, [r2, #4]

					red_yellow_green_auto_time_horizontal[2] = red_yellow_green_manual_time[2];
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <fsm_manual+0x670>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	4a11      	ldr	r2, [pc, #68]	; (8001870 <fsm_manual+0x698>)
 800182c:	6093      	str	r3, [r2, #8]
					red_yellow_green_auto_time_vertical[2] = red_yellow_green_manual_time[2];
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <fsm_manual+0x670>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	4a10      	ldr	r2, [pc, #64]	; (8001874 <fsm_manual+0x69c>)
 8001834:	6093      	str	r3, [r2, #8]
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 8001836:	e05d      	b.n	80018f4 <fsm_manual+0x71c>
 8001838:	200000d8 	.word	0x200000d8
 800183c:	40010800 	.word	0x40010800
 8001840:	40010c00 	.word	0x40010c00
 8001844:	20000148 	.word	0x20000148
 8001848:	200000c4 	.word	0x200000c4
 800184c:	66666667 	.word	0x66666667
 8001850:	20000090 	.word	0x20000090
 8001854:	20000088 	.word	0x20000088
 8001858:	20000130 	.word	0x20000130
 800185c:	200000bc 	.word	0x200000bc
 8001860:	200000c0 	.word	0x200000c0
 8001864:	200000e4 	.word	0x200000e4
 8001868:	200000dc 	.word	0x200000dc
 800186c:	200000e0 	.word	0x200000e0
 8001870:	20000048 	.word	0x20000048
 8001874:	2000003c 	.word	0x2000003c
				}

			}
			else if(check_button2_red == 1 && check_button2_yellow == 1 && check_button2_green == 1)
 8001878:	4b28      	ldr	r3, [pc, #160]	; (800191c <fsm_manual+0x744>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d13a      	bne.n	80018f6 <fsm_manual+0x71e>
 8001880:	4b27      	ldr	r3, [pc, #156]	; (8001920 <fsm_manual+0x748>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d136      	bne.n	80018f6 <fsm_manual+0x71e>
 8001888:	4b26      	ldr	r3, [pc, #152]	; (8001924 <fsm_manual+0x74c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d132      	bne.n	80018f6 <fsm_manual+0x71e>
			{

				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 8001890:	4b25      	ldr	r3, [pc, #148]	; (8001928 <fsm_manual+0x750>)
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	4b24      	ldr	r3, [pc, #144]	; (8001928 <fsm_manual+0x750>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	429a      	cmp	r2, r3
 800189a:	da2c      	bge.n	80018f6 <fsm_manual+0x71e>
				&& red_yellow_green_manual_time[1] < red_yellow_green_manual_time[0]
 800189c:	4b22      	ldr	r3, [pc, #136]	; (8001928 <fsm_manual+0x750>)
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	4b21      	ldr	r3, [pc, #132]	; (8001928 <fsm_manual+0x750>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	da26      	bge.n	80018f6 <fsm_manual+0x71e>
				&& red_yellow_green_manual_time[0] == red_yellow_green_manual_time[1] + red_yellow_green_manual_time[2])
 80018a8:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <fsm_manual+0x750>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <fsm_manual+0x750>)
 80018ae:	6859      	ldr	r1, [r3, #4]
 80018b0:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <fsm_manual+0x750>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	440b      	add	r3, r1
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d11d      	bne.n	80018f6 <fsm_manual+0x71e>
				{
					red_yellow_green_auto_time_horizontal[0] = red_yellow_green_manual_time[0];
 80018ba:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <fsm_manual+0x750>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a1b      	ldr	r2, [pc, #108]	; (800192c <fsm_manual+0x754>)
 80018c0:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_vertical[0] = red_yellow_green_manual_time[0];
 80018c2:	4b19      	ldr	r3, [pc, #100]	; (8001928 <fsm_manual+0x750>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a1a      	ldr	r2, [pc, #104]	; (8001930 <fsm_manual+0x758>)
 80018c8:	6013      	str	r3, [r2, #0]

					red_yellow_green_auto_time_horizontal[1] = red_yellow_green_manual_time[1];
 80018ca:	4b17      	ldr	r3, [pc, #92]	; (8001928 <fsm_manual+0x750>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4a17      	ldr	r2, [pc, #92]	; (800192c <fsm_manual+0x754>)
 80018d0:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_vertical[1] = red_yellow_green_manual_time[1];
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <fsm_manual+0x750>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	4a16      	ldr	r2, [pc, #88]	; (8001930 <fsm_manual+0x758>)
 80018d8:	6053      	str	r3, [r2, #4]

					red_yellow_green_auto_time_horizontal[2] = red_yellow_green_manual_time[2];
 80018da:	4b13      	ldr	r3, [pc, #76]	; (8001928 <fsm_manual+0x750>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	4a13      	ldr	r2, [pc, #76]	; (800192c <fsm_manual+0x754>)
 80018e0:	6093      	str	r3, [r2, #8]
					red_yellow_green_auto_time_vertical[2] = red_yellow_green_manual_time[2];
 80018e2:	4b11      	ldr	r3, [pc, #68]	; (8001928 <fsm_manual+0x750>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	4a12      	ldr	r2, [pc, #72]	; (8001930 <fsm_manual+0x758>)
 80018e8:	6093      	str	r3, [r2, #8]
 80018ea:	e004      	b.n	80018f6 <fsm_manual+0x71e>
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 80018ec:	bf00      	nop
 80018ee:	e002      	b.n	80018f6 <fsm_manual+0x71e>
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 80018f0:	bf00      	nop
 80018f2:	e000      	b.n	80018f6 <fsm_manual+0x71e>
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 80018f4:	bf00      	nop
				}

			}

			status_horizontal = INIT_AUTO;
 80018f6:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <fsm_manual+0x75c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
			status_vertical = INIT_AUTO;
 80018fc:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <fsm_manual+0x760>)
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
			timerAuto_flag = 0;
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <fsm_manual+0x764>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
		}

		break;
 8001908:	e003      	b.n	8001912 <fsm_manual+0x73a>
		break;
 800190a:	bf00      	nop
 800190c:	e002      	b.n	8001914 <fsm_manual+0x73c>
		break;
 800190e:	bf00      	nop
 8001910:	e000      	b.n	8001914 <fsm_manual+0x73c>
		break;
 8001912:	bf00      	nop
	}

	}

}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200000dc 	.word	0x200000dc
 8001920:	200000e0 	.word	0x200000e0
 8001924:	200000e4 	.word	0x200000e4
 8001928:	200000c4 	.word	0x200000c4
 800192c:	20000048 	.word	0x20000048
 8001930:	2000003c 	.word	0x2000003c
 8001934:	200000bc 	.word	0x200000bc
 8001938:	200000c0 	.word	0x200000c0
 800193c:	20000130 	.word	0x20000130

08001940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001944:	f000 fc3e 	bl	80021c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001948:	f000 f82a 	bl	80019a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800194c:	f000 f8b0 	bl	8001ab0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001950:	f000 f862 	bl	8001a18 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001954:	480f      	ldr	r0, [pc, #60]	; (8001994 <main+0x54>)
 8001956:	f001 fb93 	bl	8003080 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimerTest(1000);
 800195a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800195e:	f000 f921 	bl	8001ba4 <setTimerTest>
  setTimerENhorizontal(500);
 8001962:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001966:	f000 f937 	bl	8001bd8 <setTimerENhorizontal>
  setTimerENvertical(500);
 800196a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800196e:	f000 f94d 	bl	8001c0c <setTimerENvertical>

  while (1)
  {
	  if(timerTest_flag == 1)
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <main+0x58>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d107      	bne.n	800198a <main+0x4a>
	  {
		  HAL_GPIO_TogglePin(test_GPIO_Port, test_Pin);
 800197a:	2120      	movs	r1, #32
 800197c:	4807      	ldr	r0, [pc, #28]	; (800199c <main+0x5c>)
 800197e:	f000 ff3a 	bl	80027f6 <HAL_GPIO_TogglePin>

		  setTimerTest(1000);
 8001982:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001986:	f000 f90d 	bl	8001ba4 <setTimerTest>
	  }

	  fsm_manual_all();
 800198a:	f7ff fc01 	bl	8001190 <fsm_manual_all>

	  fsm_auto_all();
 800198e:	f7ff f993 	bl	8000cb8 <fsm_auto_all>
	  if(timerTest_flag == 1)
 8001992:	e7ee      	b.n	8001972 <main+0x32>
 8001994:	20000150 	.word	0x20000150
 8001998:	200000e8 	.word	0x200000e8
 800199c:	40010800 	.word	0x40010800

080019a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b090      	sub	sp, #64	; 0x40
 80019a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019a6:	f107 0318 	add.w	r3, r7, #24
 80019aa:	2228      	movs	r2, #40	; 0x28
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f001 ff16 	bl	80037e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
 80019c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019c2:	2302      	movs	r3, #2
 80019c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019c6:	2301      	movs	r3, #1
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019ca:	2310      	movs	r3, #16
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d2:	f107 0318 	add.w	r3, r7, #24
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 ff26 	bl	8002828 <HAL_RCC_OscConfig>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80019e2:	f000 f8d9 	bl	8001b98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019e6:	230f      	movs	r3, #15
 80019e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019fa:	1d3b      	adds	r3, r7, #4
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f001 f992 	bl	8002d28 <HAL_RCC_ClockConfig>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001a0a:	f000 f8c5 	bl	8001b98 <Error_Handler>
  }
}
 8001a0e:	bf00      	nop
 8001a10:	3740      	adds	r7, #64	; 0x40
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a1e:	f107 0308 	add.w	r3, r7, #8
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a34:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <MX_TIM2_Init+0x94>)
 8001a36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <MX_TIM2_Init+0x94>)
 8001a3e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001a42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a44:	4b19      	ldr	r3, [pc, #100]	; (8001aac <MX_TIM2_Init+0x94>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001a4a:	4b18      	ldr	r3, [pc, #96]	; (8001aac <MX_TIM2_Init+0x94>)
 8001a4c:	2209      	movs	r2, #9
 8001a4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a50:	4b16      	ldr	r3, [pc, #88]	; (8001aac <MX_TIM2_Init+0x94>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a56:	4b15      	ldr	r3, [pc, #84]	; (8001aac <MX_TIM2_Init+0x94>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a5c:	4813      	ldr	r0, [pc, #76]	; (8001aac <MX_TIM2_Init+0x94>)
 8001a5e:	f001 fabf 	bl	8002fe0 <HAL_TIM_Base_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a68:	f000 f896 	bl	8001b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a72:	f107 0308 	add.w	r3, r7, #8
 8001a76:	4619      	mov	r1, r3
 8001a78:	480c      	ldr	r0, [pc, #48]	; (8001aac <MX_TIM2_Init+0x94>)
 8001a7a:	f001 fc3d 	bl	80032f8 <HAL_TIM_ConfigClockSource>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a84:	f000 f888 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a90:	463b      	mov	r3, r7
 8001a92:	4619      	mov	r1, r3
 8001a94:	4805      	ldr	r0, [pc, #20]	; (8001aac <MX_TIM2_Init+0x94>)
 8001a96:	f001 fe15 	bl	80036c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001aa0:	f000 f87a 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001aa4:	bf00      	nop
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000150 	.word	0x20000150

08001ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab6:	f107 0308 	add.w	r3, r7, #8
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac4:	4b29      	ldr	r3, [pc, #164]	; (8001b6c <MX_GPIO_Init+0xbc>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	4a28      	ldr	r2, [pc, #160]	; (8001b6c <MX_GPIO_Init+0xbc>)
 8001aca:	f043 0304 	orr.w	r3, r3, #4
 8001ace:	6193      	str	r3, [r2, #24]
 8001ad0:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <MX_GPIO_Init+0xbc>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001adc:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <MX_GPIO_Init+0xbc>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	4a22      	ldr	r2, [pc, #136]	; (8001b6c <MX_GPIO_Init+0xbc>)
 8001ae2:	f043 0308 	orr.w	r3, r3, #8
 8001ae6:	6193      	str	r3, [r2, #24]
 8001ae8:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <MX_GPIO_Init+0xbc>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	603b      	str	r3, [r7, #0]
 8001af2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, red1_Pin|yellow1_Pin|green1_Pin|test_Pin
 8001af4:	2200      	movs	r2, #0
 8001af6:	f641 71fc 	movw	r1, #8188	; 0x1ffc
 8001afa:	481d      	ldr	r0, [pc, #116]	; (8001b70 <MX_GPIO_Init+0xc0>)
 8001afc:	f000 fe63 	bl	80027c6 <HAL_GPIO_WritePin>
                          |a1_Pin|b1_Pin|c1_Pin|d1_Pin
                          |e1_Pin|f1_Pin|g1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|e2_Pin|f2_Pin
 8001b00:	2200      	movs	r2, #0
 8001b02:	f64f 71f3 	movw	r1, #65523	; 0xfff3
 8001b06:	481b      	ldr	r0, [pc, #108]	; (8001b74 <MX_GPIO_Init+0xc4>)
 8001b08:	f000 fe5d 	bl	80027c6 <HAL_GPIO_WritePin>
                          |c2_Pin|d2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : red1_Pin yellow1_Pin green1_Pin test_Pin
                           a1_Pin b1_Pin c1_Pin d1_Pin
                           e1_Pin f1_Pin g1_Pin */
  GPIO_InitStruct.Pin = red1_Pin|yellow1_Pin|green1_Pin|test_Pin
 8001b0c:	f641 73fc 	movw	r3, #8188	; 0x1ffc
 8001b10:	60bb      	str	r3, [r7, #8]
                          |a1_Pin|b1_Pin|c1_Pin|d1_Pin
                          |e1_Pin|f1_Pin|g1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b12:	2301      	movs	r3, #1
 8001b14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	f107 0308 	add.w	r3, r7, #8
 8001b22:	4619      	mov	r1, r3
 8001b24:	4812      	ldr	r0, [pc, #72]	; (8001b70 <MX_GPIO_Init+0xc0>)
 8001b26:	f000 fcbd 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin e2_Pin f2_Pin
                           g2_Pin red2_Pin yellow2_Pin green2_Pin
                           EN2_Pin EN3_Pin a2_Pin b2_Pin
                           c2_Pin d2_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|e2_Pin|f2_Pin
 8001b2a:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8001b2e:	60bb      	str	r3, [r7, #8]
                          |g2_Pin|red2_Pin|yellow2_Pin|green2_Pin
                          |EN2_Pin|EN3_Pin|a2_Pin|b2_Pin
                          |c2_Pin|d2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b30:	2301      	movs	r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3c:	f107 0308 	add.w	r3, r7, #8
 8001b40:	4619      	mov	r1, r3
 8001b42:	480c      	ldr	r0, [pc, #48]	; (8001b74 <MX_GPIO_Init+0xc4>)
 8001b44:	f000 fcae 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 8001b48:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b52:	2301      	movs	r3, #1
 8001b54:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	f107 0308 	add.w	r3, r7, #8
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4804      	ldr	r0, [pc, #16]	; (8001b70 <MX_GPIO_Init+0xc0>)
 8001b5e:	f000 fca1 	bl	80024a4 <HAL_GPIO_Init>

}
 8001b62:	bf00      	nop
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40010800 	.word	0x40010800
 8001b74:	40010c00 	.word	0x40010c00

08001b78 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001b80:	f000 f962 	bl	8001e48 <timerRun>
	getButton1();
 8001b84:	f7fe ff08 	bl	8000998 <getButton1>
	getButton2();
 8001b88:	f7fe ff8c 	bl	8000aa4 <getButton2>
	getButton3();
 8001b8c:	f7ff f80e 	bl	8000bac <getButton3>
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b9c:	b672      	cpsid	i
}
 8001b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <Error_Handler+0x8>
	...

08001ba4 <setTimerTest>:
int timerBlinkingGreen_flag = 0;
int timerBlinkingGreen_counter = 0;


void setTimerTest(int duration)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
    timerTest_counter = duration / TIMER_CYCLE;
 8001bac:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <setTimerTest+0x28>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bb6:	4a06      	ldr	r2, [pc, #24]	; (8001bd0 <setTimerTest+0x2c>)
 8001bb8:	6013      	str	r3, [r2, #0]
    timerTest_flag = 0;
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <setTimerTest+0x30>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	2000005c 	.word	0x2000005c
 8001bd0:	200000ec 	.word	0x200000ec
 8001bd4:	200000e8 	.word	0x200000e8

08001bd8 <setTimerENhorizontal>:

void setTimerENhorizontal(int duration)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
    timerENhorizontal_counter = duration / TIMER_CYCLE;
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <setTimerENhorizontal+0x28>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bea:	4a06      	ldr	r2, [pc, #24]	; (8001c04 <setTimerENhorizontal+0x2c>)
 8001bec:	6013      	str	r3, [r2, #0]
    timerENhorizontal_flag = 0;
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <setTimerENhorizontal+0x30>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	2000005c 	.word	0x2000005c
 8001c04:	200000f4 	.word	0x200000f4
 8001c08:	200000f0 	.word	0x200000f0

08001c0c <setTimerENvertical>:

void setTimerENvertical(int duration)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
    timerENvertical_counter = duration / TIMER_CYCLE;
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <setTimerENvertical+0x28>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c1e:	4a06      	ldr	r2, [pc, #24]	; (8001c38 <setTimerENvertical+0x2c>)
 8001c20:	6013      	str	r3, [r2, #0]
    timerENvertical_flag = 0;
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <setTimerENvertical+0x30>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	2000005c 	.word	0x2000005c
 8001c38:	200000fc 	.word	0x200000fc
 8001c3c:	200000f8 	.word	0x200000f8

08001c40 <setTimer7SEGCountRedhorizontal>:


void setTimer7SEGCountRedhorizontal(int duration)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
    timer7SEGCountRedhorizontal_counter = duration / TIMER_CYCLE;
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <setTimer7SEGCountRedhorizontal+0x28>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c52:	4a06      	ldr	r2, [pc, #24]	; (8001c6c <setTimer7SEGCountRedhorizontal+0x2c>)
 8001c54:	6013      	str	r3, [r2, #0]
    timer7SEGCountRedhorizontal_flag = 0;
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <setTimer7SEGCountRedhorizontal+0x30>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	2000005c 	.word	0x2000005c
 8001c6c:	20000104 	.word	0x20000104
 8001c70:	20000100 	.word	0x20000100

08001c74 <setTimer7SEGCountYellowhorizontal>:

void setTimer7SEGCountYellowhorizontal(int duration)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
    timer7SEGCountYellowhorizontal_counter = duration / TIMER_CYCLE;
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <setTimer7SEGCountYellowhorizontal+0x28>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c86:	4a06      	ldr	r2, [pc, #24]	; (8001ca0 <setTimer7SEGCountYellowhorizontal+0x2c>)
 8001c88:	6013      	str	r3, [r2, #0]
    timer7SEGCountYellowhorizontal_flag = 0;
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <setTimer7SEGCountYellowhorizontal+0x30>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	2000005c 	.word	0x2000005c
 8001ca0:	2000010c 	.word	0x2000010c
 8001ca4:	20000108 	.word	0x20000108

08001ca8 <setTimer7SEGCountGreenhorizontal>:

void setTimer7SEGCountGreenhorizontal(int duration)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
    timer7SEGCountGreenhorizontal_counter = duration / TIMER_CYCLE;
 8001cb0:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <setTimer7SEGCountGreenhorizontal+0x28>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001cba:	4a06      	ldr	r2, [pc, #24]	; (8001cd4 <setTimer7SEGCountGreenhorizontal+0x2c>)
 8001cbc:	6013      	str	r3, [r2, #0]
    timer7SEGCountGreenhorizontal_flag = 0;
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <setTimer7SEGCountGreenhorizontal+0x30>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	2000005c 	.word	0x2000005c
 8001cd4:	20000114 	.word	0x20000114
 8001cd8:	20000110 	.word	0x20000110

08001cdc <setTimer7SEGCountRedvertical>:


void setTimer7SEGCountRedvertical(int duration)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
    timer7SEGCountRedvertical_counter = duration / TIMER_CYCLE;
 8001ce4:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <setTimer7SEGCountRedvertical+0x28>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	fb92 f3f3 	sdiv	r3, r2, r3
 8001cee:	4a06      	ldr	r2, [pc, #24]	; (8001d08 <setTimer7SEGCountRedvertical+0x2c>)
 8001cf0:	6013      	str	r3, [r2, #0]
    timer7SEGCountRedvertical_flag = 0;
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <setTimer7SEGCountRedvertical+0x30>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	2000005c 	.word	0x2000005c
 8001d08:	2000011c 	.word	0x2000011c
 8001d0c:	20000118 	.word	0x20000118

08001d10 <setTimer7SEGCountYellowvertical>:

void setTimer7SEGCountYellowvertical(int duration)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
    timer7SEGCountYellowvertical_counter = duration / TIMER_CYCLE;
 8001d18:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <setTimer7SEGCountYellowvertical+0x28>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d22:	4a06      	ldr	r2, [pc, #24]	; (8001d3c <setTimer7SEGCountYellowvertical+0x2c>)
 8001d24:	6013      	str	r3, [r2, #0]
    timer7SEGCountYellowvertical_flag = 0;
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <setTimer7SEGCountYellowvertical+0x30>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	2000005c 	.word	0x2000005c
 8001d3c:	20000124 	.word	0x20000124
 8001d40:	20000120 	.word	0x20000120

08001d44 <setTimer7SEGCountGreenvertical>:

void setTimer7SEGCountGreenvertical(int duration)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
    timer7SEGCountGreenvertical_counter = duration / TIMER_CYCLE;
 8001d4c:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <setTimer7SEGCountGreenvertical+0x28>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d56:	4a06      	ldr	r2, [pc, #24]	; (8001d70 <setTimer7SEGCountGreenvertical+0x2c>)
 8001d58:	6013      	str	r3, [r2, #0]
    timer7SEGCountGreenvertical_flag = 0;
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <setTimer7SEGCountGreenvertical+0x30>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	2000005c 	.word	0x2000005c
 8001d70:	2000012c 	.word	0x2000012c
 8001d74:	20000128 	.word	0x20000128

08001d78 <setTimerAuto>:


void setTimerAuto(int duration)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
    timerAuto_counter = duration / TIMER_CYCLE;
 8001d80:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <setTimerAuto+0x28>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d8a:	4a06      	ldr	r2, [pc, #24]	; (8001da4 <setTimerAuto+0x2c>)
 8001d8c:	6013      	str	r3, [r2, #0]
    timerAuto_flag = 0;
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <setTimerAuto+0x30>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	2000005c 	.word	0x2000005c
 8001da4:	20000134 	.word	0x20000134
 8001da8:	20000130 	.word	0x20000130

08001dac <setTimerBlinkingRed>:


void setTimerBlinkingRed(int duration)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	timerBlinkingRed_counter = duration / TIMER_CYCLE;
 8001db4:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <setTimerBlinkingRed+0x28>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	fb92 f3f3 	sdiv	r3, r2, r3
 8001dbe:	4a06      	ldr	r2, [pc, #24]	; (8001dd8 <setTimerBlinkingRed+0x2c>)
 8001dc0:	6013      	str	r3, [r2, #0]
	timerBlinkingRed_flag = 0;
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <setTimerBlinkingRed+0x30>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	2000005c 	.word	0x2000005c
 8001dd8:	2000013c 	.word	0x2000013c
 8001ddc:	20000138 	.word	0x20000138

08001de0 <setTimerBlinkingYellow>:

void setTimerBlinkingYellow(int duration) {
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
    timerBlinkingYellow_counter = duration / TIMER_CYCLE;
 8001de8:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <setTimerBlinkingYellow+0x28>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	fb92 f3f3 	sdiv	r3, r2, r3
 8001df2:	4a06      	ldr	r2, [pc, #24]	; (8001e0c <setTimerBlinkingYellow+0x2c>)
 8001df4:	6013      	str	r3, [r2, #0]
    timerBlinkingYellow_flag = 0;
 8001df6:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <setTimerBlinkingYellow+0x30>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	2000005c 	.word	0x2000005c
 8001e0c:	20000144 	.word	0x20000144
 8001e10:	20000140 	.word	0x20000140

08001e14 <setTimerBlinkingGreen>:

void setTimerBlinkingGreen(int duration) {
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
    timerBlinkingGreen_counter = duration / TIMER_CYCLE;
 8001e1c:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <setTimerBlinkingGreen+0x28>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e26:	4a06      	ldr	r2, [pc, #24]	; (8001e40 <setTimerBlinkingGreen+0x2c>)
 8001e28:	6013      	str	r3, [r2, #0]
    timerBlinkingGreen_flag = 0;
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <setTimerBlinkingGreen+0x30>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	2000005c 	.word	0x2000005c
 8001e40:	2000014c 	.word	0x2000014c
 8001e44:	20000148 	.word	0x20000148

08001e48 <timerRun>:

void timerRun()
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
    if (timerTest_counter > 0)
 8001e4c:	4b69      	ldr	r3, [pc, #420]	; (8001ff4 <timerRun+0x1ac>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	dd0b      	ble.n	8001e6c <timerRun+0x24>
    {
        timerTest_counter--;
 8001e54:	4b67      	ldr	r3, [pc, #412]	; (8001ff4 <timerRun+0x1ac>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	4a66      	ldr	r2, [pc, #408]	; (8001ff4 <timerRun+0x1ac>)
 8001e5c:	6013      	str	r3, [r2, #0]
        if (timerTest_counter <= 0)
 8001e5e:	4b65      	ldr	r3, [pc, #404]	; (8001ff4 <timerRun+0x1ac>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	dc02      	bgt.n	8001e6c <timerRun+0x24>
        {
            timerTest_flag = 1;
 8001e66:	4b64      	ldr	r3, [pc, #400]	; (8001ff8 <timerRun+0x1b0>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]
        }
    }


    if (timerENhorizontal_counter > 0)
 8001e6c:	4b63      	ldr	r3, [pc, #396]	; (8001ffc <timerRun+0x1b4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	dd0b      	ble.n	8001e8c <timerRun+0x44>
    {
        timerENhorizontal_counter--;
 8001e74:	4b61      	ldr	r3, [pc, #388]	; (8001ffc <timerRun+0x1b4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	4a60      	ldr	r2, [pc, #384]	; (8001ffc <timerRun+0x1b4>)
 8001e7c:	6013      	str	r3, [r2, #0]
        if (timerENhorizontal_counter <= 0)
 8001e7e:	4b5f      	ldr	r3, [pc, #380]	; (8001ffc <timerRun+0x1b4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	dc02      	bgt.n	8001e8c <timerRun+0x44>
        {
            timerENhorizontal_flag = 1;
 8001e86:	4b5e      	ldr	r3, [pc, #376]	; (8002000 <timerRun+0x1b8>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
        }
    }

    if (timerENvertical_counter > 0)
 8001e8c:	4b5d      	ldr	r3, [pc, #372]	; (8002004 <timerRun+0x1bc>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	dd0b      	ble.n	8001eac <timerRun+0x64>
    {
        timerENvertical_counter--;
 8001e94:	4b5b      	ldr	r3, [pc, #364]	; (8002004 <timerRun+0x1bc>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	4a5a      	ldr	r2, [pc, #360]	; (8002004 <timerRun+0x1bc>)
 8001e9c:	6013      	str	r3, [r2, #0]
        if (timerENvertical_counter <= 0)
 8001e9e:	4b59      	ldr	r3, [pc, #356]	; (8002004 <timerRun+0x1bc>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	dc02      	bgt.n	8001eac <timerRun+0x64>
        {
            timerENvertical_flag = 1;
 8001ea6:	4b58      	ldr	r3, [pc, #352]	; (8002008 <timerRun+0x1c0>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]
        }
    }


    if (timer7SEGCountRedhorizontal_counter > 0)
 8001eac:	4b57      	ldr	r3, [pc, #348]	; (800200c <timerRun+0x1c4>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	dd0b      	ble.n	8001ecc <timerRun+0x84>
    {
        timer7SEGCountRedhorizontal_counter--;
 8001eb4:	4b55      	ldr	r3, [pc, #340]	; (800200c <timerRun+0x1c4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	4a54      	ldr	r2, [pc, #336]	; (800200c <timerRun+0x1c4>)
 8001ebc:	6013      	str	r3, [r2, #0]
        if (timer7SEGCountRedhorizontal_counter <= 0)
 8001ebe:	4b53      	ldr	r3, [pc, #332]	; (800200c <timerRun+0x1c4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	dc02      	bgt.n	8001ecc <timerRun+0x84>
        {
            timer7SEGCountRedhorizontal_flag = 1;
 8001ec6:	4b52      	ldr	r3, [pc, #328]	; (8002010 <timerRun+0x1c8>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
        }
    }

    if (timer7SEGCountYellowhorizontal_counter > 0)
 8001ecc:	4b51      	ldr	r3, [pc, #324]	; (8002014 <timerRun+0x1cc>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	dd0b      	ble.n	8001eec <timerRun+0xa4>
    {
        timer7SEGCountYellowhorizontal_counter--;
 8001ed4:	4b4f      	ldr	r3, [pc, #316]	; (8002014 <timerRun+0x1cc>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	4a4e      	ldr	r2, [pc, #312]	; (8002014 <timerRun+0x1cc>)
 8001edc:	6013      	str	r3, [r2, #0]
        if (timer7SEGCountYellowhorizontal_counter <= 0)
 8001ede:	4b4d      	ldr	r3, [pc, #308]	; (8002014 <timerRun+0x1cc>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	dc02      	bgt.n	8001eec <timerRun+0xa4>
        {
            timer7SEGCountYellowhorizontal_flag = 1;
 8001ee6:	4b4c      	ldr	r3, [pc, #304]	; (8002018 <timerRun+0x1d0>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
        }
    }

    if (timer7SEGCountGreenhorizontal_counter > 0)
 8001eec:	4b4b      	ldr	r3, [pc, #300]	; (800201c <timerRun+0x1d4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	dd0b      	ble.n	8001f0c <timerRun+0xc4>
    {
        timer7SEGCountGreenhorizontal_counter--;
 8001ef4:	4b49      	ldr	r3, [pc, #292]	; (800201c <timerRun+0x1d4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	4a48      	ldr	r2, [pc, #288]	; (800201c <timerRun+0x1d4>)
 8001efc:	6013      	str	r3, [r2, #0]
        if (timer7SEGCountGreenhorizontal_counter <= 0)
 8001efe:	4b47      	ldr	r3, [pc, #284]	; (800201c <timerRun+0x1d4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	dc02      	bgt.n	8001f0c <timerRun+0xc4>
        {
            timer7SEGCountGreenhorizontal_flag = 1;
 8001f06:	4b46      	ldr	r3, [pc, #280]	; (8002020 <timerRun+0x1d8>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]
        }
    }


    if (timer7SEGCountRedvertical_counter > 0)
 8001f0c:	4b45      	ldr	r3, [pc, #276]	; (8002024 <timerRun+0x1dc>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	dd0b      	ble.n	8001f2c <timerRun+0xe4>
    {
        timer7SEGCountRedvertical_counter--;
 8001f14:	4b43      	ldr	r3, [pc, #268]	; (8002024 <timerRun+0x1dc>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	4a42      	ldr	r2, [pc, #264]	; (8002024 <timerRun+0x1dc>)
 8001f1c:	6013      	str	r3, [r2, #0]
        if (timer7SEGCountRedvertical_counter <= 0)
 8001f1e:	4b41      	ldr	r3, [pc, #260]	; (8002024 <timerRun+0x1dc>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	dc02      	bgt.n	8001f2c <timerRun+0xe4>
        {
            timer7SEGCountRedvertical_flag = 1;
 8001f26:	4b40      	ldr	r3, [pc, #256]	; (8002028 <timerRun+0x1e0>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]
        }
    }

    if (timer7SEGCountYellowvertical_counter > 0)
 8001f2c:	4b3f      	ldr	r3, [pc, #252]	; (800202c <timerRun+0x1e4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	dd0b      	ble.n	8001f4c <timerRun+0x104>
    {
        timer7SEGCountYellowvertical_counter--;
 8001f34:	4b3d      	ldr	r3, [pc, #244]	; (800202c <timerRun+0x1e4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	4a3c      	ldr	r2, [pc, #240]	; (800202c <timerRun+0x1e4>)
 8001f3c:	6013      	str	r3, [r2, #0]
        if (timer7SEGCountYellowvertical_counter <= 0)
 8001f3e:	4b3b      	ldr	r3, [pc, #236]	; (800202c <timerRun+0x1e4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	dc02      	bgt.n	8001f4c <timerRun+0x104>
        {
            timer7SEGCountYellowvertical_flag = 1;
 8001f46:	4b3a      	ldr	r3, [pc, #232]	; (8002030 <timerRun+0x1e8>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
        }
    }

    if (timer7SEGCountGreenvertical_counter > 0)
 8001f4c:	4b39      	ldr	r3, [pc, #228]	; (8002034 <timerRun+0x1ec>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	dd0b      	ble.n	8001f6c <timerRun+0x124>
    {
        timer7SEGCountGreenvertical_counter--;
 8001f54:	4b37      	ldr	r3, [pc, #220]	; (8002034 <timerRun+0x1ec>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	4a36      	ldr	r2, [pc, #216]	; (8002034 <timerRun+0x1ec>)
 8001f5c:	6013      	str	r3, [r2, #0]
        if (timer7SEGCountGreenvertical_counter <= 0)
 8001f5e:	4b35      	ldr	r3, [pc, #212]	; (8002034 <timerRun+0x1ec>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	dc02      	bgt.n	8001f6c <timerRun+0x124>
        {
            timer7SEGCountGreenvertical_flag = 1;
 8001f66:	4b34      	ldr	r3, [pc, #208]	; (8002038 <timerRun+0x1f0>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]
        }
    }


    if (timerAuto_counter > 0)
 8001f6c:	4b33      	ldr	r3, [pc, #204]	; (800203c <timerRun+0x1f4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	dd0b      	ble.n	8001f8c <timerRun+0x144>
    {
        timerAuto_counter--;
 8001f74:	4b31      	ldr	r3, [pc, #196]	; (800203c <timerRun+0x1f4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	4a30      	ldr	r2, [pc, #192]	; (800203c <timerRun+0x1f4>)
 8001f7c:	6013      	str	r3, [r2, #0]
        if (timerAuto_counter <= 0)
 8001f7e:	4b2f      	ldr	r3, [pc, #188]	; (800203c <timerRun+0x1f4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	dc02      	bgt.n	8001f8c <timerRun+0x144>
        {
            timerAuto_flag = 1;
 8001f86:	4b2e      	ldr	r3, [pc, #184]	; (8002040 <timerRun+0x1f8>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]
        }
    }

    if (timerBlinkingRed_counter > 0)
 8001f8c:	4b2d      	ldr	r3, [pc, #180]	; (8002044 <timerRun+0x1fc>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	dd0b      	ble.n	8001fac <timerRun+0x164>
    {
    	timerBlinkingRed_counter--;
 8001f94:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <timerRun+0x1fc>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	4a2a      	ldr	r2, [pc, #168]	; (8002044 <timerRun+0x1fc>)
 8001f9c:	6013      	str	r3, [r2, #0]
    	if (timerBlinkingRed_counter <= 0)
 8001f9e:	4b29      	ldr	r3, [pc, #164]	; (8002044 <timerRun+0x1fc>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	dc02      	bgt.n	8001fac <timerRun+0x164>
    	{
    		timerBlinkingRed_flag = 1;
 8001fa6:	4b28      	ldr	r3, [pc, #160]	; (8002048 <timerRun+0x200>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	601a      	str	r2, [r3, #0]
    	}
    }
    if (timerBlinkingYellow_counter > 0)
 8001fac:	4b27      	ldr	r3, [pc, #156]	; (800204c <timerRun+0x204>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	dd0b      	ble.n	8001fcc <timerRun+0x184>
    {
        timerBlinkingYellow_counter--;
 8001fb4:	4b25      	ldr	r3, [pc, #148]	; (800204c <timerRun+0x204>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	4a24      	ldr	r2, [pc, #144]	; (800204c <timerRun+0x204>)
 8001fbc:	6013      	str	r3, [r2, #0]
        if (timerBlinkingYellow_counter <= 0)
 8001fbe:	4b23      	ldr	r3, [pc, #140]	; (800204c <timerRun+0x204>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	dc02      	bgt.n	8001fcc <timerRun+0x184>
        {
            timerBlinkingYellow_flag = 1;
 8001fc6:	4b22      	ldr	r3, [pc, #136]	; (8002050 <timerRun+0x208>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	601a      	str	r2, [r3, #0]
        }
    }
    if (timerBlinkingGreen_counter > 0)
 8001fcc:	4b21      	ldr	r3, [pc, #132]	; (8002054 <timerRun+0x20c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	dd0b      	ble.n	8001fec <timerRun+0x1a4>
    {
        timerBlinkingGreen_counter--;
 8001fd4:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <timerRun+0x20c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	4a1e      	ldr	r2, [pc, #120]	; (8002054 <timerRun+0x20c>)
 8001fdc:	6013      	str	r3, [r2, #0]
        if (timerBlinkingGreen_counter <= 0)
 8001fde:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <timerRun+0x20c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	dc02      	bgt.n	8001fec <timerRun+0x1a4>
        {
            timerBlinkingGreen_flag = 1;
 8001fe6:	4b1c      	ldr	r3, [pc, #112]	; (8002058 <timerRun+0x210>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	601a      	str	r2, [r3, #0]
        }
    }
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	200000ec 	.word	0x200000ec
 8001ff8:	200000e8 	.word	0x200000e8
 8001ffc:	200000f4 	.word	0x200000f4
 8002000:	200000f0 	.word	0x200000f0
 8002004:	200000fc 	.word	0x200000fc
 8002008:	200000f8 	.word	0x200000f8
 800200c:	20000104 	.word	0x20000104
 8002010:	20000100 	.word	0x20000100
 8002014:	2000010c 	.word	0x2000010c
 8002018:	20000108 	.word	0x20000108
 800201c:	20000114 	.word	0x20000114
 8002020:	20000110 	.word	0x20000110
 8002024:	2000011c 	.word	0x2000011c
 8002028:	20000118 	.word	0x20000118
 800202c:	20000124 	.word	0x20000124
 8002030:	20000120 	.word	0x20000120
 8002034:	2000012c 	.word	0x2000012c
 8002038:	20000128 	.word	0x20000128
 800203c:	20000134 	.word	0x20000134
 8002040:	20000130 	.word	0x20000130
 8002044:	2000013c 	.word	0x2000013c
 8002048:	20000138 	.word	0x20000138
 800204c:	20000144 	.word	0x20000144
 8002050:	20000140 	.word	0x20000140
 8002054:	2000014c 	.word	0x2000014c
 8002058:	20000148 	.word	0x20000148

0800205c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <HAL_MspInit+0x5c>)
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	4a14      	ldr	r2, [pc, #80]	; (80020b8 <HAL_MspInit+0x5c>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6193      	str	r3, [r2, #24]
 800206e:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_MspInit+0x5c>)
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	60bb      	str	r3, [r7, #8]
 8002078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800207a:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <HAL_MspInit+0x5c>)
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	4a0e      	ldr	r2, [pc, #56]	; (80020b8 <HAL_MspInit+0x5c>)
 8002080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002084:	61d3      	str	r3, [r2, #28]
 8002086:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <HAL_MspInit+0x5c>)
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <HAL_MspInit+0x60>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	4a04      	ldr	r2, [pc, #16]	; (80020bc <HAL_MspInit+0x60>)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ae:	bf00      	nop
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40010000 	.word	0x40010000

080020c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d0:	d113      	bne.n	80020fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020d2:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <HAL_TIM_Base_MspInit+0x44>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	4a0b      	ldr	r2, [pc, #44]	; (8002104 <HAL_TIM_Base_MspInit+0x44>)
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	61d3      	str	r3, [r2, #28]
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_TIM_Base_MspInit+0x44>)
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	201c      	movs	r0, #28
 80020f0:	f000 f9a1 	bl	8002436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020f4:	201c      	movs	r0, #28
 80020f6:	f000 f9ba 	bl	800246e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40021000 	.word	0x40021000

08002108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800210c:	e7fe      	b.n	800210c <NMI_Handler+0x4>

0800210e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002112:	e7fe      	b.n	8002112 <HardFault_Handler+0x4>

08002114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002118:	e7fe      	b.n	8002118 <MemManage_Handler+0x4>

0800211a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800211a:	b480      	push	{r7}
 800211c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800211e:	e7fe      	b.n	800211e <BusFault_Handler+0x4>

08002120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002124:	e7fe      	b.n	8002124 <UsageFault_Handler+0x4>

08002126 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr

08002132 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr

0800213e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr

0800214a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800214e:	f000 f87f 	bl	8002250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800215c:	4802      	ldr	r0, [pc, #8]	; (8002168 <TIM2_IRQHandler+0x10>)
 800215e:	f000 ffdb 	bl	8003118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000150 	.word	0x20000150

0800216c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr

08002178 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002178:	f7ff fff8 	bl	800216c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800217c:	480b      	ldr	r0, [pc, #44]	; (80021ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800217e:	490c      	ldr	r1, [pc, #48]	; (80021b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002180:	4a0c      	ldr	r2, [pc, #48]	; (80021b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002184:	e002      	b.n	800218c <LoopCopyDataInit>

08002186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218a:	3304      	adds	r3, #4

0800218c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800218c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002190:	d3f9      	bcc.n	8002186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002192:	4a09      	ldr	r2, [pc, #36]	; (80021b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002194:	4c09      	ldr	r4, [pc, #36]	; (80021bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002198:	e001      	b.n	800219e <LoopFillZerobss>

0800219a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800219c:	3204      	adds	r2, #4

0800219e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a0:	d3fb      	bcc.n	800219a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021a2:	f001 faf9 	bl	8003798 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021a6:	f7ff fbcb 	bl	8001940 <main>
  bx lr
 80021aa:	4770      	bx	lr
  ldr r0, =_sdata
 80021ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80021b4:	08003834 	.word	0x08003834
  ldr r2, =_sbss
 80021b8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80021bc:	2000019c 	.word	0x2000019c

080021c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021c0:	e7fe      	b.n	80021c0 <ADC1_2_IRQHandler>
	...

080021c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <HAL_Init+0x28>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a07      	ldr	r2, [pc, #28]	; (80021ec <HAL_Init+0x28>)
 80021ce:	f043 0310 	orr.w	r3, r3, #16
 80021d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d4:	2003      	movs	r0, #3
 80021d6:	f000 f923 	bl	8002420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021da:	200f      	movs	r0, #15
 80021dc:	f000 f808 	bl	80021f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021e0:	f7ff ff3c 	bl	800205c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40022000 	.word	0x40022000

080021f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_InitTick+0x54>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b12      	ldr	r3, [pc, #72]	; (8002248 <HAL_InitTick+0x58>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	4619      	mov	r1, r3
 8002202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002206:	fbb3 f3f1 	udiv	r3, r3, r1
 800220a:	fbb2 f3f3 	udiv	r3, r2, r3
 800220e:	4618      	mov	r0, r3
 8002210:	f000 f93b 	bl	800248a <HAL_SYSTICK_Config>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e00e      	b.n	800223c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b0f      	cmp	r3, #15
 8002222:	d80a      	bhi.n	800223a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002224:	2200      	movs	r2, #0
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	f04f 30ff 	mov.w	r0, #4294967295
 800222c:	f000 f903 	bl	8002436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002230:	4a06      	ldr	r2, [pc, #24]	; (800224c <HAL_InitTick+0x5c>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	e000      	b.n	800223c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000060 	.word	0x20000060
 8002248:	20000068 	.word	0x20000068
 800224c:	20000064 	.word	0x20000064

08002250 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002254:	4b05      	ldr	r3, [pc, #20]	; (800226c <HAL_IncTick+0x1c>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	461a      	mov	r2, r3
 800225a:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_IncTick+0x20>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4413      	add	r3, r2
 8002260:	4a03      	ldr	r2, [pc, #12]	; (8002270 <HAL_IncTick+0x20>)
 8002262:	6013      	str	r3, [r2, #0]
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	20000068 	.word	0x20000068
 8002270:	20000198 	.word	0x20000198

08002274 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return uwTick;
 8002278:	4b02      	ldr	r3, [pc, #8]	; (8002284 <HAL_GetTick+0x10>)
 800227a:	681b      	ldr	r3, [r3, #0]
}
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr
 8002284:	20000198 	.word	0x20000198

08002288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <__NVIC_SetPriorityGrouping+0x44>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022a4:	4013      	ands	r3, r2
 80022a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ba:	4a04      	ldr	r2, [pc, #16]	; (80022cc <__NVIC_SetPriorityGrouping+0x44>)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	60d3      	str	r3, [r2, #12]
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d4:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <__NVIC_GetPriorityGrouping+0x18>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	0a1b      	lsrs	r3, r3, #8
 80022da:	f003 0307 	and.w	r3, r3, #7
}
 80022de:	4618      	mov	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	db0b      	blt.n	8002316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	f003 021f 	and.w	r2, r3, #31
 8002304:	4906      	ldr	r1, [pc, #24]	; (8002320 <__NVIC_EnableIRQ+0x34>)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	2001      	movs	r0, #1
 800230e:	fa00 f202 	lsl.w	r2, r0, r2
 8002312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	e000e100 	.word	0xe000e100

08002324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	6039      	str	r1, [r7, #0]
 800232e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002334:	2b00      	cmp	r3, #0
 8002336:	db0a      	blt.n	800234e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	b2da      	uxtb	r2, r3
 800233c:	490c      	ldr	r1, [pc, #48]	; (8002370 <__NVIC_SetPriority+0x4c>)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	0112      	lsls	r2, r2, #4
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	440b      	add	r3, r1
 8002348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800234c:	e00a      	b.n	8002364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4908      	ldr	r1, [pc, #32]	; (8002374 <__NVIC_SetPriority+0x50>)
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	3b04      	subs	r3, #4
 800235c:	0112      	lsls	r2, r2, #4
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	440b      	add	r3, r1
 8002362:	761a      	strb	r2, [r3, #24]
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	e000e100 	.word	0xe000e100
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002378:	b480      	push	{r7}
 800237a:	b089      	sub	sp, #36	; 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f1c3 0307 	rsb	r3, r3, #7
 8002392:	2b04      	cmp	r3, #4
 8002394:	bf28      	it	cs
 8002396:	2304      	movcs	r3, #4
 8002398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3304      	adds	r3, #4
 800239e:	2b06      	cmp	r3, #6
 80023a0:	d902      	bls.n	80023a8 <NVIC_EncodePriority+0x30>
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3b03      	subs	r3, #3
 80023a6:	e000      	b.n	80023aa <NVIC_EncodePriority+0x32>
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	f04f 32ff 	mov.w	r2, #4294967295
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43da      	mvns	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	401a      	ands	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c0:	f04f 31ff 	mov.w	r1, #4294967295
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	43d9      	mvns	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	4313      	orrs	r3, r2
         );
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3724      	adds	r7, #36	; 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr

080023dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023ec:	d301      	bcc.n	80023f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ee:	2301      	movs	r3, #1
 80023f0:	e00f      	b.n	8002412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f2:	4a0a      	ldr	r2, [pc, #40]	; (800241c <SysTick_Config+0x40>)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fa:	210f      	movs	r1, #15
 80023fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002400:	f7ff ff90 	bl	8002324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002404:	4b05      	ldr	r3, [pc, #20]	; (800241c <SysTick_Config+0x40>)
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240a:	4b04      	ldr	r3, [pc, #16]	; (800241c <SysTick_Config+0x40>)
 800240c:	2207      	movs	r2, #7
 800240e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	e000e010 	.word	0xe000e010

08002420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff ff2d 	bl	8002288 <__NVIC_SetPriorityGrouping>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002436:	b580      	push	{r7, lr}
 8002438:	b086      	sub	sp, #24
 800243a:	af00      	add	r7, sp, #0
 800243c:	4603      	mov	r3, r0
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
 8002442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002448:	f7ff ff42 	bl	80022d0 <__NVIC_GetPriorityGrouping>
 800244c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	6978      	ldr	r0, [r7, #20]
 8002454:	f7ff ff90 	bl	8002378 <NVIC_EncodePriority>
 8002458:	4602      	mov	r2, r0
 800245a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800245e:	4611      	mov	r1, r2
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff5f 	bl	8002324 <__NVIC_SetPriority>
}
 8002466:	bf00      	nop
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	4603      	mov	r3, r0
 8002476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff ff35 	bl	80022ec <__NVIC_EnableIRQ>
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff ffa2 	bl	80023dc <SysTick_Config>
 8002498:	4603      	mov	r3, r0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b08b      	sub	sp, #44	; 0x2c
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ae:	2300      	movs	r3, #0
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024b2:	2300      	movs	r3, #0
 80024b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024b6:	e148      	b.n	800274a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024b8:	2201      	movs	r2, #1
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	f040 8137 	bne.w	8002744 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4aa3      	ldr	r2, [pc, #652]	; (8002768 <HAL_GPIO_Init+0x2c4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d05e      	beq.n	800259e <HAL_GPIO_Init+0xfa>
 80024e0:	4aa1      	ldr	r2, [pc, #644]	; (8002768 <HAL_GPIO_Init+0x2c4>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d875      	bhi.n	80025d2 <HAL_GPIO_Init+0x12e>
 80024e6:	4aa1      	ldr	r2, [pc, #644]	; (800276c <HAL_GPIO_Init+0x2c8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d058      	beq.n	800259e <HAL_GPIO_Init+0xfa>
 80024ec:	4a9f      	ldr	r2, [pc, #636]	; (800276c <HAL_GPIO_Init+0x2c8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d86f      	bhi.n	80025d2 <HAL_GPIO_Init+0x12e>
 80024f2:	4a9f      	ldr	r2, [pc, #636]	; (8002770 <HAL_GPIO_Init+0x2cc>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d052      	beq.n	800259e <HAL_GPIO_Init+0xfa>
 80024f8:	4a9d      	ldr	r2, [pc, #628]	; (8002770 <HAL_GPIO_Init+0x2cc>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d869      	bhi.n	80025d2 <HAL_GPIO_Init+0x12e>
 80024fe:	4a9d      	ldr	r2, [pc, #628]	; (8002774 <HAL_GPIO_Init+0x2d0>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d04c      	beq.n	800259e <HAL_GPIO_Init+0xfa>
 8002504:	4a9b      	ldr	r2, [pc, #620]	; (8002774 <HAL_GPIO_Init+0x2d0>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d863      	bhi.n	80025d2 <HAL_GPIO_Init+0x12e>
 800250a:	4a9b      	ldr	r2, [pc, #620]	; (8002778 <HAL_GPIO_Init+0x2d4>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d046      	beq.n	800259e <HAL_GPIO_Init+0xfa>
 8002510:	4a99      	ldr	r2, [pc, #612]	; (8002778 <HAL_GPIO_Init+0x2d4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d85d      	bhi.n	80025d2 <HAL_GPIO_Init+0x12e>
 8002516:	2b12      	cmp	r3, #18
 8002518:	d82a      	bhi.n	8002570 <HAL_GPIO_Init+0xcc>
 800251a:	2b12      	cmp	r3, #18
 800251c:	d859      	bhi.n	80025d2 <HAL_GPIO_Init+0x12e>
 800251e:	a201      	add	r2, pc, #4	; (adr r2, 8002524 <HAL_GPIO_Init+0x80>)
 8002520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002524:	0800259f 	.word	0x0800259f
 8002528:	08002579 	.word	0x08002579
 800252c:	0800258b 	.word	0x0800258b
 8002530:	080025cd 	.word	0x080025cd
 8002534:	080025d3 	.word	0x080025d3
 8002538:	080025d3 	.word	0x080025d3
 800253c:	080025d3 	.word	0x080025d3
 8002540:	080025d3 	.word	0x080025d3
 8002544:	080025d3 	.word	0x080025d3
 8002548:	080025d3 	.word	0x080025d3
 800254c:	080025d3 	.word	0x080025d3
 8002550:	080025d3 	.word	0x080025d3
 8002554:	080025d3 	.word	0x080025d3
 8002558:	080025d3 	.word	0x080025d3
 800255c:	080025d3 	.word	0x080025d3
 8002560:	080025d3 	.word	0x080025d3
 8002564:	080025d3 	.word	0x080025d3
 8002568:	08002581 	.word	0x08002581
 800256c:	08002595 	.word	0x08002595
 8002570:	4a82      	ldr	r2, [pc, #520]	; (800277c <HAL_GPIO_Init+0x2d8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d013      	beq.n	800259e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002576:	e02c      	b.n	80025d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	623b      	str	r3, [r7, #32]
          break;
 800257e:	e029      	b.n	80025d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	3304      	adds	r3, #4
 8002586:	623b      	str	r3, [r7, #32]
          break;
 8002588:	e024      	b.n	80025d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	3308      	adds	r3, #8
 8002590:	623b      	str	r3, [r7, #32]
          break;
 8002592:	e01f      	b.n	80025d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	330c      	adds	r3, #12
 800259a:	623b      	str	r3, [r7, #32]
          break;
 800259c:	e01a      	b.n	80025d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d102      	bne.n	80025ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025a6:	2304      	movs	r3, #4
 80025a8:	623b      	str	r3, [r7, #32]
          break;
 80025aa:	e013      	b.n	80025d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d105      	bne.n	80025c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025b4:	2308      	movs	r3, #8
 80025b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	611a      	str	r2, [r3, #16]
          break;
 80025be:	e009      	b.n	80025d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025c0:	2308      	movs	r3, #8
 80025c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	615a      	str	r2, [r3, #20]
          break;
 80025ca:	e003      	b.n	80025d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025cc:	2300      	movs	r3, #0
 80025ce:	623b      	str	r3, [r7, #32]
          break;
 80025d0:	e000      	b.n	80025d4 <HAL_GPIO_Init+0x130>
          break;
 80025d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	2bff      	cmp	r3, #255	; 0xff
 80025d8:	d801      	bhi.n	80025de <HAL_GPIO_Init+0x13a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	e001      	b.n	80025e2 <HAL_GPIO_Init+0x13e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3304      	adds	r3, #4
 80025e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	2bff      	cmp	r3, #255	; 0xff
 80025e8:	d802      	bhi.n	80025f0 <HAL_GPIO_Init+0x14c>
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	e002      	b.n	80025f6 <HAL_GPIO_Init+0x152>
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	3b08      	subs	r3, #8
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	210f      	movs	r1, #15
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	fa01 f303 	lsl.w	r3, r1, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	401a      	ands	r2, r3
 8002608:	6a39      	ldr	r1, [r7, #32]
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	fa01 f303 	lsl.w	r3, r1, r3
 8002610:	431a      	orrs	r2, r3
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 8090 	beq.w	8002744 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002624:	4b56      	ldr	r3, [pc, #344]	; (8002780 <HAL_GPIO_Init+0x2dc>)
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	4a55      	ldr	r2, [pc, #340]	; (8002780 <HAL_GPIO_Init+0x2dc>)
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	6193      	str	r3, [r2, #24]
 8002630:	4b53      	ldr	r3, [pc, #332]	; (8002780 <HAL_GPIO_Init+0x2dc>)
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800263c:	4a51      	ldr	r2, [pc, #324]	; (8002784 <HAL_GPIO_Init+0x2e0>)
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	089b      	lsrs	r3, r3, #2
 8002642:	3302      	adds	r3, #2
 8002644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002648:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	220f      	movs	r2, #15
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	4013      	ands	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a49      	ldr	r2, [pc, #292]	; (8002788 <HAL_GPIO_Init+0x2e4>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d00d      	beq.n	8002684 <HAL_GPIO_Init+0x1e0>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a48      	ldr	r2, [pc, #288]	; (800278c <HAL_GPIO_Init+0x2e8>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d007      	beq.n	8002680 <HAL_GPIO_Init+0x1dc>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a47      	ldr	r2, [pc, #284]	; (8002790 <HAL_GPIO_Init+0x2ec>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d101      	bne.n	800267c <HAL_GPIO_Init+0x1d8>
 8002678:	2302      	movs	r3, #2
 800267a:	e004      	b.n	8002686 <HAL_GPIO_Init+0x1e2>
 800267c:	2303      	movs	r3, #3
 800267e:	e002      	b.n	8002686 <HAL_GPIO_Init+0x1e2>
 8002680:	2301      	movs	r3, #1
 8002682:	e000      	b.n	8002686 <HAL_GPIO_Init+0x1e2>
 8002684:	2300      	movs	r3, #0
 8002686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002688:	f002 0203 	and.w	r2, r2, #3
 800268c:	0092      	lsls	r2, r2, #2
 800268e:	4093      	lsls	r3, r2
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4313      	orrs	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002696:	493b      	ldr	r1, [pc, #236]	; (8002784 <HAL_GPIO_Init+0x2e0>)
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	089b      	lsrs	r3, r3, #2
 800269c:	3302      	adds	r3, #2
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d006      	beq.n	80026be <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026b0:	4b38      	ldr	r3, [pc, #224]	; (8002794 <HAL_GPIO_Init+0x2f0>)
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	4937      	ldr	r1, [pc, #220]	; (8002794 <HAL_GPIO_Init+0x2f0>)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	608b      	str	r3, [r1, #8]
 80026bc:	e006      	b.n	80026cc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026be:	4b35      	ldr	r3, [pc, #212]	; (8002794 <HAL_GPIO_Init+0x2f0>)
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	4933      	ldr	r1, [pc, #204]	; (8002794 <HAL_GPIO_Init+0x2f0>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d006      	beq.n	80026e6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026d8:	4b2e      	ldr	r3, [pc, #184]	; (8002794 <HAL_GPIO_Init+0x2f0>)
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	492d      	ldr	r1, [pc, #180]	; (8002794 <HAL_GPIO_Init+0x2f0>)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60cb      	str	r3, [r1, #12]
 80026e4:	e006      	b.n	80026f4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026e6:	4b2b      	ldr	r3, [pc, #172]	; (8002794 <HAL_GPIO_Init+0x2f0>)
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	4929      	ldr	r1, [pc, #164]	; (8002794 <HAL_GPIO_Init+0x2f0>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d006      	beq.n	800270e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002700:	4b24      	ldr	r3, [pc, #144]	; (8002794 <HAL_GPIO_Init+0x2f0>)
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	4923      	ldr	r1, [pc, #140]	; (8002794 <HAL_GPIO_Init+0x2f0>)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	604b      	str	r3, [r1, #4]
 800270c:	e006      	b.n	800271c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800270e:	4b21      	ldr	r3, [pc, #132]	; (8002794 <HAL_GPIO_Init+0x2f0>)
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	43db      	mvns	r3, r3
 8002716:	491f      	ldr	r1, [pc, #124]	; (8002794 <HAL_GPIO_Init+0x2f0>)
 8002718:	4013      	ands	r3, r2
 800271a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d006      	beq.n	8002736 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002728:	4b1a      	ldr	r3, [pc, #104]	; (8002794 <HAL_GPIO_Init+0x2f0>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4919      	ldr	r1, [pc, #100]	; (8002794 <HAL_GPIO_Init+0x2f0>)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	4313      	orrs	r3, r2
 8002732:	600b      	str	r3, [r1, #0]
 8002734:	e006      	b.n	8002744 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002736:	4b17      	ldr	r3, [pc, #92]	; (8002794 <HAL_GPIO_Init+0x2f0>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	43db      	mvns	r3, r3
 800273e:	4915      	ldr	r1, [pc, #84]	; (8002794 <HAL_GPIO_Init+0x2f0>)
 8002740:	4013      	ands	r3, r2
 8002742:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	3301      	adds	r3, #1
 8002748:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	fa22 f303 	lsr.w	r3, r2, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	f47f aeaf 	bne.w	80024b8 <HAL_GPIO_Init+0x14>
  }
}
 800275a:	bf00      	nop
 800275c:	bf00      	nop
 800275e:	372c      	adds	r7, #44	; 0x2c
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	10320000 	.word	0x10320000
 800276c:	10310000 	.word	0x10310000
 8002770:	10220000 	.word	0x10220000
 8002774:	10210000 	.word	0x10210000
 8002778:	10120000 	.word	0x10120000
 800277c:	10110000 	.word	0x10110000
 8002780:	40021000 	.word	0x40021000
 8002784:	40010000 	.word	0x40010000
 8002788:	40010800 	.word	0x40010800
 800278c:	40010c00 	.word	0x40010c00
 8002790:	40011000 	.word	0x40011000
 8002794:	40010400 	.word	0x40010400

08002798 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	887b      	ldrh	r3, [r7, #2]
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027b0:	2301      	movs	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
 80027b4:	e001      	b.n	80027ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027b6:	2300      	movs	r3, #0
 80027b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr

080027c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	460b      	mov	r3, r1
 80027d0:	807b      	strh	r3, [r7, #2]
 80027d2:	4613      	mov	r3, r2
 80027d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027d6:	787b      	ldrb	r3, [r7, #1]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027dc:	887a      	ldrh	r2, [r7, #2]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027e2:	e003      	b.n	80027ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027e4:	887b      	ldrh	r3, [r7, #2]
 80027e6:	041a      	lsls	r2, r3, #16
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	611a      	str	r2, [r3, #16]
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr

080027f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b085      	sub	sp, #20
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	460b      	mov	r3, r1
 8002800:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002808:	887a      	ldrh	r2, [r7, #2]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4013      	ands	r3, r2
 800280e:	041a      	lsls	r2, r3, #16
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	43d9      	mvns	r1, r3
 8002814:	887b      	ldrh	r3, [r7, #2]
 8002816:	400b      	ands	r3, r1
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	611a      	str	r2, [r3, #16]
}
 800281e:	bf00      	nop
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e26c      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 8087 	beq.w	8002956 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002848:	4b92      	ldr	r3, [pc, #584]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 030c 	and.w	r3, r3, #12
 8002850:	2b04      	cmp	r3, #4
 8002852:	d00c      	beq.n	800286e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002854:	4b8f      	ldr	r3, [pc, #572]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	2b08      	cmp	r3, #8
 800285e:	d112      	bne.n	8002886 <HAL_RCC_OscConfig+0x5e>
 8002860:	4b8c      	ldr	r3, [pc, #560]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286c:	d10b      	bne.n	8002886 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286e:	4b89      	ldr	r3, [pc, #548]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d06c      	beq.n	8002954 <HAL_RCC_OscConfig+0x12c>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d168      	bne.n	8002954 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e246      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800288e:	d106      	bne.n	800289e <HAL_RCC_OscConfig+0x76>
 8002890:	4b80      	ldr	r3, [pc, #512]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a7f      	ldr	r2, [pc, #508]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	e02e      	b.n	80028fc <HAL_RCC_OscConfig+0xd4>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCC_OscConfig+0x98>
 80028a6:	4b7b      	ldr	r3, [pc, #492]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a7a      	ldr	r2, [pc, #488]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	4b78      	ldr	r3, [pc, #480]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a77      	ldr	r2, [pc, #476]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	e01d      	b.n	80028fc <HAL_RCC_OscConfig+0xd4>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028c8:	d10c      	bne.n	80028e4 <HAL_RCC_OscConfig+0xbc>
 80028ca:	4b72      	ldr	r3, [pc, #456]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a71      	ldr	r2, [pc, #452]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	4b6f      	ldr	r3, [pc, #444]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a6e      	ldr	r2, [pc, #440]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	e00b      	b.n	80028fc <HAL_RCC_OscConfig+0xd4>
 80028e4:	4b6b      	ldr	r3, [pc, #428]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a6a      	ldr	r2, [pc, #424]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	4b68      	ldr	r3, [pc, #416]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a67      	ldr	r2, [pc, #412]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80028f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d013      	beq.n	800292c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7ff fcb6 	bl	8002274 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800290c:	f7ff fcb2 	bl	8002274 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b64      	cmp	r3, #100	; 0x64
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e1fa      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291e:	4b5d      	ldr	r3, [pc, #372]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0xe4>
 800292a:	e014      	b.n	8002956 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7ff fca2 	bl	8002274 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002934:	f7ff fc9e 	bl	8002274 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	; 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e1e6      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002946:	4b53      	ldr	r3, [pc, #332]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x10c>
 8002952:	e000      	b.n	8002956 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d063      	beq.n	8002a2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002962:	4b4c      	ldr	r3, [pc, #304]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00b      	beq.n	8002986 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800296e:	4b49      	ldr	r3, [pc, #292]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	2b08      	cmp	r3, #8
 8002978:	d11c      	bne.n	80029b4 <HAL_RCC_OscConfig+0x18c>
 800297a:	4b46      	ldr	r3, [pc, #280]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d116      	bne.n	80029b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002986:	4b43      	ldr	r3, [pc, #268]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <HAL_RCC_OscConfig+0x176>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d001      	beq.n	800299e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e1ba      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299e:	4b3d      	ldr	r3, [pc, #244]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4939      	ldr	r1, [pc, #228]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b2:	e03a      	b.n	8002a2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d020      	beq.n	80029fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029bc:	4b36      	ldr	r3, [pc, #216]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 80029be:	2201      	movs	r2, #1
 80029c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c2:	f7ff fc57 	bl	8002274 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ca:	f7ff fc53 	bl	8002274 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e19b      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029dc:	4b2d      	ldr	r3, [pc, #180]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0f0      	beq.n	80029ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e8:	4b2a      	ldr	r3, [pc, #168]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4927      	ldr	r1, [pc, #156]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	600b      	str	r3, [r1, #0]
 80029fc:	e015      	b.n	8002a2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029fe:	4b26      	ldr	r3, [pc, #152]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7ff fc36 	bl	8002274 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a0c:	f7ff fc32 	bl	8002274 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e17a      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1e:	4b1d      	ldr	r3, [pc, #116]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f0      	bne.n	8002a0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d03a      	beq.n	8002aac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d019      	beq.n	8002a72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a3e:	4b17      	ldr	r3, [pc, #92]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 8002a40:	2201      	movs	r2, #1
 8002a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a44:	f7ff fc16 	bl	8002274 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a4c:	f7ff fc12 	bl	8002274 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e15a      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <HAL_RCC_OscConfig+0x26c>)
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a6a:	2001      	movs	r0, #1
 8002a6c:	f000 fa9a 	bl	8002fa4 <RCC_Delay>
 8002a70:	e01c      	b.n	8002aac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a72:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a78:	f7ff fbfc 	bl	8002274 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a7e:	e00f      	b.n	8002aa0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a80:	f7ff fbf8 	bl	8002274 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d908      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e140      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000
 8002a98:	42420000 	.word	0x42420000
 8002a9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa0:	4b9e      	ldr	r3, [pc, #632]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1e9      	bne.n	8002a80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 80a6 	beq.w	8002c06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aba:	2300      	movs	r3, #0
 8002abc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002abe:	4b97      	ldr	r3, [pc, #604]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10d      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aca:	4b94      	ldr	r3, [pc, #592]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	4a93      	ldr	r2, [pc, #588]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad4:	61d3      	str	r3, [r2, #28]
 8002ad6:	4b91      	ldr	r3, [pc, #580]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ade:	60bb      	str	r3, [r7, #8]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae6:	4b8e      	ldr	r3, [pc, #568]	; (8002d20 <HAL_RCC_OscConfig+0x4f8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d118      	bne.n	8002b24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002af2:	4b8b      	ldr	r3, [pc, #556]	; (8002d20 <HAL_RCC_OscConfig+0x4f8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a8a      	ldr	r2, [pc, #552]	; (8002d20 <HAL_RCC_OscConfig+0x4f8>)
 8002af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002afc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002afe:	f7ff fbb9 	bl	8002274 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b06:	f7ff fbb5 	bl	8002274 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b64      	cmp	r3, #100	; 0x64
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e0fd      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b18:	4b81      	ldr	r3, [pc, #516]	; (8002d20 <HAL_RCC_OscConfig+0x4f8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0f0      	beq.n	8002b06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d106      	bne.n	8002b3a <HAL_RCC_OscConfig+0x312>
 8002b2c:	4b7b      	ldr	r3, [pc, #492]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	4a7a      	ldr	r2, [pc, #488]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	6213      	str	r3, [r2, #32]
 8002b38:	e02d      	b.n	8002b96 <HAL_RCC_OscConfig+0x36e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10c      	bne.n	8002b5c <HAL_RCC_OscConfig+0x334>
 8002b42:	4b76      	ldr	r3, [pc, #472]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	4a75      	ldr	r2, [pc, #468]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002b48:	f023 0301 	bic.w	r3, r3, #1
 8002b4c:	6213      	str	r3, [r2, #32]
 8002b4e:	4b73      	ldr	r3, [pc, #460]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	4a72      	ldr	r2, [pc, #456]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002b54:	f023 0304 	bic.w	r3, r3, #4
 8002b58:	6213      	str	r3, [r2, #32]
 8002b5a:	e01c      	b.n	8002b96 <HAL_RCC_OscConfig+0x36e>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	2b05      	cmp	r3, #5
 8002b62:	d10c      	bne.n	8002b7e <HAL_RCC_OscConfig+0x356>
 8002b64:	4b6d      	ldr	r3, [pc, #436]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	4a6c      	ldr	r2, [pc, #432]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002b6a:	f043 0304 	orr.w	r3, r3, #4
 8002b6e:	6213      	str	r3, [r2, #32]
 8002b70:	4b6a      	ldr	r3, [pc, #424]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	4a69      	ldr	r2, [pc, #420]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	6213      	str	r3, [r2, #32]
 8002b7c:	e00b      	b.n	8002b96 <HAL_RCC_OscConfig+0x36e>
 8002b7e:	4b67      	ldr	r3, [pc, #412]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	4a66      	ldr	r2, [pc, #408]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002b84:	f023 0301 	bic.w	r3, r3, #1
 8002b88:	6213      	str	r3, [r2, #32]
 8002b8a:	4b64      	ldr	r3, [pc, #400]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	4a63      	ldr	r2, [pc, #396]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002b90:	f023 0304 	bic.w	r3, r3, #4
 8002b94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d015      	beq.n	8002bca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9e:	f7ff fb69 	bl	8002274 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba4:	e00a      	b.n	8002bbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba6:	f7ff fb65 	bl	8002274 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e0ab      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbc:	4b57      	ldr	r3, [pc, #348]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0ee      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x37e>
 8002bc8:	e014      	b.n	8002bf4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bca:	f7ff fb53 	bl	8002274 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd0:	e00a      	b.n	8002be8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd2:	f7ff fb4f 	bl	8002274 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e095      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be8:	4b4c      	ldr	r3, [pc, #304]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1ee      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bf4:	7dfb      	ldrb	r3, [r7, #23]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d105      	bne.n	8002c06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfa:	4b48      	ldr	r3, [pc, #288]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	4a47      	ldr	r2, [pc, #284]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 8081 	beq.w	8002d12 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c10:	4b42      	ldr	r3, [pc, #264]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 030c 	and.w	r3, r3, #12
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d061      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d146      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c24:	4b3f      	ldr	r3, [pc, #252]	; (8002d24 <HAL_RCC_OscConfig+0x4fc>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2a:	f7ff fb23 	bl	8002274 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c32:	f7ff fb1f 	bl	8002274 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e067      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c44:	4b35      	ldr	r3, [pc, #212]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f0      	bne.n	8002c32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c58:	d108      	bne.n	8002c6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c5a:	4b30      	ldr	r3, [pc, #192]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	492d      	ldr	r1, [pc, #180]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c6c:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a19      	ldr	r1, [r3, #32]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	4927      	ldr	r1, [pc, #156]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c84:	4b27      	ldr	r3, [pc, #156]	; (8002d24 <HAL_RCC_OscConfig+0x4fc>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8a:	f7ff faf3 	bl	8002274 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c92:	f7ff faef 	bl	8002274 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e037      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ca4:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0f0      	beq.n	8002c92 <HAL_RCC_OscConfig+0x46a>
 8002cb0:	e02f      	b.n	8002d12 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb2:	4b1c      	ldr	r3, [pc, #112]	; (8002d24 <HAL_RCC_OscConfig+0x4fc>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7ff fadc 	bl	8002274 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc0:	f7ff fad8 	bl	8002274 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e020      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cd2:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x498>
 8002cde:	e018      	b.n	8002d12 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e013      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_RCC_OscConfig+0x4f4>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d106      	bne.n	8002d0e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d001      	beq.n	8002d12 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40007000 	.word	0x40007000
 8002d24:	42420060 	.word	0x42420060

08002d28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0d0      	b.n	8002ede <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d3c:	4b6a      	ldr	r3, [pc, #424]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d910      	bls.n	8002d6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4a:	4b67      	ldr	r3, [pc, #412]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f023 0207 	bic.w	r2, r3, #7
 8002d52:	4965      	ldr	r1, [pc, #404]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5a:	4b63      	ldr	r3, [pc, #396]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0b8      	b.n	8002ede <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d020      	beq.n	8002dba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d84:	4b59      	ldr	r3, [pc, #356]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	4a58      	ldr	r2, [pc, #352]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002d8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d005      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d9c:	4b53      	ldr	r3, [pc, #332]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	4a52      	ldr	r2, [pc, #328]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002da2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002da6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da8:	4b50      	ldr	r3, [pc, #320]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	494d      	ldr	r1, [pc, #308]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d040      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d107      	bne.n	8002dde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dce:	4b47      	ldr	r3, [pc, #284]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d115      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e07f      	b.n	8002ede <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d107      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de6:	4b41      	ldr	r3, [pc, #260]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d109      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e073      	b.n	8002ede <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df6:	4b3d      	ldr	r3, [pc, #244]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e06b      	b.n	8002ede <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e06:	4b39      	ldr	r3, [pc, #228]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f023 0203 	bic.w	r2, r3, #3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	4936      	ldr	r1, [pc, #216]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e18:	f7ff fa2c 	bl	8002274 <HAL_GetTick>
 8002e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1e:	e00a      	b.n	8002e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e20:	f7ff fa28 	bl	8002274 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e053      	b.n	8002ede <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e36:	4b2d      	ldr	r3, [pc, #180]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f003 020c 	and.w	r2, r3, #12
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d1eb      	bne.n	8002e20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e48:	4b27      	ldr	r3, [pc, #156]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d210      	bcs.n	8002e78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e56:	4b24      	ldr	r3, [pc, #144]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 0207 	bic.w	r2, r3, #7
 8002e5e:	4922      	ldr	r1, [pc, #136]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e66:	4b20      	ldr	r3, [pc, #128]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d001      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e032      	b.n	8002ede <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e84:	4b19      	ldr	r3, [pc, #100]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	4916      	ldr	r1, [pc, #88]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d009      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ea2:	4b12      	ldr	r3, [pc, #72]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	490e      	ldr	r1, [pc, #56]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eb6:	f000 f821 	bl	8002efc <HAL_RCC_GetSysClockFreq>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	091b      	lsrs	r3, r3, #4
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	490a      	ldr	r1, [pc, #40]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec8:	5ccb      	ldrb	r3, [r1, r3]
 8002eca:	fa22 f303 	lsr.w	r3, r2, r3
 8002ece:	4a09      	ldr	r2, [pc, #36]	; (8002ef4 <HAL_RCC_ClockConfig+0x1cc>)
 8002ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ed2:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <HAL_RCC_ClockConfig+0x1d0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff f98a 	bl	80021f0 <HAL_InitTick>

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40022000 	.word	0x40022000
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	08003808 	.word	0x08003808
 8002ef4:	20000060 	.word	0x20000060
 8002ef8:	20000064 	.word	0x20000064

08002efc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b087      	sub	sp, #28
 8002f00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	2300      	movs	r3, #0
 8002f08:	60bb      	str	r3, [r7, #8]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
 8002f0e:	2300      	movs	r3, #0
 8002f10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f16:	4b1e      	ldr	r3, [pc, #120]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d002      	beq.n	8002f2c <HAL_RCC_GetSysClockFreq+0x30>
 8002f26:	2b08      	cmp	r3, #8
 8002f28:	d003      	beq.n	8002f32 <HAL_RCC_GetSysClockFreq+0x36>
 8002f2a:	e027      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f2c:	4b19      	ldr	r3, [pc, #100]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f2e:	613b      	str	r3, [r7, #16]
      break;
 8002f30:	e027      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	0c9b      	lsrs	r3, r3, #18
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	4a17      	ldr	r2, [pc, #92]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f3c:	5cd3      	ldrb	r3, [r2, r3]
 8002f3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d010      	beq.n	8002f6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f4a:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	0c5b      	lsrs	r3, r3, #17
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	4a11      	ldr	r2, [pc, #68]	; (8002f9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f56:	5cd3      	ldrb	r3, [r2, r3]
 8002f58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a0d      	ldr	r2, [pc, #52]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f5e:	fb02 f203 	mul.w	r2, r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	e004      	b.n	8002f76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a0c      	ldr	r2, [pc, #48]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f70:	fb02 f303 	mul.w	r3, r2, r3
 8002f74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	613b      	str	r3, [r7, #16]
      break;
 8002f7a:	e002      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f7c:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f7e:	613b      	str	r3, [r7, #16]
      break;
 8002f80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f82:	693b      	ldr	r3, [r7, #16]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	371c      	adds	r7, #28
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40021000 	.word	0x40021000
 8002f94:	007a1200 	.word	0x007a1200
 8002f98:	08003818 	.word	0x08003818
 8002f9c:	08003828 	.word	0x08003828
 8002fa0:	003d0900 	.word	0x003d0900

08002fa4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fac:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <RCC_Delay+0x34>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a0a      	ldr	r2, [pc, #40]	; (8002fdc <RCC_Delay+0x38>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	0a5b      	lsrs	r3, r3, #9
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	fb02 f303 	mul.w	r3, r2, r3
 8002fbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fc0:	bf00      	nop
  }
  while (Delay --);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1e5a      	subs	r2, r3, #1
 8002fc6:	60fa      	str	r2, [r7, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f9      	bne.n	8002fc0 <RCC_Delay+0x1c>
}
 8002fcc:	bf00      	nop
 8002fce:	bf00      	nop
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr
 8002fd8:	20000060 	.word	0x20000060
 8002fdc:	10624dd3 	.word	0x10624dd3

08002fe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e041      	b.n	8003076 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff f85a 	bl	80020c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3304      	adds	r3, #4
 800301c:	4619      	mov	r1, r3
 800301e:	4610      	mov	r0, r2
 8003020:	f000 fa56 	bl	80034d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b01      	cmp	r3, #1
 8003092:	d001      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e035      	b.n	8003104 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a16      	ldr	r2, [pc, #88]	; (8003110 <HAL_TIM_Base_Start_IT+0x90>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d009      	beq.n	80030ce <HAL_TIM_Base_Start_IT+0x4e>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c2:	d004      	beq.n	80030ce <HAL_TIM_Base_Start_IT+0x4e>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a12      	ldr	r2, [pc, #72]	; (8003114 <HAL_TIM_Base_Start_IT+0x94>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d111      	bne.n	80030f2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2b06      	cmp	r3, #6
 80030de:	d010      	beq.n	8003102 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f0:	e007      	b.n	8003102 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f042 0201 	orr.w	r2, r2, #1
 8003100:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40012c00 	.word	0x40012c00
 8003114:	40000400 	.word	0x40000400

08003118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d020      	beq.n	800317c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d01b      	beq.n	800317c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0202 	mvn.w	r2, #2
 800314c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f998 	bl	8003498 <HAL_TIM_IC_CaptureCallback>
 8003168:	e005      	b.n	8003176 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f98b 	bl	8003486 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f99a 	bl	80034aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	2b00      	cmp	r3, #0
 8003184:	d020      	beq.n	80031c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d01b      	beq.n	80031c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0204 	mvn.w	r2, #4
 8003198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2202      	movs	r2, #2
 800319e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f972 	bl	8003498 <HAL_TIM_IC_CaptureCallback>
 80031b4:	e005      	b.n	80031c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f965 	bl	8003486 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f974 	bl	80034aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d020      	beq.n	8003214 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d01b      	beq.n	8003214 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0208 	mvn.w	r2, #8
 80031e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2204      	movs	r2, #4
 80031ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f94c 	bl	8003498 <HAL_TIM_IC_CaptureCallback>
 8003200:	e005      	b.n	800320e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f93f 	bl	8003486 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f94e 	bl	80034aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f003 0310 	and.w	r3, r3, #16
 800321a:	2b00      	cmp	r3, #0
 800321c:	d020      	beq.n	8003260 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f003 0310 	and.w	r3, r3, #16
 8003224:	2b00      	cmp	r3, #0
 8003226:	d01b      	beq.n	8003260 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f06f 0210 	mvn.w	r2, #16
 8003230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2208      	movs	r2, #8
 8003236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f926 	bl	8003498 <HAL_TIM_IC_CaptureCallback>
 800324c:	e005      	b.n	800325a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f919 	bl	8003486 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f928 	bl	80034aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00c      	beq.n	8003284 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d007      	beq.n	8003284 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f06f 0201 	mvn.w	r2, #1
 800327c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fe fc7a 	bl	8001b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00c      	beq.n	80032a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003294:	2b00      	cmp	r3, #0
 8003296:	d007      	beq.n	80032a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fa6f 	bl	8003786 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00c      	beq.n	80032cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d007      	beq.n	80032cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f8f8 	bl	80034bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00c      	beq.n	80032f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f003 0320 	and.w	r3, r3, #32
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d007      	beq.n	80032f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f06f 0220 	mvn.w	r2, #32
 80032e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fa42 	bl	8003774 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032f0:	bf00      	nop
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003302:	2300      	movs	r3, #0
 8003304:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_TIM_ConfigClockSource+0x1c>
 8003310:	2302      	movs	r3, #2
 8003312:	e0b4      	b.n	800347e <HAL_TIM_ConfigClockSource+0x186>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800333a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800334c:	d03e      	beq.n	80033cc <HAL_TIM_ConfigClockSource+0xd4>
 800334e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003352:	f200 8087 	bhi.w	8003464 <HAL_TIM_ConfigClockSource+0x16c>
 8003356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335a:	f000 8086 	beq.w	800346a <HAL_TIM_ConfigClockSource+0x172>
 800335e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003362:	d87f      	bhi.n	8003464 <HAL_TIM_ConfigClockSource+0x16c>
 8003364:	2b70      	cmp	r3, #112	; 0x70
 8003366:	d01a      	beq.n	800339e <HAL_TIM_ConfigClockSource+0xa6>
 8003368:	2b70      	cmp	r3, #112	; 0x70
 800336a:	d87b      	bhi.n	8003464 <HAL_TIM_ConfigClockSource+0x16c>
 800336c:	2b60      	cmp	r3, #96	; 0x60
 800336e:	d050      	beq.n	8003412 <HAL_TIM_ConfigClockSource+0x11a>
 8003370:	2b60      	cmp	r3, #96	; 0x60
 8003372:	d877      	bhi.n	8003464 <HAL_TIM_ConfigClockSource+0x16c>
 8003374:	2b50      	cmp	r3, #80	; 0x50
 8003376:	d03c      	beq.n	80033f2 <HAL_TIM_ConfigClockSource+0xfa>
 8003378:	2b50      	cmp	r3, #80	; 0x50
 800337a:	d873      	bhi.n	8003464 <HAL_TIM_ConfigClockSource+0x16c>
 800337c:	2b40      	cmp	r3, #64	; 0x40
 800337e:	d058      	beq.n	8003432 <HAL_TIM_ConfigClockSource+0x13a>
 8003380:	2b40      	cmp	r3, #64	; 0x40
 8003382:	d86f      	bhi.n	8003464 <HAL_TIM_ConfigClockSource+0x16c>
 8003384:	2b30      	cmp	r3, #48	; 0x30
 8003386:	d064      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0x15a>
 8003388:	2b30      	cmp	r3, #48	; 0x30
 800338a:	d86b      	bhi.n	8003464 <HAL_TIM_ConfigClockSource+0x16c>
 800338c:	2b20      	cmp	r3, #32
 800338e:	d060      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0x15a>
 8003390:	2b20      	cmp	r3, #32
 8003392:	d867      	bhi.n	8003464 <HAL_TIM_ConfigClockSource+0x16c>
 8003394:	2b00      	cmp	r3, #0
 8003396:	d05c      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0x15a>
 8003398:	2b10      	cmp	r3, #16
 800339a:	d05a      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0x15a>
 800339c:	e062      	b.n	8003464 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6818      	ldr	r0, [r3, #0]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	6899      	ldr	r1, [r3, #8]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f000 f96a 	bl	8003686 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	609a      	str	r2, [r3, #8]
      break;
 80033ca:	e04f      	b.n	800346c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	6899      	ldr	r1, [r3, #8]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f000 f953 	bl	8003686 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033ee:	609a      	str	r2, [r3, #8]
      break;
 80033f0:	e03c      	b.n	800346c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	6859      	ldr	r1, [r3, #4]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	461a      	mov	r2, r3
 8003400:	f000 f8ca 	bl	8003598 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2150      	movs	r1, #80	; 0x50
 800340a:	4618      	mov	r0, r3
 800340c:	f000 f921 	bl	8003652 <TIM_ITRx_SetConfig>
      break;
 8003410:	e02c      	b.n	800346c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6818      	ldr	r0, [r3, #0]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	6859      	ldr	r1, [r3, #4]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	461a      	mov	r2, r3
 8003420:	f000 f8e8 	bl	80035f4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2160      	movs	r1, #96	; 0x60
 800342a:	4618      	mov	r0, r3
 800342c:	f000 f911 	bl	8003652 <TIM_ITRx_SetConfig>
      break;
 8003430:	e01c      	b.n	800346c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	6859      	ldr	r1, [r3, #4]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	461a      	mov	r2, r3
 8003440:	f000 f8aa 	bl	8003598 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2140      	movs	r1, #64	; 0x40
 800344a:	4618      	mov	r0, r3
 800344c:	f000 f901 	bl	8003652 <TIM_ITRx_SetConfig>
      break;
 8003450:	e00c      	b.n	800346c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4619      	mov	r1, r3
 800345c:	4610      	mov	r0, r2
 800345e:	f000 f8f8 	bl	8003652 <TIM_ITRx_SetConfig>
      break;
 8003462:	e003      	b.n	800346c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	73fb      	strb	r3, [r7, #15]
      break;
 8003468:	e000      	b.n	800346c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800346a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800347c:	7bfb      	ldrb	r3, [r7, #15]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr

08003498 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr

080034aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr

080034bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc80      	pop	{r7}
 80034cc:	4770      	bx	lr
	...

080034d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a2b      	ldr	r2, [pc, #172]	; (8003590 <TIM_Base_SetConfig+0xc0>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d007      	beq.n	80034f8 <TIM_Base_SetConfig+0x28>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ee:	d003      	beq.n	80034f8 <TIM_Base_SetConfig+0x28>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a28      	ldr	r2, [pc, #160]	; (8003594 <TIM_Base_SetConfig+0xc4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d108      	bne.n	800350a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a20      	ldr	r2, [pc, #128]	; (8003590 <TIM_Base_SetConfig+0xc0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d007      	beq.n	8003522 <TIM_Base_SetConfig+0x52>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003518:	d003      	beq.n	8003522 <TIM_Base_SetConfig+0x52>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a1d      	ldr	r2, [pc, #116]	; (8003594 <TIM_Base_SetConfig+0xc4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d108      	bne.n	8003534 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003528:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	4313      	orrs	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	4313      	orrs	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a0d      	ldr	r2, [pc, #52]	; (8003590 <TIM_Base_SetConfig+0xc0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d103      	bne.n	8003568 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	691a      	ldr	r2, [r3, #16]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d005      	beq.n	8003586 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	f023 0201 	bic.w	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	611a      	str	r2, [r3, #16]
  }
}
 8003586:	bf00      	nop
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr
 8003590:	40012c00 	.word	0x40012c00
 8003594:	40000400 	.word	0x40000400

08003598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	f023 0201 	bic.w	r2, r3, #1
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f023 030a 	bic.w	r3, r3, #10
 80035d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	4313      	orrs	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	621a      	str	r2, [r3, #32]
}
 80035ea:	bf00      	nop
 80035ec:	371c      	adds	r7, #28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr

080035f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	f023 0210 	bic.w	r2, r3, #16
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800361e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	031b      	lsls	r3, r3, #12
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003630:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	4313      	orrs	r3, r2
 800363a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	621a      	str	r2, [r3, #32]
}
 8003648:	bf00      	nop
 800364a:	371c      	adds	r7, #28
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr

08003652 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003652:	b480      	push	{r7}
 8003654:	b085      	sub	sp, #20
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
 800365a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003668:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	f043 0307 	orr.w	r3, r3, #7
 8003674:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	609a      	str	r2, [r3, #8]
}
 800367c:	bf00      	nop
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	bc80      	pop	{r7}
 8003684:	4770      	bx	lr

08003686 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003686:	b480      	push	{r7}
 8003688:	b087      	sub	sp, #28
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	021a      	lsls	r2, r3, #8
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	431a      	orrs	r2, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	609a      	str	r2, [r3, #8]
}
 80036ba:	bf00      	nop
 80036bc:	371c      	adds	r7, #28
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d101      	bne.n	80036dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036d8:	2302      	movs	r3, #2
 80036da:	e041      	b.n	8003760 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003702:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a14      	ldr	r2, [pc, #80]	; (800376c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d009      	beq.n	8003734 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003728:	d004      	beq.n	8003734 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a10      	ldr	r2, [pc, #64]	; (8003770 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d10c      	bne.n	800374e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800373a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	4313      	orrs	r3, r2
 8003744:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	40012c00 	.word	0x40012c00
 8003770:	40000400 	.word	0x40000400

08003774 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	bc80      	pop	{r7}
 8003784:	4770      	bx	lr

08003786 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr

08003798 <__libc_init_array>:
 8003798:	b570      	push	{r4, r5, r6, lr}
 800379a:	2600      	movs	r6, #0
 800379c:	4d0c      	ldr	r5, [pc, #48]	; (80037d0 <__libc_init_array+0x38>)
 800379e:	4c0d      	ldr	r4, [pc, #52]	; (80037d4 <__libc_init_array+0x3c>)
 80037a0:	1b64      	subs	r4, r4, r5
 80037a2:	10a4      	asrs	r4, r4, #2
 80037a4:	42a6      	cmp	r6, r4
 80037a6:	d109      	bne.n	80037bc <__libc_init_array+0x24>
 80037a8:	f000 f822 	bl	80037f0 <_init>
 80037ac:	2600      	movs	r6, #0
 80037ae:	4d0a      	ldr	r5, [pc, #40]	; (80037d8 <__libc_init_array+0x40>)
 80037b0:	4c0a      	ldr	r4, [pc, #40]	; (80037dc <__libc_init_array+0x44>)
 80037b2:	1b64      	subs	r4, r4, r5
 80037b4:	10a4      	asrs	r4, r4, #2
 80037b6:	42a6      	cmp	r6, r4
 80037b8:	d105      	bne.n	80037c6 <__libc_init_array+0x2e>
 80037ba:	bd70      	pop	{r4, r5, r6, pc}
 80037bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80037c0:	4798      	blx	r3
 80037c2:	3601      	adds	r6, #1
 80037c4:	e7ee      	b.n	80037a4 <__libc_init_array+0xc>
 80037c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ca:	4798      	blx	r3
 80037cc:	3601      	adds	r6, #1
 80037ce:	e7f2      	b.n	80037b6 <__libc_init_array+0x1e>
 80037d0:	0800382c 	.word	0x0800382c
 80037d4:	0800382c 	.word	0x0800382c
 80037d8:	0800382c 	.word	0x0800382c
 80037dc:	08003830 	.word	0x08003830

080037e0 <memset>:
 80037e0:	4603      	mov	r3, r0
 80037e2:	4402      	add	r2, r0
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d100      	bne.n	80037ea <memset+0xa>
 80037e8:	4770      	bx	lr
 80037ea:	f803 1b01 	strb.w	r1, [r3], #1
 80037ee:	e7f9      	b.n	80037e4 <memset+0x4>

080037f0 <_init>:
 80037f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f2:	bf00      	nop
 80037f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037f6:	bc08      	pop	{r3}
 80037f8:	469e      	mov	lr, r3
 80037fa:	4770      	bx	lr

080037fc <_fini>:
 80037fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fe:	bf00      	nop
 8003800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003802:	bc08      	pop	{r3}
 8003804:	469e      	mov	lr, r3
 8003806:	4770      	bx	lr
