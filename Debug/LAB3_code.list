
LAB3_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003b20  08003b20  00013b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b44  08003b44  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08003b44  08003b44  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b44  08003b44  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b44  08003b44  00013b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b48  08003b48  00013b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08003b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000088  08003bd4  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08003bd4  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097ea  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a99  00000000  00000000  0002989b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002b338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002bdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b90  00000000  00000000  0002c740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb5e  00000000  00000000  000432d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082801  00000000  00000000  0004ee2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d162f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029c4  00000000  00000000  000d1684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b08 	.word	0x08003b08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08003b08 	.word	0x08003b08

0800014c <display7SEGFinal>:

int EN_horizontal = 1;
int EN_vertical = 1;

void display7SEGFinal()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	display7SEGFinalhorizontal();
 8000150:	f000 fcac 	bl	8000aac <display7SEGFinalhorizontal>

	display7SEGFinalvertical();
 8000154:	f000 fbf2 	bl	800093c <display7SEGFinalvertical>
}
 8000158:	bf00      	nop
 800015a:	bd80      	pop	{r7, pc}

0800015c <display7SEGvertical>:

void display7SEGvertical(int num)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2b09      	cmp	r3, #9
 8000168:	f200 81b2 	bhi.w	80004d0 <display7SEGvertical+0x374>
 800016c:	a201      	add	r2, pc, #4	; (adr r2, 8000174 <display7SEGvertical+0x18>)
 800016e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000172:	bf00      	nop
 8000174:	0800019d 	.word	0x0800019d
 8000178:	080001ef 	.word	0x080001ef
 800017c:	08000241 	.word	0x08000241
 8000180:	08000293 	.word	0x08000293
 8000184:	080002e5 	.word	0x080002e5
 8000188:	08000337 	.word	0x08000337
 800018c:	08000389 	.word	0x08000389
 8000190:	080003db 	.word	0x080003db
 8000194:	0800042d 	.word	0x0800042d
 8000198:	0800047f 	.word	0x0800047f
	switch(num)
	{
	    case 0:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 800019c:	2200      	movs	r2, #0
 800019e:	2140      	movs	r1, #64	; 0x40
 80001a0:	48cd      	ldr	r0, [pc, #820]	; (80004d8 <display7SEGvertical+0x37c>)
 80001a2:	f002 fc9c 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80001a6:	2200      	movs	r2, #0
 80001a8:	2180      	movs	r1, #128	; 0x80
 80001aa:	48cb      	ldr	r0, [pc, #812]	; (80004d8 <display7SEGvertical+0x37c>)
 80001ac:	f002 fc97 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80001b0:	2200      	movs	r2, #0
 80001b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001b6:	48c8      	ldr	r0, [pc, #800]	; (80004d8 <display7SEGvertical+0x37c>)
 80001b8:	f002 fc91 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 80001bc:	2200      	movs	r2, #0
 80001be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001c2:	48c5      	ldr	r0, [pc, #788]	; (80004d8 <display7SEGvertical+0x37c>)
 80001c4:	f002 fc8b 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 80001c8:	2200      	movs	r2, #0
 80001ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001ce:	48c2      	ldr	r0, [pc, #776]	; (80004d8 <display7SEGvertical+0x37c>)
 80001d0:	f002 fc85 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 80001d4:	2200      	movs	r2, #0
 80001d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001da:	48bf      	ldr	r0, [pc, #764]	; (80004d8 <display7SEGvertical+0x37c>)
 80001dc:	f002 fc7f 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 80001e0:	2201      	movs	r2, #1
 80001e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001e6:	48bc      	ldr	r0, [pc, #752]	; (80004d8 <display7SEGvertical+0x37c>)
 80001e8:	f002 fc79 	bl	8002ade <HAL_GPIO_WritePin>
	        break;
 80001ec:	e170      	b.n	80004d0 <display7SEGvertical+0x374>
	    }
	    case 1:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_SET);
 80001ee:	2201      	movs	r2, #1
 80001f0:	2140      	movs	r1, #64	; 0x40
 80001f2:	48b9      	ldr	r0, [pc, #740]	; (80004d8 <display7SEGvertical+0x37c>)
 80001f4:	f002 fc73 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80001f8:	2200      	movs	r2, #0
 80001fa:	2180      	movs	r1, #128	; 0x80
 80001fc:	48b6      	ldr	r0, [pc, #728]	; (80004d8 <display7SEGvertical+0x37c>)
 80001fe:	f002 fc6e 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000202:	2200      	movs	r2, #0
 8000204:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000208:	48b3      	ldr	r0, [pc, #716]	; (80004d8 <display7SEGvertical+0x37c>)
 800020a:	f002 fc68 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 800020e:	2201      	movs	r2, #1
 8000210:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000214:	48b0      	ldr	r0, [pc, #704]	; (80004d8 <display7SEGvertical+0x37c>)
 8000216:	f002 fc62 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 800021a:	2201      	movs	r2, #1
 800021c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000220:	48ad      	ldr	r0, [pc, #692]	; (80004d8 <display7SEGvertical+0x37c>)
 8000222:	f002 fc5c 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 8000226:	2201      	movs	r2, #1
 8000228:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800022c:	48aa      	ldr	r0, [pc, #680]	; (80004d8 <display7SEGvertical+0x37c>)
 800022e:	f002 fc56 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 8000232:	2201      	movs	r2, #1
 8000234:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000238:	48a7      	ldr	r0, [pc, #668]	; (80004d8 <display7SEGvertical+0x37c>)
 800023a:	f002 fc50 	bl	8002ade <HAL_GPIO_WritePin>
	        break;
 800023e:	e147      	b.n	80004d0 <display7SEGvertical+0x374>
	    }
	    case 2:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000240:	2200      	movs	r2, #0
 8000242:	2140      	movs	r1, #64	; 0x40
 8000244:	48a4      	ldr	r0, [pc, #656]	; (80004d8 <display7SEGvertical+0x37c>)
 8000246:	f002 fc4a 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 800024a:	2200      	movs	r2, #0
 800024c:	2180      	movs	r1, #128	; 0x80
 800024e:	48a2      	ldr	r0, [pc, #648]	; (80004d8 <display7SEGvertical+0x37c>)
 8000250:	f002 fc45 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_SET);
 8000254:	2201      	movs	r2, #1
 8000256:	f44f 7180 	mov.w	r1, #256	; 0x100
 800025a:	489f      	ldr	r0, [pc, #636]	; (80004d8 <display7SEGvertical+0x37c>)
 800025c:	f002 fc3f 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000260:	2200      	movs	r2, #0
 8000262:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000266:	489c      	ldr	r0, [pc, #624]	; (80004d8 <display7SEGvertical+0x37c>)
 8000268:	f002 fc39 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 800026c:	2200      	movs	r2, #0
 800026e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000272:	4899      	ldr	r0, [pc, #612]	; (80004d8 <display7SEGvertical+0x37c>)
 8000274:	f002 fc33 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 8000278:	2201      	movs	r2, #1
 800027a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800027e:	4896      	ldr	r0, [pc, #600]	; (80004d8 <display7SEGvertical+0x37c>)
 8000280:	f002 fc2d 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000284:	2200      	movs	r2, #0
 8000286:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800028a:	4893      	ldr	r0, [pc, #588]	; (80004d8 <display7SEGvertical+0x37c>)
 800028c:	f002 fc27 	bl	8002ade <HAL_GPIO_WritePin>
	        break;
 8000290:	e11e      	b.n	80004d0 <display7SEGvertical+0x374>
	    }
	    case 3:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000292:	2200      	movs	r2, #0
 8000294:	2140      	movs	r1, #64	; 0x40
 8000296:	4890      	ldr	r0, [pc, #576]	; (80004d8 <display7SEGvertical+0x37c>)
 8000298:	f002 fc21 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 800029c:	2200      	movs	r2, #0
 800029e:	2180      	movs	r1, #128	; 0x80
 80002a0:	488d      	ldr	r0, [pc, #564]	; (80004d8 <display7SEGvertical+0x37c>)
 80002a2:	f002 fc1c 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80002a6:	2200      	movs	r2, #0
 80002a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ac:	488a      	ldr	r0, [pc, #552]	; (80004d8 <display7SEGvertical+0x37c>)
 80002ae:	f002 fc16 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 80002b2:	2200      	movs	r2, #0
 80002b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002b8:	4887      	ldr	r0, [pc, #540]	; (80004d8 <display7SEGvertical+0x37c>)
 80002ba:	f002 fc10 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 80002be:	2201      	movs	r2, #1
 80002c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002c4:	4884      	ldr	r0, [pc, #528]	; (80004d8 <display7SEGvertical+0x37c>)
 80002c6:	f002 fc0a 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 80002ca:	2201      	movs	r2, #1
 80002cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002d0:	4881      	ldr	r0, [pc, #516]	; (80004d8 <display7SEGvertical+0x37c>)
 80002d2:	f002 fc04 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 80002d6:	2200      	movs	r2, #0
 80002d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002dc:	487e      	ldr	r0, [pc, #504]	; (80004d8 <display7SEGvertical+0x37c>)
 80002de:	f002 fbfe 	bl	8002ade <HAL_GPIO_WritePin>
	        break;
 80002e2:	e0f5      	b.n	80004d0 <display7SEGvertical+0x374>
	    }
	    case 4:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_SET);
 80002e4:	2201      	movs	r2, #1
 80002e6:	2140      	movs	r1, #64	; 0x40
 80002e8:	487b      	ldr	r0, [pc, #492]	; (80004d8 <display7SEGvertical+0x37c>)
 80002ea:	f002 fbf8 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80002ee:	2200      	movs	r2, #0
 80002f0:	2180      	movs	r1, #128	; 0x80
 80002f2:	4879      	ldr	r0, [pc, #484]	; (80004d8 <display7SEGvertical+0x37c>)
 80002f4:	f002 fbf3 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002fe:	4876      	ldr	r0, [pc, #472]	; (80004d8 <display7SEGvertical+0x37c>)
 8000300:	f002 fbed 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 8000304:	2201      	movs	r2, #1
 8000306:	f44f 7100 	mov.w	r1, #512	; 0x200
 800030a:	4873      	ldr	r0, [pc, #460]	; (80004d8 <display7SEGvertical+0x37c>)
 800030c:	f002 fbe7 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8000310:	2201      	movs	r2, #1
 8000312:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000316:	4870      	ldr	r0, [pc, #448]	; (80004d8 <display7SEGvertical+0x37c>)
 8000318:	f002 fbe1 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000322:	486d      	ldr	r0, [pc, #436]	; (80004d8 <display7SEGvertical+0x37c>)
 8000324:	f002 fbdb 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800032e:	486a      	ldr	r0, [pc, #424]	; (80004d8 <display7SEGvertical+0x37c>)
 8000330:	f002 fbd5 	bl	8002ade <HAL_GPIO_WritePin>
	        break;
 8000334:	e0cc      	b.n	80004d0 <display7SEGvertical+0x374>
	    }
	    case 5:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000336:	2200      	movs	r2, #0
 8000338:	2140      	movs	r1, #64	; 0x40
 800033a:	4867      	ldr	r0, [pc, #412]	; (80004d8 <display7SEGvertical+0x37c>)
 800033c:	f002 fbcf 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_SET);
 8000340:	2201      	movs	r2, #1
 8000342:	2180      	movs	r1, #128	; 0x80
 8000344:	4864      	ldr	r0, [pc, #400]	; (80004d8 <display7SEGvertical+0x37c>)
 8000346:	f002 fbca 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000350:	4861      	ldr	r0, [pc, #388]	; (80004d8 <display7SEGvertical+0x37c>)
 8000352:	f002 fbc4 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000356:	2200      	movs	r2, #0
 8000358:	f44f 7100 	mov.w	r1, #512	; 0x200
 800035c:	485e      	ldr	r0, [pc, #376]	; (80004d8 <display7SEGvertical+0x37c>)
 800035e:	f002 fbbe 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8000362:	2201      	movs	r2, #1
 8000364:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000368:	485b      	ldr	r0, [pc, #364]	; (80004d8 <display7SEGvertical+0x37c>)
 800036a:	f002 fbb8 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000374:	4858      	ldr	r0, [pc, #352]	; (80004d8 <display7SEGvertical+0x37c>)
 8000376:	f002 fbb2 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 800037a:	2200      	movs	r2, #0
 800037c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000380:	4855      	ldr	r0, [pc, #340]	; (80004d8 <display7SEGvertical+0x37c>)
 8000382:	f002 fbac 	bl	8002ade <HAL_GPIO_WritePin>
	        break;
 8000386:	e0a3      	b.n	80004d0 <display7SEGvertical+0x374>
	    }
	    case 6:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	2140      	movs	r1, #64	; 0x40
 800038c:	4852      	ldr	r0, [pc, #328]	; (80004d8 <display7SEGvertical+0x37c>)
 800038e:	f002 fba6 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_SET);
 8000392:	2201      	movs	r2, #1
 8000394:	2180      	movs	r1, #128	; 0x80
 8000396:	4850      	ldr	r0, [pc, #320]	; (80004d8 <display7SEGvertical+0x37c>)
 8000398:	f002 fba1 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a2:	484d      	ldr	r0, [pc, #308]	; (80004d8 <display7SEGvertical+0x37c>)
 80003a4:	f002 fb9b 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003ae:	484a      	ldr	r0, [pc, #296]	; (80004d8 <display7SEGvertical+0x37c>)
 80003b0:	f002 fb95 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ba:	4847      	ldr	r0, [pc, #284]	; (80004d8 <display7SEGvertical+0x37c>)
 80003bc:	f002 fb8f 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003c6:	4844      	ldr	r0, [pc, #272]	; (80004d8 <display7SEGvertical+0x37c>)
 80003c8:	f002 fb89 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003d2:	4841      	ldr	r0, [pc, #260]	; (80004d8 <display7SEGvertical+0x37c>)
 80003d4:	f002 fb83 	bl	8002ade <HAL_GPIO_WritePin>
	        break;
 80003d8:	e07a      	b.n	80004d0 <display7SEGvertical+0x374>
	    }
	    case 7:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	2140      	movs	r1, #64	; 0x40
 80003de:	483e      	ldr	r0, [pc, #248]	; (80004d8 <display7SEGvertical+0x37c>)
 80003e0:	f002 fb7d 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2180      	movs	r1, #128	; 0x80
 80003e8:	483b      	ldr	r0, [pc, #236]	; (80004d8 <display7SEGvertical+0x37c>)
 80003ea:	f002 fb78 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80003ee:	2200      	movs	r2, #0
 80003f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f4:	4838      	ldr	r0, [pc, #224]	; (80004d8 <display7SEGvertical+0x37c>)
 80003f6:	f002 fb72 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000400:	4835      	ldr	r0, [pc, #212]	; (80004d8 <display7SEGvertical+0x37c>)
 8000402:	f002 fb6c 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8000406:	2201      	movs	r2, #1
 8000408:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800040c:	4832      	ldr	r0, [pc, #200]	; (80004d8 <display7SEGvertical+0x37c>)
 800040e:	f002 fb66 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000418:	482f      	ldr	r0, [pc, #188]	; (80004d8 <display7SEGvertical+0x37c>)
 800041a:	f002 fb60 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000424:	482c      	ldr	r0, [pc, #176]	; (80004d8 <display7SEGvertical+0x37c>)
 8000426:	f002 fb5a 	bl	8002ade <HAL_GPIO_WritePin>
	        break;
 800042a:	e051      	b.n	80004d0 <display7SEGvertical+0x374>
	    }
	    case 8:
	    {
	    	HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	2140      	movs	r1, #64	; 0x40
 8000430:	4829      	ldr	r0, [pc, #164]	; (80004d8 <display7SEGvertical+0x37c>)
 8000432:	f002 fb54 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8000436:	2200      	movs	r2, #0
 8000438:	2180      	movs	r1, #128	; 0x80
 800043a:	4827      	ldr	r0, [pc, #156]	; (80004d8 <display7SEGvertical+0x37c>)
 800043c:	f002 fb4f 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000440:	2200      	movs	r2, #0
 8000442:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000446:	4824      	ldr	r0, [pc, #144]	; (80004d8 <display7SEGvertical+0x37c>)
 8000448:	f002 fb49 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 800044c:	2200      	movs	r2, #0
 800044e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000452:	4821      	ldr	r0, [pc, #132]	; (80004d8 <display7SEGvertical+0x37c>)
 8000454:	f002 fb43 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800045e:	481e      	ldr	r0, [pc, #120]	; (80004d8 <display7SEGvertical+0x37c>)
 8000460:	f002 fb3d 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800046a:	481b      	ldr	r0, [pc, #108]	; (80004d8 <display7SEGvertical+0x37c>)
 800046c:	f002 fb37 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000470:	2200      	movs	r2, #0
 8000472:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000476:	4818      	ldr	r0, [pc, #96]	; (80004d8 <display7SEGvertical+0x37c>)
 8000478:	f002 fb31 	bl	8002ade <HAL_GPIO_WritePin>
	        break;
 800047c:	e028      	b.n	80004d0 <display7SEGvertical+0x374>
	    }
	    case 9:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	2140      	movs	r1, #64	; 0x40
 8000482:	4815      	ldr	r0, [pc, #84]	; (80004d8 <display7SEGvertical+0x37c>)
 8000484:	f002 fb2b 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	2180      	movs	r1, #128	; 0x80
 800048c:	4812      	ldr	r0, [pc, #72]	; (80004d8 <display7SEGvertical+0x37c>)
 800048e:	f002 fb26 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000492:	2200      	movs	r2, #0
 8000494:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000498:	480f      	ldr	r0, [pc, #60]	; (80004d8 <display7SEGvertical+0x37c>)
 800049a:	f002 fb20 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a4:	480c      	ldr	r0, [pc, #48]	; (80004d8 <display7SEGvertical+0x37c>)
 80004a6:	f002 fb1a 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 80004aa:	2201      	movs	r2, #1
 80004ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b0:	4809      	ldr	r0, [pc, #36]	; (80004d8 <display7SEGvertical+0x37c>)
 80004b2:	f002 fb14 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 80004b6:	2200      	movs	r2, #0
 80004b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004bc:	4806      	ldr	r0, [pc, #24]	; (80004d8 <display7SEGvertical+0x37c>)
 80004be:	f002 fb0e 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004c8:	4803      	ldr	r0, [pc, #12]	; (80004d8 <display7SEGvertical+0x37c>)
 80004ca:	f002 fb08 	bl	8002ade <HAL_GPIO_WritePin>
	        break;
 80004ce:	bf00      	nop
	    }
	}

}
 80004d0:	bf00      	nop
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	40010c00 	.word	0x40010c00

080004dc <display7SEGhorizontal>:

void display7SEGhorizontal(int num)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b09      	cmp	r3, #9
 80004e8:	f200 81b2 	bhi.w	8000850 <display7SEGhorizontal+0x374>
 80004ec:	a201      	add	r2, pc, #4	; (adr r2, 80004f4 <display7SEGhorizontal+0x18>)
 80004ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f2:	bf00      	nop
 80004f4:	0800051d 	.word	0x0800051d
 80004f8:	0800056f 	.word	0x0800056f
 80004fc:	080005c1 	.word	0x080005c1
 8000500:	08000613 	.word	0x08000613
 8000504:	08000665 	.word	0x08000665
 8000508:	080006b7 	.word	0x080006b7
 800050c:	08000709 	.word	0x08000709
 8000510:	0800075b 	.word	0x0800075b
 8000514:	080007ad 	.word	0x080007ad
 8000518:	080007ff 	.word	0x080007ff
	switch(num)
	{
	    case 0:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	2140      	movs	r1, #64	; 0x40
 8000520:	48cd      	ldr	r0, [pc, #820]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000522:	f002 fadc 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2180      	movs	r1, #128	; 0x80
 800052a:	48cb      	ldr	r0, [pc, #812]	; (8000858 <display7SEGhorizontal+0x37c>)
 800052c:	f002 fad7 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000536:	48c8      	ldr	r0, [pc, #800]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000538:	f002 fad1 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000542:	48c5      	ldr	r0, [pc, #788]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000544:	f002 facb 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800054e:	48c2      	ldr	r0, [pc, #776]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000550:	f002 fac5 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800055a:	48bf      	ldr	r0, [pc, #764]	; (8000858 <display7SEGhorizontal+0x37c>)
 800055c:	f002 fabf 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 8000560:	2201      	movs	r2, #1
 8000562:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000566:	48bc      	ldr	r0, [pc, #752]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000568:	f002 fab9 	bl	8002ade <HAL_GPIO_WritePin>
	        break;
 800056c:	e170      	b.n	8000850 <display7SEGhorizontal+0x374>
	    }
	    case 1:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	2140      	movs	r1, #64	; 0x40
 8000572:	48b9      	ldr	r0, [pc, #740]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000574:	f002 fab3 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2180      	movs	r1, #128	; 0x80
 800057c:	48b6      	ldr	r0, [pc, #728]	; (8000858 <display7SEGhorizontal+0x37c>)
 800057e:	f002 faae 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000588:	48b3      	ldr	r0, [pc, #716]	; (8000858 <display7SEGhorizontal+0x37c>)
 800058a:	f002 faa8 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000594:	48b0      	ldr	r0, [pc, #704]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000596:	f002 faa2 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 800059a:	2201      	movs	r2, #1
 800059c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a0:	48ad      	ldr	r0, [pc, #692]	; (8000858 <display7SEGhorizontal+0x37c>)
 80005a2:	f002 fa9c 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ac:	48aa      	ldr	r0, [pc, #680]	; (8000858 <display7SEGhorizontal+0x37c>)
 80005ae:	f002 fa96 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b8:	48a7      	ldr	r0, [pc, #668]	; (8000858 <display7SEGhorizontal+0x37c>)
 80005ba:	f002 fa90 	bl	8002ade <HAL_GPIO_WritePin>
	        break;
 80005be:	e147      	b.n	8000850 <display7SEGhorizontal+0x374>
	    }
	    case 2:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2140      	movs	r1, #64	; 0x40
 80005c4:	48a4      	ldr	r0, [pc, #656]	; (8000858 <display7SEGhorizontal+0x37c>)
 80005c6:	f002 fa8a 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2180      	movs	r1, #128	; 0x80
 80005ce:	48a2      	ldr	r0, [pc, #648]	; (8000858 <display7SEGhorizontal+0x37c>)
 80005d0:	f002 fa85 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005da:	489f      	ldr	r0, [pc, #636]	; (8000858 <display7SEGhorizontal+0x37c>)
 80005dc:	f002 fa7f 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e6:	489c      	ldr	r0, [pc, #624]	; (8000858 <display7SEGhorizontal+0x37c>)
 80005e8:	f002 fa79 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f2:	4899      	ldr	r0, [pc, #612]	; (8000858 <display7SEGhorizontal+0x37c>)
 80005f4:	f002 fa73 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005fe:	4896      	ldr	r0, [pc, #600]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000600:	f002 fa6d 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800060a:	4893      	ldr	r0, [pc, #588]	; (8000858 <display7SEGhorizontal+0x37c>)
 800060c:	f002 fa67 	bl	8002ade <HAL_GPIO_WritePin>
	        break;
 8000610:	e11e      	b.n	8000850 <display7SEGhorizontal+0x374>
	    }
	    case 3:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2140      	movs	r1, #64	; 0x40
 8000616:	4890      	ldr	r0, [pc, #576]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000618:	f002 fa61 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	2180      	movs	r1, #128	; 0x80
 8000620:	488d      	ldr	r0, [pc, #564]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000622:	f002 fa5c 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062c:	488a      	ldr	r0, [pc, #552]	; (8000858 <display7SEGhorizontal+0x37c>)
 800062e:	f002 fa56 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000638:	4887      	ldr	r0, [pc, #540]	; (8000858 <display7SEGhorizontal+0x37c>)
 800063a:	f002 fa50 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 800063e:	2201      	movs	r2, #1
 8000640:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000644:	4884      	ldr	r0, [pc, #528]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000646:	f002 fa4a 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 800064a:	2201      	movs	r2, #1
 800064c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000650:	4881      	ldr	r0, [pc, #516]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000652:	f002 fa44 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800065c:	487e      	ldr	r0, [pc, #504]	; (8000858 <display7SEGhorizontal+0x37c>)
 800065e:	f002 fa3e 	bl	8002ade <HAL_GPIO_WritePin>
	        break;
 8000662:	e0f5      	b.n	8000850 <display7SEGhorizontal+0x374>
	    }
	    case 4:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	2140      	movs	r1, #64	; 0x40
 8000668:	487b      	ldr	r0, [pc, #492]	; (8000858 <display7SEGhorizontal+0x37c>)
 800066a:	f002 fa38 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	2180      	movs	r1, #128	; 0x80
 8000672:	4879      	ldr	r0, [pc, #484]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000674:	f002 fa33 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067e:	4876      	ldr	r0, [pc, #472]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000680:	f002 fa2d 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 7100 	mov.w	r1, #512	; 0x200
 800068a:	4873      	ldr	r0, [pc, #460]	; (8000858 <display7SEGhorizontal+0x37c>)
 800068c:	f002 fa27 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 8000690:	2201      	movs	r2, #1
 8000692:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000696:	4870      	ldr	r0, [pc, #448]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000698:	f002 fa21 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a2:	486d      	ldr	r0, [pc, #436]	; (8000858 <display7SEGhorizontal+0x37c>)
 80006a4:	f002 fa1b 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ae:	486a      	ldr	r0, [pc, #424]	; (8000858 <display7SEGhorizontal+0x37c>)
 80006b0:	f002 fa15 	bl	8002ade <HAL_GPIO_WritePin>
	        break;
 80006b4:	e0cc      	b.n	8000850 <display7SEGhorizontal+0x374>
	    }
	    case 5:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2140      	movs	r1, #64	; 0x40
 80006ba:	4867      	ldr	r0, [pc, #412]	; (8000858 <display7SEGhorizontal+0x37c>)
 80006bc:	f002 fa0f 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2180      	movs	r1, #128	; 0x80
 80006c4:	4864      	ldr	r0, [pc, #400]	; (8000858 <display7SEGhorizontal+0x37c>)
 80006c6:	f002 fa0a 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d0:	4861      	ldr	r0, [pc, #388]	; (8000858 <display7SEGhorizontal+0x37c>)
 80006d2:	f002 fa04 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006dc:	485e      	ldr	r0, [pc, #376]	; (8000858 <display7SEGhorizontal+0x37c>)
 80006de:	f002 f9fe 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e8:	485b      	ldr	r0, [pc, #364]	; (8000858 <display7SEGhorizontal+0x37c>)
 80006ea:	f002 f9f8 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006f4:	4858      	ldr	r0, [pc, #352]	; (8000858 <display7SEGhorizontal+0x37c>)
 80006f6:	f002 f9f2 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000700:	4855      	ldr	r0, [pc, #340]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000702:	f002 f9ec 	bl	8002ade <HAL_GPIO_WritePin>
	        break;
 8000706:	e0a3      	b.n	8000850 <display7SEGhorizontal+0x374>
	    }
	    case 6:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2140      	movs	r1, #64	; 0x40
 800070c:	4852      	ldr	r0, [pc, #328]	; (8000858 <display7SEGhorizontal+0x37c>)
 800070e:	f002 f9e6 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	2180      	movs	r1, #128	; 0x80
 8000716:	4850      	ldr	r0, [pc, #320]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000718:	f002 f9e1 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000722:	484d      	ldr	r0, [pc, #308]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000724:	f002 f9db 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072e:	484a      	ldr	r0, [pc, #296]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000730:	f002 f9d5 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073a:	4847      	ldr	r0, [pc, #284]	; (8000858 <display7SEGhorizontal+0x37c>)
 800073c:	f002 f9cf 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000746:	4844      	ldr	r0, [pc, #272]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000748:	f002 f9c9 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000752:	4841      	ldr	r0, [pc, #260]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000754:	f002 f9c3 	bl	8002ade <HAL_GPIO_WritePin>
	        break;
 8000758:	e07a      	b.n	8000850 <display7SEGhorizontal+0x374>
	    }
	    case 7:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2140      	movs	r1, #64	; 0x40
 800075e:	483e      	ldr	r0, [pc, #248]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000760:	f002 f9bd 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2180      	movs	r1, #128	; 0x80
 8000768:	483b      	ldr	r0, [pc, #236]	; (8000858 <display7SEGhorizontal+0x37c>)
 800076a:	f002 f9b8 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000774:	4838      	ldr	r0, [pc, #224]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000776:	f002 f9b2 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 800077a:	2201      	movs	r2, #1
 800077c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000780:	4835      	ldr	r0, [pc, #212]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000782:	f002 f9ac 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800078c:	4832      	ldr	r0, [pc, #200]	; (8000858 <display7SEGhorizontal+0x37c>)
 800078e:	f002 f9a6 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000798:	482f      	ldr	r0, [pc, #188]	; (8000858 <display7SEGhorizontal+0x37c>)
 800079a:	f002 f9a0 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 800079e:	2201      	movs	r2, #1
 80007a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a4:	482c      	ldr	r0, [pc, #176]	; (8000858 <display7SEGhorizontal+0x37c>)
 80007a6:	f002 f99a 	bl	8002ade <HAL_GPIO_WritePin>
	        break;
 80007aa:	e051      	b.n	8000850 <display7SEGhorizontal+0x374>
	    }
	    case 8:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2140      	movs	r1, #64	; 0x40
 80007b0:	4829      	ldr	r0, [pc, #164]	; (8000858 <display7SEGhorizontal+0x37c>)
 80007b2:	f002 f994 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	4827      	ldr	r0, [pc, #156]	; (8000858 <display7SEGhorizontal+0x37c>)
 80007bc:	f002 f98f 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c6:	4824      	ldr	r0, [pc, #144]	; (8000858 <display7SEGhorizontal+0x37c>)
 80007c8:	f002 f989 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d2:	4821      	ldr	r0, [pc, #132]	; (8000858 <display7SEGhorizontal+0x37c>)
 80007d4:	f002 f983 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007de:	481e      	ldr	r0, [pc, #120]	; (8000858 <display7SEGhorizontal+0x37c>)
 80007e0:	f002 f97d 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ea:	481b      	ldr	r0, [pc, #108]	; (8000858 <display7SEGhorizontal+0x37c>)
 80007ec:	f002 f977 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f6:	4818      	ldr	r0, [pc, #96]	; (8000858 <display7SEGhorizontal+0x37c>)
 80007f8:	f002 f971 	bl	8002ade <HAL_GPIO_WritePin>
	        break;
 80007fc:	e028      	b.n	8000850 <display7SEGhorizontal+0x374>
	    }
	    case 9:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2140      	movs	r1, #64	; 0x40
 8000802:	4815      	ldr	r0, [pc, #84]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000804:	f002 f96b 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2180      	movs	r1, #128	; 0x80
 800080c:	4812      	ldr	r0, [pc, #72]	; (8000858 <display7SEGhorizontal+0x37c>)
 800080e:	f002 f966 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000818:	480f      	ldr	r0, [pc, #60]	; (8000858 <display7SEGhorizontal+0x37c>)
 800081a:	f002 f960 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000824:	480c      	ldr	r0, [pc, #48]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000826:	f002 f95a 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000830:	4809      	ldr	r0, [pc, #36]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000832:	f002 f954 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800083c:	4806      	ldr	r0, [pc, #24]	; (8000858 <display7SEGhorizontal+0x37c>)
 800083e:	f002 f94e 	bl	8002ade <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000848:	4803      	ldr	r0, [pc, #12]	; (8000858 <display7SEGhorizontal+0x37c>)
 800084a:	f002 f948 	bl	8002ade <HAL_GPIO_WritePin>
	        break;
 800084e:	bf00      	nop
	    }
	}
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40010800 	.word	0x40010800

0800085c <display7SEGBuffervertical>:

void display7SEGBuffervertical(int num)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	switch(num)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d003      	beq.n	8000872 <display7SEGBuffervertical+0x16>
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d012      	beq.n	8000896 <display7SEGBuffervertical+0x3a>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
        display7SEGvertical(buffer_7SEG_vertical[num]);
		break;
	}
	}
}
 8000870:	e023      	b.n	80008ba <display7SEGBuffervertical+0x5e>
        HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2110      	movs	r1, #16
 8000876:	4813      	ldr	r0, [pc, #76]	; (80008c4 <display7SEGBuffervertical+0x68>)
 8000878:	f002 f931 	bl	8002ade <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	2120      	movs	r1, #32
 8000880:	4810      	ldr	r0, [pc, #64]	; (80008c4 <display7SEGBuffervertical+0x68>)
 8000882:	f002 f92c 	bl	8002ade <HAL_GPIO_WritePin>
        display7SEGvertical(buffer_7SEG_vertical[num]);
 8000886:	4a10      	ldr	r2, [pc, #64]	; (80008c8 <display7SEGBuffervertical+0x6c>)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fc64 	bl	800015c <display7SEGvertical>
		break;
 8000894:	e011      	b.n	80008ba <display7SEGBuffervertical+0x5e>
        HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000896:	2201      	movs	r2, #1
 8000898:	2110      	movs	r1, #16
 800089a:	480a      	ldr	r0, [pc, #40]	; (80008c4 <display7SEGBuffervertical+0x68>)
 800089c:	f002 f91f 	bl	8002ade <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2120      	movs	r1, #32
 80008a4:	4807      	ldr	r0, [pc, #28]	; (80008c4 <display7SEGBuffervertical+0x68>)
 80008a6:	f002 f91a 	bl	8002ade <HAL_GPIO_WritePin>
        display7SEGvertical(buffer_7SEG_vertical[num]);
 80008aa:	4a07      	ldr	r2, [pc, #28]	; (80008c8 <display7SEGBuffervertical+0x6c>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fc52 	bl	800015c <display7SEGvertical>
		break;
 80008b8:	bf00      	nop
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40010c00 	.word	0x40010c00
 80008c8:	200000a4 	.word	0x200000a4

080008cc <display7SEGBufferhorizontal>:

void display7SEGBufferhorizontal(int num)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	switch(num)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d003      	beq.n	80008e2 <display7SEGBufferhorizontal+0x16>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d012      	beq.n	8000906 <display7SEGBufferhorizontal+0x3a>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
        display7SEGhorizontal(buffer_7SEG_horizontal[num]);
		break;
	}
	}
}
 80008e0:	e023      	b.n	800092a <display7SEGBufferhorizontal+0x5e>
        HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2102      	movs	r1, #2
 80008e6:	4813      	ldr	r0, [pc, #76]	; (8000934 <display7SEGBufferhorizontal+0x68>)
 80008e8:	f002 f8f9 	bl	8002ade <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	2104      	movs	r1, #4
 80008f0:	4810      	ldr	r0, [pc, #64]	; (8000934 <display7SEGBufferhorizontal+0x68>)
 80008f2:	f002 f8f4 	bl	8002ade <HAL_GPIO_WritePin>
        display7SEGhorizontal(buffer_7SEG_horizontal[num]);
 80008f6:	4a10      	ldr	r2, [pc, #64]	; (8000938 <display7SEGBufferhorizontal+0x6c>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fdec 	bl	80004dc <display7SEGhorizontal>
		break;
 8000904:	e011      	b.n	800092a <display7SEGBufferhorizontal+0x5e>
        HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000906:	2201      	movs	r2, #1
 8000908:	2102      	movs	r1, #2
 800090a:	480a      	ldr	r0, [pc, #40]	; (8000934 <display7SEGBufferhorizontal+0x68>)
 800090c:	f002 f8e7 	bl	8002ade <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	2104      	movs	r1, #4
 8000914:	4807      	ldr	r0, [pc, #28]	; (8000934 <display7SEGBufferhorizontal+0x68>)
 8000916:	f002 f8e2 	bl	8002ade <HAL_GPIO_WritePin>
        display7SEGhorizontal(buffer_7SEG_horizontal[num]);
 800091a:	4a07      	ldr	r2, [pc, #28]	; (8000938 <display7SEGBufferhorizontal+0x6c>)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fdda 	bl	80004dc <display7SEGhorizontal>
		break;
 8000928:	bf00      	nop
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40010c00 	.word	0x40010c00
 8000938:	200000ac 	.word	0x200000ac

0800093c <display7SEGFinalvertical>:

void display7SEGFinalvertical()
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	switch(status_vertical)
 8000940:	4b53      	ldr	r3, [pc, #332]	; (8000a90 <display7SEGFinalvertical+0x154>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	3b01      	subs	r3, #1
 8000946:	2b06      	cmp	r3, #6
 8000948:	f200 8087 	bhi.w	8000a5a <display7SEGFinalvertical+0x11e>
 800094c:	a201      	add	r2, pc, #4	; (adr r2, 8000954 <display7SEGFinalvertical+0x18>)
 800094e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000952:	bf00      	nop
 8000954:	08000971 	.word	0x08000971
 8000958:	080009b1 	.word	0x080009b1
 800095c:	080009f1 	.word	0x080009f1
 8000960:	08000a5b 	.word	0x08000a5b
 8000964:	08000a31 	.word	0x08000a31
 8000968:	08000a3f 	.word	0x08000a3f
 800096c:	08000a4d 	.word	0x08000a4d
	{
	case AUTO_RED:
	{
		buffer_7SEG_vertical[0] = (red_yellow_green_auto_time_vertical[0] - vertical_counter) / 10;
 8000970:	4b48      	ldr	r3, [pc, #288]	; (8000a94 <display7SEGFinalvertical+0x158>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4b48      	ldr	r3, [pc, #288]	; (8000a98 <display7SEGFinalvertical+0x15c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	4a48      	ldr	r2, [pc, #288]	; (8000a9c <display7SEGFinalvertical+0x160>)
 800097c:	fb82 1203 	smull	r1, r2, r2, r3
 8000980:	1092      	asrs	r2, r2, #2
 8000982:	17db      	asrs	r3, r3, #31
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	4a46      	ldr	r2, [pc, #280]	; (8000aa0 <display7SEGFinalvertical+0x164>)
 8000988:	6013      	str	r3, [r2, #0]
		buffer_7SEG_vertical[1] = (red_yellow_green_auto_time_vertical[0] - vertical_counter) % 10;
 800098a:	4b42      	ldr	r3, [pc, #264]	; (8000a94 <display7SEGFinalvertical+0x158>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	4b42      	ldr	r3, [pc, #264]	; (8000a98 <display7SEGFinalvertical+0x15c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	1ad1      	subs	r1, r2, r3
 8000994:	4b41      	ldr	r3, [pc, #260]	; (8000a9c <display7SEGFinalvertical+0x160>)
 8000996:	fb83 2301 	smull	r2, r3, r3, r1
 800099a:	109a      	asrs	r2, r3, #2
 800099c:	17cb      	asrs	r3, r1, #31
 800099e:	1ad2      	subs	r2, r2, r3
 80009a0:	4613      	mov	r3, r2
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	4413      	add	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	1aca      	subs	r2, r1, r3
 80009aa:	4b3d      	ldr	r3, [pc, #244]	; (8000aa0 <display7SEGFinalvertical+0x164>)
 80009ac:	605a      	str	r2, [r3, #4]
		break;
 80009ae:	e054      	b.n	8000a5a <display7SEGFinalvertical+0x11e>
	}
	case AUTO_YELLOW:
	{
		buffer_7SEG_vertical[0] = (red_yellow_green_auto_time_vertical[1] - vertical_counter) / 10;
 80009b0:	4b38      	ldr	r3, [pc, #224]	; (8000a94 <display7SEGFinalvertical+0x158>)
 80009b2:	685a      	ldr	r2, [r3, #4]
 80009b4:	4b38      	ldr	r3, [pc, #224]	; (8000a98 <display7SEGFinalvertical+0x15c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	4a38      	ldr	r2, [pc, #224]	; (8000a9c <display7SEGFinalvertical+0x160>)
 80009bc:	fb82 1203 	smull	r1, r2, r2, r3
 80009c0:	1092      	asrs	r2, r2, #2
 80009c2:	17db      	asrs	r3, r3, #31
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	4a36      	ldr	r2, [pc, #216]	; (8000aa0 <display7SEGFinalvertical+0x164>)
 80009c8:	6013      	str	r3, [r2, #0]
		buffer_7SEG_vertical[1] = (red_yellow_green_auto_time_vertical[1] - vertical_counter) % 10;
 80009ca:	4b32      	ldr	r3, [pc, #200]	; (8000a94 <display7SEGFinalvertical+0x158>)
 80009cc:	685a      	ldr	r2, [r3, #4]
 80009ce:	4b32      	ldr	r3, [pc, #200]	; (8000a98 <display7SEGFinalvertical+0x15c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	1ad1      	subs	r1, r2, r3
 80009d4:	4b31      	ldr	r3, [pc, #196]	; (8000a9c <display7SEGFinalvertical+0x160>)
 80009d6:	fb83 2301 	smull	r2, r3, r3, r1
 80009da:	109a      	asrs	r2, r3, #2
 80009dc:	17cb      	asrs	r3, r1, #31
 80009de:	1ad2      	subs	r2, r2, r3
 80009e0:	4613      	mov	r3, r2
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	4413      	add	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	1aca      	subs	r2, r1, r3
 80009ea:	4b2d      	ldr	r3, [pc, #180]	; (8000aa0 <display7SEGFinalvertical+0x164>)
 80009ec:	605a      	str	r2, [r3, #4]
		break;
 80009ee:	e034      	b.n	8000a5a <display7SEGFinalvertical+0x11e>
	}
	case AUTO_GREEN:
	{
		buffer_7SEG_vertical[0] = (red_yellow_green_auto_time_vertical[2] - vertical_counter) / 10;
 80009f0:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <display7SEGFinalvertical+0x158>)
 80009f2:	689a      	ldr	r2, [r3, #8]
 80009f4:	4b28      	ldr	r3, [pc, #160]	; (8000a98 <display7SEGFinalvertical+0x15c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	4a28      	ldr	r2, [pc, #160]	; (8000a9c <display7SEGFinalvertical+0x160>)
 80009fc:	fb82 1203 	smull	r1, r2, r2, r3
 8000a00:	1092      	asrs	r2, r2, #2
 8000a02:	17db      	asrs	r3, r3, #31
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	4a26      	ldr	r2, [pc, #152]	; (8000aa0 <display7SEGFinalvertical+0x164>)
 8000a08:	6013      	str	r3, [r2, #0]
		buffer_7SEG_vertical[1] = (red_yellow_green_auto_time_vertical[2] - vertical_counter) % 10;
 8000a0a:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <display7SEGFinalvertical+0x158>)
 8000a0c:	689a      	ldr	r2, [r3, #8]
 8000a0e:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <display7SEGFinalvertical+0x15c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	1ad1      	subs	r1, r2, r3
 8000a14:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <display7SEGFinalvertical+0x160>)
 8000a16:	fb83 2301 	smull	r2, r3, r3, r1
 8000a1a:	109a      	asrs	r2, r3, #2
 8000a1c:	17cb      	asrs	r3, r1, #31
 8000a1e:	1ad2      	subs	r2, r2, r3
 8000a20:	4613      	mov	r3, r2
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	4413      	add	r3, r2
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	1aca      	subs	r2, r1, r3
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <display7SEGFinalvertical+0x164>)
 8000a2c:	605a      	str	r2, [r3, #4]
		break;
 8000a2e:	e014      	b.n	8000a5a <display7SEGFinalvertical+0x11e>
	}
	case MANUAL_RED:
	{
		buffer_7SEG_vertical[0] = 0;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <display7SEGFinalvertical+0x164>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
		buffer_7SEG_vertical[1] = 2;
 8000a36:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <display7SEGFinalvertical+0x164>)
 8000a38:	2202      	movs	r2, #2
 8000a3a:	605a      	str	r2, [r3, #4]
		break;
 8000a3c:	e00d      	b.n	8000a5a <display7SEGFinalvertical+0x11e>
	}
	case MANUAL_YELLOW:
	{
		buffer_7SEG_vertical[0] = 0;
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <display7SEGFinalvertical+0x164>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
		buffer_7SEG_vertical[1] = 3;
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <display7SEGFinalvertical+0x164>)
 8000a46:	2203      	movs	r2, #3
 8000a48:	605a      	str	r2, [r3, #4]
		break;
 8000a4a:	e006      	b.n	8000a5a <display7SEGFinalvertical+0x11e>
	}
	case MANUAL_GREEN:
	{
		buffer_7SEG_vertical[0] = 0;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <display7SEGFinalvertical+0x164>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
		buffer_7SEG_vertical[1] = 4;
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <display7SEGFinalvertical+0x164>)
 8000a54:	2204      	movs	r2, #4
 8000a56:	605a      	str	r2, [r3, #4]
		break;
 8000a58:	bf00      	nop
	}
	}

	if(timerENvertical_flag == 1)
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <display7SEGFinalvertical+0x168>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d114      	bne.n	8000a8c <display7SEGFinalvertical+0x150>
	{
		if(EN_vertical > 1)
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <display7SEGFinalvertical+0x16c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	dd02      	ble.n	8000a70 <display7SEGFinalvertical+0x134>
		{
			EN_vertical = 0;
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <display7SEGFinalvertical+0x16c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
		}

		display7SEGBuffervertical(EN_vertical);
 8000a70:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <display7SEGFinalvertical+0x16c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fef1 	bl	800085c <display7SEGBuffervertical>

		EN_vertical++;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <display7SEGFinalvertical+0x16c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	4a09      	ldr	r2, [pc, #36]	; (8000aa8 <display7SEGFinalvertical+0x16c>)
 8000a82:	6013      	str	r3, [r2, #0]
		setTimerENvertical(500);
 8000a84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a88:	f001 fb60 	bl	800214c <setTimerENvertical>
	}
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000074 	.word	0x20000074
 8000a94:	20000058 	.word	0x20000058
 8000a98:	200000c8 	.word	0x200000c8
 8000a9c:	66666667 	.word	0x66666667
 8000aa0:	200000a4 	.word	0x200000a4
 8000aa4:	2000010c 	.word	0x2000010c
 8000aa8:	20000004 	.word	0x20000004

08000aac <display7SEGFinalhorizontal>:

void display7SEGFinalhorizontal()
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	switch(status_horizontal)
 8000ab0:	4b70      	ldr	r3, [pc, #448]	; (8000c74 <display7SEGFinalhorizontal+0x1c8>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	3b01      	subs	r3, #1
 8000ab6:	2b06      	cmp	r3, #6
 8000ab8:	f200 80c0 	bhi.w	8000c3c <display7SEGFinalhorizontal+0x190>
 8000abc:	a201      	add	r2, pc, #4	; (adr r2, 8000ac4 <display7SEGFinalhorizontal+0x18>)
 8000abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac2:	bf00      	nop
 8000ac4:	08000ae1 	.word	0x08000ae1
 8000ac8:	08000b21 	.word	0x08000b21
 8000acc:	08000b61 	.word	0x08000b61
 8000ad0:	08000c3d 	.word	0x08000c3d
 8000ad4:	08000ba1 	.word	0x08000ba1
 8000ad8:	08000bd5 	.word	0x08000bd5
 8000adc:	08000c09 	.word	0x08000c09
	{
	case AUTO_RED:
	{
		buffer_7SEG_horizontal[0] = (red_yellow_green_auto_time_horizontal[0] - horizontal_counter) / 10;
 8000ae0:	4b65      	ldr	r3, [pc, #404]	; (8000c78 <display7SEGFinalhorizontal+0x1cc>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b65      	ldr	r3, [pc, #404]	; (8000c7c <display7SEGFinalhorizontal+0x1d0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	4a65      	ldr	r2, [pc, #404]	; (8000c80 <display7SEGFinalhorizontal+0x1d4>)
 8000aec:	fb82 1203 	smull	r1, r2, r2, r3
 8000af0:	1092      	asrs	r2, r2, #2
 8000af2:	17db      	asrs	r3, r3, #31
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	4a63      	ldr	r2, [pc, #396]	; (8000c84 <display7SEGFinalhorizontal+0x1d8>)
 8000af8:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = (red_yellow_green_auto_time_horizontal[0] - horizontal_counter) % 10;
 8000afa:	4b5f      	ldr	r3, [pc, #380]	; (8000c78 <display7SEGFinalhorizontal+0x1cc>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	4b5f      	ldr	r3, [pc, #380]	; (8000c7c <display7SEGFinalhorizontal+0x1d0>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	1ad1      	subs	r1, r2, r3
 8000b04:	4b5e      	ldr	r3, [pc, #376]	; (8000c80 <display7SEGFinalhorizontal+0x1d4>)
 8000b06:	fb83 2301 	smull	r2, r3, r3, r1
 8000b0a:	109a      	asrs	r2, r3, #2
 8000b0c:	17cb      	asrs	r3, r1, #31
 8000b0e:	1ad2      	subs	r2, r2, r3
 8000b10:	4613      	mov	r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	4413      	add	r3, r2
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	1aca      	subs	r2, r1, r3
 8000b1a:	4b5a      	ldr	r3, [pc, #360]	; (8000c84 <display7SEGFinalhorizontal+0x1d8>)
 8000b1c:	605a      	str	r2, [r3, #4]
		break;
 8000b1e:	e08d      	b.n	8000c3c <display7SEGFinalhorizontal+0x190>
	}
	case AUTO_YELLOW:
	{
		buffer_7SEG_horizontal[0] = (red_yellow_green_auto_time_horizontal[1] - horizontal_counter) / 10;
 8000b20:	4b55      	ldr	r3, [pc, #340]	; (8000c78 <display7SEGFinalhorizontal+0x1cc>)
 8000b22:	685a      	ldr	r2, [r3, #4]
 8000b24:	4b55      	ldr	r3, [pc, #340]	; (8000c7c <display7SEGFinalhorizontal+0x1d0>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	4a55      	ldr	r2, [pc, #340]	; (8000c80 <display7SEGFinalhorizontal+0x1d4>)
 8000b2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b30:	1092      	asrs	r2, r2, #2
 8000b32:	17db      	asrs	r3, r3, #31
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	4a53      	ldr	r2, [pc, #332]	; (8000c84 <display7SEGFinalhorizontal+0x1d8>)
 8000b38:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = (red_yellow_green_auto_time_horizontal[1] - horizontal_counter) % 10;
 8000b3a:	4b4f      	ldr	r3, [pc, #316]	; (8000c78 <display7SEGFinalhorizontal+0x1cc>)
 8000b3c:	685a      	ldr	r2, [r3, #4]
 8000b3e:	4b4f      	ldr	r3, [pc, #316]	; (8000c7c <display7SEGFinalhorizontal+0x1d0>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	1ad1      	subs	r1, r2, r3
 8000b44:	4b4e      	ldr	r3, [pc, #312]	; (8000c80 <display7SEGFinalhorizontal+0x1d4>)
 8000b46:	fb83 2301 	smull	r2, r3, r3, r1
 8000b4a:	109a      	asrs	r2, r3, #2
 8000b4c:	17cb      	asrs	r3, r1, #31
 8000b4e:	1ad2      	subs	r2, r2, r3
 8000b50:	4613      	mov	r3, r2
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	4413      	add	r3, r2
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	1aca      	subs	r2, r1, r3
 8000b5a:	4b4a      	ldr	r3, [pc, #296]	; (8000c84 <display7SEGFinalhorizontal+0x1d8>)
 8000b5c:	605a      	str	r2, [r3, #4]
		break;
 8000b5e:	e06d      	b.n	8000c3c <display7SEGFinalhorizontal+0x190>
	}
	case AUTO_GREEN:
	{
		buffer_7SEG_horizontal[0] = (red_yellow_green_auto_time_horizontal[2] - horizontal_counter) / 10;
 8000b60:	4b45      	ldr	r3, [pc, #276]	; (8000c78 <display7SEGFinalhorizontal+0x1cc>)
 8000b62:	689a      	ldr	r2, [r3, #8]
 8000b64:	4b45      	ldr	r3, [pc, #276]	; (8000c7c <display7SEGFinalhorizontal+0x1d0>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	4a45      	ldr	r2, [pc, #276]	; (8000c80 <display7SEGFinalhorizontal+0x1d4>)
 8000b6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b70:	1092      	asrs	r2, r2, #2
 8000b72:	17db      	asrs	r3, r3, #31
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	4a43      	ldr	r2, [pc, #268]	; (8000c84 <display7SEGFinalhorizontal+0x1d8>)
 8000b78:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = (red_yellow_green_auto_time_horizontal[2] - horizontal_counter) % 10;
 8000b7a:	4b3f      	ldr	r3, [pc, #252]	; (8000c78 <display7SEGFinalhorizontal+0x1cc>)
 8000b7c:	689a      	ldr	r2, [r3, #8]
 8000b7e:	4b3f      	ldr	r3, [pc, #252]	; (8000c7c <display7SEGFinalhorizontal+0x1d0>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	1ad1      	subs	r1, r2, r3
 8000b84:	4b3e      	ldr	r3, [pc, #248]	; (8000c80 <display7SEGFinalhorizontal+0x1d4>)
 8000b86:	fb83 2301 	smull	r2, r3, r3, r1
 8000b8a:	109a      	asrs	r2, r3, #2
 8000b8c:	17cb      	asrs	r3, r1, #31
 8000b8e:	1ad2      	subs	r2, r2, r3
 8000b90:	4613      	mov	r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	4413      	add	r3, r2
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	1aca      	subs	r2, r1, r3
 8000b9a:	4b3a      	ldr	r3, [pc, #232]	; (8000c84 <display7SEGFinalhorizontal+0x1d8>)
 8000b9c:	605a      	str	r2, [r3, #4]
		break;
 8000b9e:	e04d      	b.n	8000c3c <display7SEGFinalhorizontal+0x190>
	}
	case MANUAL_RED:
	{
		buffer_7SEG_horizontal[0] = red_yellow_green_manual_time[0] / 10;
 8000ba0:	4b39      	ldr	r3, [pc, #228]	; (8000c88 <display7SEGFinalhorizontal+0x1dc>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a36      	ldr	r2, [pc, #216]	; (8000c80 <display7SEGFinalhorizontal+0x1d4>)
 8000ba6:	fb82 1203 	smull	r1, r2, r2, r3
 8000baa:	1092      	asrs	r2, r2, #2
 8000bac:	17db      	asrs	r3, r3, #31
 8000bae:	1ad3      	subs	r3, r2, r3
 8000bb0:	4a34      	ldr	r2, [pc, #208]	; (8000c84 <display7SEGFinalhorizontal+0x1d8>)
 8000bb2:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = red_yellow_green_manual_time[0] % 10;
 8000bb4:	4b34      	ldr	r3, [pc, #208]	; (8000c88 <display7SEGFinalhorizontal+0x1dc>)
 8000bb6:	6819      	ldr	r1, [r3, #0]
 8000bb8:	4b31      	ldr	r3, [pc, #196]	; (8000c80 <display7SEGFinalhorizontal+0x1d4>)
 8000bba:	fb83 2301 	smull	r2, r3, r3, r1
 8000bbe:	109a      	asrs	r2, r3, #2
 8000bc0:	17cb      	asrs	r3, r1, #31
 8000bc2:	1ad2      	subs	r2, r2, r3
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	4413      	add	r3, r2
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	1aca      	subs	r2, r1, r3
 8000bce:	4b2d      	ldr	r3, [pc, #180]	; (8000c84 <display7SEGFinalhorizontal+0x1d8>)
 8000bd0:	605a      	str	r2, [r3, #4]
		break;
 8000bd2:	e033      	b.n	8000c3c <display7SEGFinalhorizontal+0x190>
	}
	case MANUAL_YELLOW:
	{
		buffer_7SEG_horizontal[0] = red_yellow_green_manual_time[1] / 10;
 8000bd4:	4b2c      	ldr	r3, [pc, #176]	; (8000c88 <display7SEGFinalhorizontal+0x1dc>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	4a29      	ldr	r2, [pc, #164]	; (8000c80 <display7SEGFinalhorizontal+0x1d4>)
 8000bda:	fb82 1203 	smull	r1, r2, r2, r3
 8000bde:	1092      	asrs	r2, r2, #2
 8000be0:	17db      	asrs	r3, r3, #31
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	4a27      	ldr	r2, [pc, #156]	; (8000c84 <display7SEGFinalhorizontal+0x1d8>)
 8000be6:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = red_yellow_green_manual_time[1] % 10;
 8000be8:	4b27      	ldr	r3, [pc, #156]	; (8000c88 <display7SEGFinalhorizontal+0x1dc>)
 8000bea:	6859      	ldr	r1, [r3, #4]
 8000bec:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <display7SEGFinalhorizontal+0x1d4>)
 8000bee:	fb83 2301 	smull	r2, r3, r3, r1
 8000bf2:	109a      	asrs	r2, r3, #2
 8000bf4:	17cb      	asrs	r3, r1, #31
 8000bf6:	1ad2      	subs	r2, r2, r3
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	4413      	add	r3, r2
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	1aca      	subs	r2, r1, r3
 8000c02:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <display7SEGFinalhorizontal+0x1d8>)
 8000c04:	605a      	str	r2, [r3, #4]
		break;
 8000c06:	e019      	b.n	8000c3c <display7SEGFinalhorizontal+0x190>
	}
	case MANUAL_GREEN:
	{
		buffer_7SEG_horizontal[0] = red_yellow_green_manual_time[2] / 10;
 8000c08:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <display7SEGFinalhorizontal+0x1dc>)
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	4a1c      	ldr	r2, [pc, #112]	; (8000c80 <display7SEGFinalhorizontal+0x1d4>)
 8000c0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c12:	1092      	asrs	r2, r2, #2
 8000c14:	17db      	asrs	r3, r3, #31
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	4a1a      	ldr	r2, [pc, #104]	; (8000c84 <display7SEGFinalhorizontal+0x1d8>)
 8000c1a:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = red_yellow_green_manual_time[2] % 10;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <display7SEGFinalhorizontal+0x1dc>)
 8000c1e:	6899      	ldr	r1, [r3, #8]
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <display7SEGFinalhorizontal+0x1d4>)
 8000c22:	fb83 2301 	smull	r2, r3, r3, r1
 8000c26:	109a      	asrs	r2, r3, #2
 8000c28:	17cb      	asrs	r3, r1, #31
 8000c2a:	1ad2      	subs	r2, r2, r3
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	4413      	add	r3, r2
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	1aca      	subs	r2, r1, r3
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <display7SEGFinalhorizontal+0x1d8>)
 8000c38:	605a      	str	r2, [r3, #4]
		break;
 8000c3a:	bf00      	nop
	}
	}

	if(timerENhorizontal_flag == 1)
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <display7SEGFinalhorizontal+0x1e0>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d114      	bne.n	8000c6e <display7SEGFinalhorizontal+0x1c2>
	{
		if(EN_horizontal > 1)
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <display7SEGFinalhorizontal+0x1e4>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	dd02      	ble.n	8000c52 <display7SEGFinalhorizontal+0x1a6>
		{
			EN_horizontal = 0;
 8000c4c:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <display7SEGFinalhorizontal+0x1e4>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
		}

		display7SEGBufferhorizontal(EN_horizontal);
 8000c52:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <display7SEGFinalhorizontal+0x1e4>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fe38 	bl	80008cc <display7SEGBufferhorizontal>

		EN_horizontal++;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <display7SEGFinalhorizontal+0x1e4>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	3301      	adds	r3, #1
 8000c62:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <display7SEGFinalhorizontal+0x1e4>)
 8000c64:	6013      	str	r3, [r2, #0]
		setTimerENhorizontal(500);
 8000c66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c6a:	f001 fa55 	bl	8002118 <setTimerENhorizontal>
	}
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000070 	.word	0x20000070
 8000c78:	20000064 	.word	0x20000064
 8000c7c:	200000c4 	.word	0x200000c4
 8000c80:	66666667 	.word	0x66666667
 8000c84:	200000ac 	.word	0x200000ac
 8000c88:	200000cc 	.word	0x200000cc
 8000c8c:	20000104 	.word	0x20000104
 8000c90:	20000000 	.word	0x20000000

08000c94 <isButton1Pressed>:
int button2_flag = 0;
int button3_flag = 0;
int button4_flag = 0;

int isButton1Pressed()
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
	if(button1_flag == 1)
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <isButton1Pressed+0x20>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d104      	bne.n	8000caa <isButton1Pressed+0x16>
	{
		button1_flag = 0;
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <isButton1Pressed+0x20>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
		return 1;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e000      	b.n	8000cac <isButton1Pressed+0x18>
	}

	return 0;
 8000caa:	2300      	movs	r3, #0
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	200000b4 	.word	0x200000b4

08000cb8 <isButton2Pressed>:

int isButton2Pressed()
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
	if(button2_flag == 1)
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <isButton2Pressed+0x20>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d104      	bne.n	8000cce <isButton2Pressed+0x16>
	{
		button2_flag = 0;
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <isButton2Pressed+0x20>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
		return 1;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e000      	b.n	8000cd0 <isButton2Pressed+0x18>
	}

	return 0;
 8000cce:	2300      	movs	r3, #0
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr
 8000cd8:	200000b8 	.word	0x200000b8

08000cdc <isButton3Pressed>:

int isButton3Pressed()
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
	if(button3_flag == 1)
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <isButton3Pressed+0x20>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d104      	bne.n	8000cf2 <isButton3Pressed+0x16>
	{
		button3_flag = 0;
 8000ce8:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <isButton3Pressed+0x20>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
		return 1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e000      	b.n	8000cf4 <isButton3Pressed+0x18>
	}

	return 0;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	200000bc 	.word	0x200000bc

08000d00 <isButton4Pressed>:

int isButton4Pressed()
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
	if(button4_flag == 1)
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <isButton4Pressed+0x20>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d104      	bne.n	8000d16 <isButton4Pressed+0x16>
	{
		button4_flag = 0;
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <isButton4Pressed+0x20>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
		return 1;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e000      	b.n	8000d18 <isButton4Pressed+0x18>
	}

	return 0;
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	200000c0 	.word	0x200000c0

08000d24 <getButton1>:

void getButton1()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
	int i = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
	keyReg0[i] = keyReg1[i];
 8000d2e:	4a39      	ldr	r2, [pc, #228]	; (8000e14 <getButton1+0xf0>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d36:	4938      	ldr	r1, [pc, #224]	; (8000e18 <getButton1+0xf4>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[i] = keyReg2[i];
 8000d3e:	4a37      	ldr	r2, [pc, #220]	; (8000e1c <getButton1+0xf8>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d46:	4933      	ldr	r1, [pc, #204]	; (8000e14 <getButton1+0xf0>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg2[i] = HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin);
 8000d4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d52:	4833      	ldr	r0, [pc, #204]	; (8000e20 <getButton1+0xfc>)
 8000d54:	f001 feac 	bl	8002ab0 <HAL_GPIO_ReadPin>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4a2f      	ldr	r2, [pc, #188]	; (8000e1c <getButton1+0xf8>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000d64:	4a2c      	ldr	r2, [pc, #176]	; (8000e18 <getButton1+0xf4>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d6c:	4929      	ldr	r1, [pc, #164]	; (8000e14 <getButton1+0xf0>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d149      	bne.n	8000e0c <getButton1+0xe8>
 8000d78:	4a26      	ldr	r2, [pc, #152]	; (8000e14 <getButton1+0xf0>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d80:	4926      	ldr	r1, [pc, #152]	; (8000e1c <getButton1+0xf8>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d13f      	bne.n	8000e0c <getButton1+0xe8>
	{
		if(keyReg3[i] != keyReg2[i])
 8000d8c:	4a25      	ldr	r2, [pc, #148]	; (8000e24 <getButton1+0x100>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d94:	4921      	ldr	r1, [pc, #132]	; (8000e1c <getButton1+0xf8>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d017      	beq.n	8000dd0 <getButton1+0xac>
		{
			keyReg3[i] = keyReg2[i];
 8000da0:	4a1e      	ldr	r2, [pc, #120]	; (8000e1c <getButton1+0xf8>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000da8:	491e      	ldr	r1, [pc, #120]	; (8000e24 <getButton1+0x100>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(keyReg2[i] == PRESSED_STATE)
 8000db0:	4a1a      	ldr	r2, [pc, #104]	; (8000e1c <getButton1+0xf8>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d127      	bne.n	8000e0c <getButton1+0xe8>
			{
				button1_flag = 1;
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <getButton1+0x104>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	601a      	str	r2, [r3, #0]
				TimerForKeyPress[i] = 300;
 8000dc2:	4a1a      	ldr	r2, [pc, #104]	; (8000e2c <getButton1+0x108>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000dca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimerForKeyPress[i] = 300;
				}
			}
		}
	}
}
 8000dce:	e01d      	b.n	8000e0c <getButton1+0xe8>
			if(keyReg2[i] == PRESSED_STATE)
 8000dd0:	4a12      	ldr	r2, [pc, #72]	; (8000e1c <getButton1+0xf8>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d117      	bne.n	8000e0c <getButton1+0xe8>
				TimerForKeyPress[i]--;
 8000ddc:	4a13      	ldr	r2, [pc, #76]	; (8000e2c <getButton1+0x108>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de4:	1e5a      	subs	r2, r3, #1
 8000de6:	4911      	ldr	r1, [pc, #68]	; (8000e2c <getButton1+0x108>)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeyPress[i] == 0)
 8000dee:	4a0f      	ldr	r2, [pc, #60]	; (8000e2c <getButton1+0x108>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d108      	bne.n	8000e0c <getButton1+0xe8>
					button1_flag = 1;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <getButton1+0x104>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]
					TimerForKeyPress[i] = 300;
 8000e00:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <getButton1+0x108>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000e08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000018 	.word	0x20000018
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	20000028 	.word	0x20000028
 8000e20:	40010800 	.word	0x40010800
 8000e24:	20000038 	.word	0x20000038
 8000e28:	200000b4 	.word	0x200000b4
 8000e2c:	20000048 	.word	0x20000048

08000e30 <getButton2>:

void getButton2()
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
	int i = 1;
 8000e36:	2301      	movs	r3, #1
 8000e38:	607b      	str	r3, [r7, #4]
	keyReg0[i] = keyReg1[i];
 8000e3a:	4a38      	ldr	r2, [pc, #224]	; (8000f1c <getButton2+0xec>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e42:	4937      	ldr	r1, [pc, #220]	; (8000f20 <getButton2+0xf0>)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[i] = keyReg2[i];
 8000e4a:	4a36      	ldr	r2, [pc, #216]	; (8000f24 <getButton2+0xf4>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e52:	4932      	ldr	r1, [pc, #200]	; (8000f1c <getButton2+0xec>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg2[i] = HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin);
 8000e5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e5e:	4832      	ldr	r0, [pc, #200]	; (8000f28 <getButton2+0xf8>)
 8000e60:	f001 fe26 	bl	8002ab0 <HAL_GPIO_ReadPin>
 8000e64:	4603      	mov	r3, r0
 8000e66:	4619      	mov	r1, r3
 8000e68:	4a2e      	ldr	r2, [pc, #184]	; (8000f24 <getButton2+0xf4>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000e70:	4a2b      	ldr	r2, [pc, #172]	; (8000f20 <getButton2+0xf0>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e78:	4928      	ldr	r1, [pc, #160]	; (8000f1c <getButton2+0xec>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d147      	bne.n	8000f14 <getButton2+0xe4>
 8000e84:	4a25      	ldr	r2, [pc, #148]	; (8000f1c <getButton2+0xec>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e8c:	4925      	ldr	r1, [pc, #148]	; (8000f24 <getButton2+0xf4>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d13d      	bne.n	8000f14 <getButton2+0xe4>
	{
		if(keyReg3[i] != keyReg2[i])
 8000e98:	4a24      	ldr	r2, [pc, #144]	; (8000f2c <getButton2+0xfc>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ea0:	4920      	ldr	r1, [pc, #128]	; (8000f24 <getButton2+0xf4>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d016      	beq.n	8000eda <getButton2+0xaa>
		{
			keyReg3[i] = keyReg2[i];
 8000eac:	4a1d      	ldr	r2, [pc, #116]	; (8000f24 <getButton2+0xf4>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000eb4:	491d      	ldr	r1, [pc, #116]	; (8000f2c <getButton2+0xfc>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(keyReg2[i] == PRESSED_STATE)
 8000ebc:	4a19      	ldr	r2, [pc, #100]	; (8000f24 <getButton2+0xf4>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d125      	bne.n	8000f14 <getButton2+0xe4>
			{
				button2_flag = 1;
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <getButton2+0x100>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	601a      	str	r2, [r3, #0]
				TimerForKeyPress[i] = 50;
 8000ece:	4a19      	ldr	r2, [pc, #100]	; (8000f34 <getButton2+0x104>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2132      	movs	r1, #50	; 0x32
 8000ed4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimerForKeyPress[i] = 50;
				}
			}
		}
	}
}
 8000ed8:	e01c      	b.n	8000f14 <getButton2+0xe4>
			if(keyReg2[i] == PRESSED_STATE)
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <getButton2+0xf4>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d116      	bne.n	8000f14 <getButton2+0xe4>
				TimerForKeyPress[i]--;
 8000ee6:	4a13      	ldr	r2, [pc, #76]	; (8000f34 <getButton2+0x104>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eee:	1e5a      	subs	r2, r3, #1
 8000ef0:	4910      	ldr	r1, [pc, #64]	; (8000f34 <getButton2+0x104>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeyPress[i] == 0)
 8000ef8:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <getButton2+0x104>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d107      	bne.n	8000f14 <getButton2+0xe4>
					button2_flag = 1;
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <getButton2+0x100>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	601a      	str	r2, [r3, #0]
					TimerForKeyPress[i] = 50;
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <getButton2+0x104>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2132      	movs	r1, #50	; 0x32
 8000f10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000018 	.word	0x20000018
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000028 	.word	0x20000028
 8000f28:	40010800 	.word	0x40010800
 8000f2c:	20000038 	.word	0x20000038
 8000f30:	200000b8 	.word	0x200000b8
 8000f34:	20000048 	.word	0x20000048

08000f38 <getButton3>:

void getButton3()
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
	int i = 2;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	607b      	str	r3, [r7, #4]
	keyReg0[i] = keyReg1[i];
 8000f42:	4a38      	ldr	r2, [pc, #224]	; (8001024 <getButton3+0xec>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f4a:	4937      	ldr	r1, [pc, #220]	; (8001028 <getButton3+0xf0>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[i] = keyReg2[i];
 8000f52:	4a36      	ldr	r2, [pc, #216]	; (800102c <getButton3+0xf4>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f5a:	4932      	ldr	r1, [pc, #200]	; (8001024 <getButton3+0xec>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg2[i] = HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin);
 8000f62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f66:	4832      	ldr	r0, [pc, #200]	; (8001030 <getButton3+0xf8>)
 8000f68:	f001 fda2 	bl	8002ab0 <HAL_GPIO_ReadPin>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4a2e      	ldr	r2, [pc, #184]	; (800102c <getButton3+0xf4>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000f78:	4a2b      	ldr	r2, [pc, #172]	; (8001028 <getButton3+0xf0>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f80:	4928      	ldr	r1, [pc, #160]	; (8001024 <getButton3+0xec>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d147      	bne.n	800101c <getButton3+0xe4>
 8000f8c:	4a25      	ldr	r2, [pc, #148]	; (8001024 <getButton3+0xec>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f94:	4925      	ldr	r1, [pc, #148]	; (800102c <getButton3+0xf4>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d13d      	bne.n	800101c <getButton3+0xe4>
	{
		if(keyReg3[i] != keyReg2[i])
 8000fa0:	4a24      	ldr	r2, [pc, #144]	; (8001034 <getButton3+0xfc>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fa8:	4920      	ldr	r1, [pc, #128]	; (800102c <getButton3+0xf4>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d016      	beq.n	8000fe2 <getButton3+0xaa>
		{
			keyReg3[i] = keyReg2[i];
 8000fb4:	4a1d      	ldr	r2, [pc, #116]	; (800102c <getButton3+0xf4>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fbc:	491d      	ldr	r1, [pc, #116]	; (8001034 <getButton3+0xfc>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(keyReg2[i] == PRESSED_STATE)
 8000fc4:	4a19      	ldr	r2, [pc, #100]	; (800102c <getButton3+0xf4>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d125      	bne.n	800101c <getButton3+0xe4>
			{
				button3_flag = 1;
 8000fd0:	4b19      	ldr	r3, [pc, #100]	; (8001038 <getButton3+0x100>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	601a      	str	r2, [r3, #0]
				TimerForKeyPress[i] = 50;
 8000fd6:	4a19      	ldr	r2, [pc, #100]	; (800103c <getButton3+0x104>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2132      	movs	r1, #50	; 0x32
 8000fdc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimerForKeyPress[i] = 50;
				}
			}
		}
	}
}
 8000fe0:	e01c      	b.n	800101c <getButton3+0xe4>
			if(keyReg2[i] == PRESSED_STATE)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <getButton3+0xf4>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d116      	bne.n	800101c <getButton3+0xe4>
				TimerForKeyPress[i]--;
 8000fee:	4a13      	ldr	r2, [pc, #76]	; (800103c <getButton3+0x104>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff6:	1e5a      	subs	r2, r3, #1
 8000ff8:	4910      	ldr	r1, [pc, #64]	; (800103c <getButton3+0x104>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeyPress[i] == 0)
 8001000:	4a0e      	ldr	r2, [pc, #56]	; (800103c <getButton3+0x104>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d107      	bne.n	800101c <getButton3+0xe4>
					button3_flag = 1;
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <getButton3+0x100>)
 800100e:	2201      	movs	r2, #1
 8001010:	601a      	str	r2, [r3, #0]
					TimerForKeyPress[i] = 50;
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <getButton3+0x104>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2132      	movs	r1, #50	; 0x32
 8001018:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000018 	.word	0x20000018
 8001028:	20000008 	.word	0x20000008
 800102c:	20000028 	.word	0x20000028
 8001030:	40010800 	.word	0x40010800
 8001034:	20000038 	.word	0x20000038
 8001038:	200000bc 	.word	0x200000bc
 800103c:	20000048 	.word	0x20000048

08001040 <getButton4>:

void getButton4()
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
	int i = 3;
 8001046:	2303      	movs	r3, #3
 8001048:	607b      	str	r3, [r7, #4]
	keyReg0[i] = keyReg1[i];
 800104a:	4a39      	ldr	r2, [pc, #228]	; (8001130 <getButton4+0xf0>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001052:	4938      	ldr	r1, [pc, #224]	; (8001134 <getButton4+0xf4>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[i] = keyReg2[i];
 800105a:	4a37      	ldr	r2, [pc, #220]	; (8001138 <getButton4+0xf8>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001062:	4933      	ldr	r1, [pc, #204]	; (8001130 <getButton4+0xf0>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg2[i] = HAL_GPIO_ReadPin(button4_GPIO_Port, button4_Pin);
 800106a:	2101      	movs	r1, #1
 800106c:	4833      	ldr	r0, [pc, #204]	; (800113c <getButton4+0xfc>)
 800106e:	f001 fd1f 	bl	8002ab0 <HAL_GPIO_ReadPin>
 8001072:	4603      	mov	r3, r0
 8001074:	4619      	mov	r1, r3
 8001076:	4a30      	ldr	r2, [pc, #192]	; (8001138 <getButton4+0xf8>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 800107e:	4a2d      	ldr	r2, [pc, #180]	; (8001134 <getButton4+0xf4>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001086:	492a      	ldr	r1, [pc, #168]	; (8001130 <getButton4+0xf0>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800108e:	429a      	cmp	r2, r3
 8001090:	d149      	bne.n	8001126 <getButton4+0xe6>
 8001092:	4a27      	ldr	r2, [pc, #156]	; (8001130 <getButton4+0xf0>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800109a:	4927      	ldr	r1, [pc, #156]	; (8001138 <getButton4+0xf8>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d13f      	bne.n	8001126 <getButton4+0xe6>
	{
		if(keyReg3[i] != keyReg2[i])
 80010a6:	4a26      	ldr	r2, [pc, #152]	; (8001140 <getButton4+0x100>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010ae:	4922      	ldr	r1, [pc, #136]	; (8001138 <getButton4+0xf8>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d017      	beq.n	80010ea <getButton4+0xaa>
		{
			keyReg3[i] = keyReg2[i];
 80010ba:	4a1f      	ldr	r2, [pc, #124]	; (8001138 <getButton4+0xf8>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010c2:	491f      	ldr	r1, [pc, #124]	; (8001140 <getButton4+0x100>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(keyReg2[i] == PRESSED_STATE)
 80010ca:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <getButton4+0xf8>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d127      	bne.n	8001126 <getButton4+0xe6>
			{
				button4_flag = 1;
 80010d6:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <getButton4+0x104>)
 80010d8:	2201      	movs	r2, #1
 80010da:	601a      	str	r2, [r3, #0]
				TimerForKeyPress[i] = 300;
 80010dc:	4a1a      	ldr	r2, [pc, #104]	; (8001148 <getButton4+0x108>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80010e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimerForKeyPress[i] = 300;
				}
			}
		}
	}
}
 80010e8:	e01d      	b.n	8001126 <getButton4+0xe6>
			if(keyReg2[i] == PRESSED_STATE)
 80010ea:	4a13      	ldr	r2, [pc, #76]	; (8001138 <getButton4+0xf8>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d117      	bne.n	8001126 <getButton4+0xe6>
				TimerForKeyPress[i]--;
 80010f6:	4a14      	ldr	r2, [pc, #80]	; (8001148 <getButton4+0x108>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fe:	1e5a      	subs	r2, r3, #1
 8001100:	4911      	ldr	r1, [pc, #68]	; (8001148 <getButton4+0x108>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeyPress[i] == 0)
 8001108:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <getButton4+0x108>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d108      	bne.n	8001126 <getButton4+0xe6>
					button4_flag = 1;
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <getButton4+0x104>)
 8001116:	2201      	movs	r2, #1
 8001118:	601a      	str	r2, [r3, #0]
					TimerForKeyPress[i] = 300;
 800111a:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <getButton4+0x108>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001122:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000018 	.word	0x20000018
 8001134:	20000008 	.word	0x20000008
 8001138:	20000028 	.word	0x20000028
 800113c:	40010c00 	.word	0x40010c00
 8001140:	20000038 	.word	0x20000038
 8001144:	200000c0 	.word	0x200000c0
 8001148:	20000048 	.word	0x20000048

0800114c <fsm_automatic>:

int status_horizontal = AUTO_RED;
int status_vertical = AUTO_GREEN;

void fsm_automatic()
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	fsm_auto_horizontal();
 8001150:	f000 f804 	bl	800115c <fsm_auto_horizontal>

	fsm_auto_vertical();
 8001154:	f000 f8a8 	bl	80012a8 <fsm_auto_vertical>
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}

0800115c <fsm_auto_horizontal>:

void fsm_auto_horizontal()
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	switch(status_horizontal)
 8001160:	4b4c      	ldr	r3, [pc, #304]	; (8001294 <fsm_auto_horizontal+0x138>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b03      	cmp	r3, #3
 8001166:	d061      	beq.n	800122c <fsm_auto_horizontal+0xd0>
 8001168:	2b03      	cmp	r3, #3
 800116a:	f300 8091 	bgt.w	8001290 <fsm_auto_horizontal+0x134>
 800116e:	2b01      	cmp	r3, #1
 8001170:	d002      	beq.n	8001178 <fsm_auto_horizontal+0x1c>
 8001172:	2b02      	cmp	r3, #2
 8001174:	d02d      	beq.n	80011d2 <fsm_auto_horizontal+0x76>

		break;
	}
	}

}
 8001176:	e08b      	b.n	8001290 <fsm_auto_horizontal+0x134>
		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_SET);
 8001178:	2201      	movs	r2, #1
 800117a:	2104      	movs	r1, #4
 800117c:	4846      	ldr	r0, [pc, #280]	; (8001298 <fsm_auto_horizontal+0x13c>)
 800117e:	f001 fcae 	bl	8002ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	2108      	movs	r1, #8
 8001186:	4844      	ldr	r0, [pc, #272]	; (8001298 <fsm_auto_horizontal+0x13c>)
 8001188:	f001 fca9 	bl	8002ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	2110      	movs	r1, #16
 8001190:	4841      	ldr	r0, [pc, #260]	; (8001298 <fsm_auto_horizontal+0x13c>)
 8001192:	f001 fca4 	bl	8002ade <HAL_GPIO_WritePin>
		if(timer7SEGCountHorizontal_flag == 1)
 8001196:	4b41      	ldr	r3, [pc, #260]	; (800129c <fsm_auto_horizontal+0x140>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d108      	bne.n	80011b0 <fsm_auto_horizontal+0x54>
			horizontal_counter++;
 800119e:	4b40      	ldr	r3, [pc, #256]	; (80012a0 <fsm_auto_horizontal+0x144>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	4a3e      	ldr	r2, [pc, #248]	; (80012a0 <fsm_auto_horizontal+0x144>)
 80011a6:	6013      	str	r3, [r2, #0]
			setTimer7SEGCountHorizontal(1000);
 80011a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ac:	f000 ffe8 	bl	8002180 <setTimer7SEGCountHorizontal>
		if(red_yellow_green_auto_time_horizontal[0] == horizontal_counter)
 80011b0:	4b3c      	ldr	r3, [pc, #240]	; (80012a4 <fsm_auto_horizontal+0x148>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b3a      	ldr	r3, [pc, #232]	; (80012a0 <fsm_auto_horizontal+0x144>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d164      	bne.n	8001286 <fsm_auto_horizontal+0x12a>
			setTimer7SEGCountHorizontal(1000);
 80011bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011c0:	f000 ffde 	bl	8002180 <setTimer7SEGCountHorizontal>
			horizontal_counter = 0;
 80011c4:	4b36      	ldr	r3, [pc, #216]	; (80012a0 <fsm_auto_horizontal+0x144>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
			status_horizontal = AUTO_GREEN;
 80011ca:	4b32      	ldr	r3, [pc, #200]	; (8001294 <fsm_auto_horizontal+0x138>)
 80011cc:	2203      	movs	r2, #3
 80011ce:	601a      	str	r2, [r3, #0]
		break;
 80011d0:	e059      	b.n	8001286 <fsm_auto_horizontal+0x12a>
		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2104      	movs	r1, #4
 80011d6:	4830      	ldr	r0, [pc, #192]	; (8001298 <fsm_auto_horizontal+0x13c>)
 80011d8:	f001 fc81 	bl	8002ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_SET);
 80011dc:	2201      	movs	r2, #1
 80011de:	2108      	movs	r1, #8
 80011e0:	482d      	ldr	r0, [pc, #180]	; (8001298 <fsm_auto_horizontal+0x13c>)
 80011e2:	f001 fc7c 	bl	8002ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2110      	movs	r1, #16
 80011ea:	482b      	ldr	r0, [pc, #172]	; (8001298 <fsm_auto_horizontal+0x13c>)
 80011ec:	f001 fc77 	bl	8002ade <HAL_GPIO_WritePin>
		if(timer7SEGCountHorizontal_flag == 1)
 80011f0:	4b2a      	ldr	r3, [pc, #168]	; (800129c <fsm_auto_horizontal+0x140>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d108      	bne.n	800120a <fsm_auto_horizontal+0xae>
			horizontal_counter++;
 80011f8:	4b29      	ldr	r3, [pc, #164]	; (80012a0 <fsm_auto_horizontal+0x144>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	3301      	adds	r3, #1
 80011fe:	4a28      	ldr	r2, [pc, #160]	; (80012a0 <fsm_auto_horizontal+0x144>)
 8001200:	6013      	str	r3, [r2, #0]
			setTimer7SEGCountHorizontal(1000);
 8001202:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001206:	f000 ffbb 	bl	8002180 <setTimer7SEGCountHorizontal>
		if(red_yellow_green_auto_time_horizontal[1] == horizontal_counter)
 800120a:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <fsm_auto_horizontal+0x148>)
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <fsm_auto_horizontal+0x144>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	429a      	cmp	r2, r3
 8001214:	d139      	bne.n	800128a <fsm_auto_horizontal+0x12e>
			setTimer7SEGCountHorizontal(1000);
 8001216:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800121a:	f000 ffb1 	bl	8002180 <setTimer7SEGCountHorizontal>
			horizontal_counter = 0;
 800121e:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <fsm_auto_horizontal+0x144>)
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
			status_horizontal = AUTO_RED;
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <fsm_auto_horizontal+0x138>)
 8001226:	2201      	movs	r2, #1
 8001228:	601a      	str	r2, [r3, #0]
		break;
 800122a:	e02e      	b.n	800128a <fsm_auto_horizontal+0x12e>
		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	2104      	movs	r1, #4
 8001230:	4819      	ldr	r0, [pc, #100]	; (8001298 <fsm_auto_horizontal+0x13c>)
 8001232:	f001 fc54 	bl	8002ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2108      	movs	r1, #8
 800123a:	4817      	ldr	r0, [pc, #92]	; (8001298 <fsm_auto_horizontal+0x13c>)
 800123c:	f001 fc4f 	bl	8002ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_SET);
 8001240:	2201      	movs	r2, #1
 8001242:	2110      	movs	r1, #16
 8001244:	4814      	ldr	r0, [pc, #80]	; (8001298 <fsm_auto_horizontal+0x13c>)
 8001246:	f001 fc4a 	bl	8002ade <HAL_GPIO_WritePin>
		if(timer7SEGCountHorizontal_flag == 1)
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <fsm_auto_horizontal+0x140>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d108      	bne.n	8001264 <fsm_auto_horizontal+0x108>
			horizontal_counter++;
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <fsm_auto_horizontal+0x144>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	3301      	adds	r3, #1
 8001258:	4a11      	ldr	r2, [pc, #68]	; (80012a0 <fsm_auto_horizontal+0x144>)
 800125a:	6013      	str	r3, [r2, #0]
			setTimer7SEGCountHorizontal(1000);
 800125c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001260:	f000 ff8e 	bl	8002180 <setTimer7SEGCountHorizontal>
		if(red_yellow_green_auto_time_horizontal[2] == horizontal_counter)
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <fsm_auto_horizontal+0x148>)
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <fsm_auto_horizontal+0x144>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	429a      	cmp	r2, r3
 800126e:	d10e      	bne.n	800128e <fsm_auto_horizontal+0x132>
			setTimer7SEGCountHorizontal(1000);
 8001270:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001274:	f000 ff84 	bl	8002180 <setTimer7SEGCountHorizontal>
			horizontal_counter = 0;
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <fsm_auto_horizontal+0x144>)
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
			status_horizontal = AUTO_YELLOW;
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <fsm_auto_horizontal+0x138>)
 8001280:	2202      	movs	r2, #2
 8001282:	601a      	str	r2, [r3, #0]
		break;
 8001284:	e003      	b.n	800128e <fsm_auto_horizontal+0x132>
		break;
 8001286:	bf00      	nop
 8001288:	e002      	b.n	8001290 <fsm_auto_horizontal+0x134>
		break;
 800128a:	bf00      	nop
 800128c:	e000      	b.n	8001290 <fsm_auto_horizontal+0x134>
		break;
 800128e:	bf00      	nop
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000070 	.word	0x20000070
 8001298:	40010800 	.word	0x40010800
 800129c:	20000114 	.word	0x20000114
 80012a0:	200000c4 	.word	0x200000c4
 80012a4:	20000064 	.word	0x20000064

080012a8 <fsm_auto_vertical>:

void fsm_auto_vertical()
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0

	switch(status_vertical)
 80012ac:	4b51      	ldr	r3, [pc, #324]	; (80013f4 <fsm_auto_vertical+0x14c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	d067      	beq.n	8001384 <fsm_auto_vertical+0xdc>
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	f300 809a 	bgt.w	80013ee <fsm_auto_vertical+0x146>
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d002      	beq.n	80012c4 <fsm_auto_vertical+0x1c>
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d030      	beq.n	8001324 <fsm_auto_vertical+0x7c>

		break;
	}
	}

}
 80012c2:	e094      	b.n	80013ee <fsm_auto_vertical+0x146>
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 80012c4:	2201      	movs	r2, #1
 80012c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ca:	484b      	ldr	r0, [pc, #300]	; (80013f8 <fsm_auto_vertical+0x150>)
 80012cc:	f001 fc07 	bl	8002ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012d6:	4848      	ldr	r0, [pc, #288]	; (80013f8 <fsm_auto_vertical+0x150>)
 80012d8:	f001 fc01 	bl	8002ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012e2:	4845      	ldr	r0, [pc, #276]	; (80013f8 <fsm_auto_vertical+0x150>)
 80012e4:	f001 fbfb 	bl	8002ade <HAL_GPIO_WritePin>
		if(timer7SEGCountVertical_flag == 1)
 80012e8:	4b44      	ldr	r3, [pc, #272]	; (80013fc <fsm_auto_vertical+0x154>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d108      	bne.n	8001302 <fsm_auto_vertical+0x5a>
			vertical_counter++;
 80012f0:	4b43      	ldr	r3, [pc, #268]	; (8001400 <fsm_auto_vertical+0x158>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	3301      	adds	r3, #1
 80012f6:	4a42      	ldr	r2, [pc, #264]	; (8001400 <fsm_auto_vertical+0x158>)
 80012f8:	6013      	str	r3, [r2, #0]
			setTimer7SEGCountVertical(1000);
 80012fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012fe:	f000 ff59 	bl	80021b4 <setTimer7SEGCountVertical>
		if(red_yellow_green_auto_time_vertical[0] == vertical_counter)
 8001302:	4b40      	ldr	r3, [pc, #256]	; (8001404 <fsm_auto_vertical+0x15c>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4b3e      	ldr	r3, [pc, #248]	; (8001400 <fsm_auto_vertical+0x158>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	429a      	cmp	r2, r3
 800130c:	d16a      	bne.n	80013e4 <fsm_auto_vertical+0x13c>
			setTimer7SEGCountVertical(1000);
 800130e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001312:	f000 ff4f 	bl	80021b4 <setTimer7SEGCountVertical>
			vertical_counter = 0;
 8001316:	4b3a      	ldr	r3, [pc, #232]	; (8001400 <fsm_auto_vertical+0x158>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_GREEN;
 800131c:	4b35      	ldr	r3, [pc, #212]	; (80013f4 <fsm_auto_vertical+0x14c>)
 800131e:	2203      	movs	r2, #3
 8001320:	601a      	str	r2, [r3, #0]
		break;
 8001322:	e05f      	b.n	80013e4 <fsm_auto_vertical+0x13c>
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800132a:	4833      	ldr	r0, [pc, #204]	; (80013f8 <fsm_auto_vertical+0x150>)
 800132c:	f001 fbd7 	bl	8002ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);
 8001330:	2201      	movs	r2, #1
 8001332:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001336:	4830      	ldr	r0, [pc, #192]	; (80013f8 <fsm_auto_vertical+0x150>)
 8001338:	f001 fbd1 	bl	8002ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001342:	482d      	ldr	r0, [pc, #180]	; (80013f8 <fsm_auto_vertical+0x150>)
 8001344:	f001 fbcb 	bl	8002ade <HAL_GPIO_WritePin>
		if(timer7SEGCountVertical_flag == 1)
 8001348:	4b2c      	ldr	r3, [pc, #176]	; (80013fc <fsm_auto_vertical+0x154>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d108      	bne.n	8001362 <fsm_auto_vertical+0xba>
			vertical_counter++;
 8001350:	4b2b      	ldr	r3, [pc, #172]	; (8001400 <fsm_auto_vertical+0x158>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3301      	adds	r3, #1
 8001356:	4a2a      	ldr	r2, [pc, #168]	; (8001400 <fsm_auto_vertical+0x158>)
 8001358:	6013      	str	r3, [r2, #0]
			setTimer7SEGCountVertical(1000);
 800135a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800135e:	f000 ff29 	bl	80021b4 <setTimer7SEGCountVertical>
		if(red_yellow_green_auto_time_vertical[1] == vertical_counter)
 8001362:	4b28      	ldr	r3, [pc, #160]	; (8001404 <fsm_auto_vertical+0x15c>)
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	4b26      	ldr	r3, [pc, #152]	; (8001400 <fsm_auto_vertical+0x158>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	d13c      	bne.n	80013e8 <fsm_auto_vertical+0x140>
			setTimer7SEGCountVertical(1000);
 800136e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001372:	f000 ff1f 	bl	80021b4 <setTimer7SEGCountVertical>
			vertical_counter = 0;
 8001376:	4b22      	ldr	r3, [pc, #136]	; (8001400 <fsm_auto_vertical+0x158>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_RED;
 800137c:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <fsm_auto_vertical+0x14c>)
 800137e:	2201      	movs	r2, #1
 8001380:	601a      	str	r2, [r3, #0]
		break;
 8001382:	e031      	b.n	80013e8 <fsm_auto_vertical+0x140>
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800138a:	481b      	ldr	r0, [pc, #108]	; (80013f8 <fsm_auto_vertical+0x150>)
 800138c:	f001 fba7 	bl	8002ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001396:	4818      	ldr	r0, [pc, #96]	; (80013f8 <fsm_auto_vertical+0x150>)
 8001398:	f001 fba1 	bl	8002ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 800139c:	2201      	movs	r2, #1
 800139e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013a2:	4815      	ldr	r0, [pc, #84]	; (80013f8 <fsm_auto_vertical+0x150>)
 80013a4:	f001 fb9b 	bl	8002ade <HAL_GPIO_WritePin>
		if(timer7SEGCountVertical_flag == 1)
 80013a8:	4b14      	ldr	r3, [pc, #80]	; (80013fc <fsm_auto_vertical+0x154>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d108      	bne.n	80013c2 <fsm_auto_vertical+0x11a>
			vertical_counter++;
 80013b0:	4b13      	ldr	r3, [pc, #76]	; (8001400 <fsm_auto_vertical+0x158>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	4a12      	ldr	r2, [pc, #72]	; (8001400 <fsm_auto_vertical+0x158>)
 80013b8:	6013      	str	r3, [r2, #0]
			setTimer7SEGCountVertical(1000);
 80013ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013be:	f000 fef9 	bl	80021b4 <setTimer7SEGCountVertical>
		if(red_yellow_green_auto_time_vertical[2] == vertical_counter)
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <fsm_auto_vertical+0x15c>)
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <fsm_auto_vertical+0x158>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d10e      	bne.n	80013ec <fsm_auto_vertical+0x144>
			setTimer7SEGCountVertical(1000);
 80013ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013d2:	f000 feef 	bl	80021b4 <setTimer7SEGCountVertical>
			vertical_counter = 0;
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <fsm_auto_vertical+0x158>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_YELLOW;
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <fsm_auto_vertical+0x14c>)
 80013de:	2202      	movs	r2, #2
 80013e0:	601a      	str	r2, [r3, #0]
		break;
 80013e2:	e003      	b.n	80013ec <fsm_auto_vertical+0x144>
		break;
 80013e4:	bf00      	nop
 80013e6:	e002      	b.n	80013ee <fsm_auto_vertical+0x146>
		break;
 80013e8:	bf00      	nop
 80013ea:	e000      	b.n	80013ee <fsm_auto_vertical+0x146>
		break;
 80013ec:	bf00      	nop
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000074 	.word	0x20000074
 80013f8:	40010c00 	.word	0x40010c00
 80013fc:	2000011c 	.word	0x2000011c
 8001400:	200000c8 	.word	0x200000c8
 8001404:	20000058 	.word	0x20000058

08001408 <fsm_manual>:
int check_button3_red = 0;
int check_button3_yellow = 0;
int check_button3_green = 0;

void fsm_manual()
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
	switch(status_horizontal)
 800140e:	4bae      	ldr	r3, [pc, #696]	; (80016c8 <fsm_manual+0x2c0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	3b01      	subs	r3, #1
 8001414:	2b06      	cmp	r3, #6
 8001416:	f200 84f7 	bhi.w	8001e08 <fsm_manual+0xa00>
 800141a:	a201      	add	r2, pc, #4	; (adr r2, 8001420 <fsm_manual+0x18>)
 800141c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001420:	0800143d 	.word	0x0800143d
 8001424:	080014c1 	.word	0x080014c1
 8001428:	08001545 	.word	0x08001545
 800142c:	08001e09 	.word	0x08001e09
 8001430:	080015c9 	.word	0x080015c9
 8001434:	080017ab 	.word	0x080017ab
 8001438:	080019f9 	.word	0x080019f9
	{
	case AUTO_RED:
	{
		if(isButton1Pressed() == 1)
 800143c:	f7ff fc2a 	bl	8000c94 <isButton1Pressed>
 8001440:	4603      	mov	r3, r0
 8001442:	2b01      	cmp	r3, #1
 8001444:	f040 84d5 	bne.w	8001df2 <fsm_manual+0x9ea>
		{
			for(int i = 0; i < 3; i++)
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	e00a      	b.n	8001464 <fsm_manual+0x5c>
			{
				red_yellow_green_manual_time[i] = red_yellow_green_auto_time_horizontal[i];
 800144e:	4a9f      	ldr	r2, [pc, #636]	; (80016cc <fsm_manual+0x2c4>)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001456:	499e      	ldr	r1, [pc, #632]	; (80016d0 <fsm_manual+0x2c8>)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int i = 0; i < 3; i++)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	3301      	adds	r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2b02      	cmp	r3, #2
 8001468:	ddf1      	ble.n	800144e <fsm_manual+0x46>
			}

			setTimerBlinking(500);
 800146a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800146e:	f000 fed5 	bl	800221c <setTimerBlinking>
			setTimerAuto(10000);
 8001472:	f242 7010 	movw	r0, #10000	; 0x2710
 8001476:	f000 feb7 	bl	80021e8 <setTimerAuto>

			check_sync_red = 0;
 800147a:	4b96      	ldr	r3, [pc, #600]	; (80016d4 <fsm_manual+0x2cc>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
			check_sync_yellow = 0;
 8001480:	4b95      	ldr	r3, [pc, #596]	; (80016d8 <fsm_manual+0x2d0>)
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
			check_sync_green = 0;
 8001486:	4b95      	ldr	r3, [pc, #596]	; (80016dc <fsm_manual+0x2d4>)
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]

			check_button2_red = 0;
 800148c:	4b94      	ldr	r3, [pc, #592]	; (80016e0 <fsm_manual+0x2d8>)
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
			check_button2_yellow = 0;
 8001492:	4b94      	ldr	r3, [pc, #592]	; (80016e4 <fsm_manual+0x2dc>)
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
			check_button2_green = 0;
 8001498:	4b93      	ldr	r3, [pc, #588]	; (80016e8 <fsm_manual+0x2e0>)
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]

			check_button3_red = 0;
 800149e:	4b93      	ldr	r3, [pc, #588]	; (80016ec <fsm_manual+0x2e4>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
			check_button3_yellow = 0;
 80014a4:	4b92      	ldr	r3, [pc, #584]	; (80016f0 <fsm_manual+0x2e8>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
			check_button3_green = 0;
 80014aa:	4b92      	ldr	r3, [pc, #584]	; (80016f4 <fsm_manual+0x2ec>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]

			status_horizontal = MANUAL_RED;
 80014b0:	4b85      	ldr	r3, [pc, #532]	; (80016c8 <fsm_manual+0x2c0>)
 80014b2:	2205      	movs	r2, #5
 80014b4:	601a      	str	r2, [r3, #0]
			status_vertical = MANUAL_RED;
 80014b6:	4b90      	ldr	r3, [pc, #576]	; (80016f8 <fsm_manual+0x2f0>)
 80014b8:	2205      	movs	r2, #5
 80014ba:	601a      	str	r2, [r3, #0]
		}
		break;
 80014bc:	f000 bc99 	b.w	8001df2 <fsm_manual+0x9ea>
	}
	case AUTO_YELLOW:
	{
		if(isButton1Pressed() == 1)
 80014c0:	f7ff fbe8 	bl	8000c94 <isButton1Pressed>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	f040 8495 	bne.w	8001df6 <fsm_manual+0x9ee>
		{
			for(int i = 0; i < 3; i++)
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	e00a      	b.n	80014e8 <fsm_manual+0xe0>
			{
				red_yellow_green_manual_time[i] = red_yellow_green_auto_time_horizontal[i];
 80014d2:	4a7e      	ldr	r2, [pc, #504]	; (80016cc <fsm_manual+0x2c4>)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014da:	497d      	ldr	r1, [pc, #500]	; (80016d0 <fsm_manual+0x2c8>)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int i = 0; i < 3; i++)
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	3301      	adds	r3, #1
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	ddf1      	ble.n	80014d2 <fsm_manual+0xca>
			}

			setTimerBlinking(500);
 80014ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014f2:	f000 fe93 	bl	800221c <setTimerBlinking>
			setTimerAuto(10000);
 80014f6:	f242 7010 	movw	r0, #10000	; 0x2710
 80014fa:	f000 fe75 	bl	80021e8 <setTimerAuto>

			check_sync_red = 0;
 80014fe:	4b75      	ldr	r3, [pc, #468]	; (80016d4 <fsm_manual+0x2cc>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
			check_sync_yellow = 0;
 8001504:	4b74      	ldr	r3, [pc, #464]	; (80016d8 <fsm_manual+0x2d0>)
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
			check_sync_green = 0;
 800150a:	4b74      	ldr	r3, [pc, #464]	; (80016dc <fsm_manual+0x2d4>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]

			check_button2_red = 0;
 8001510:	4b73      	ldr	r3, [pc, #460]	; (80016e0 <fsm_manual+0x2d8>)
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
			check_button2_yellow = 0;
 8001516:	4b73      	ldr	r3, [pc, #460]	; (80016e4 <fsm_manual+0x2dc>)
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
			check_button2_green = 0;
 800151c:	4b72      	ldr	r3, [pc, #456]	; (80016e8 <fsm_manual+0x2e0>)
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]

			check_button3_red = 0;
 8001522:	4b72      	ldr	r3, [pc, #456]	; (80016ec <fsm_manual+0x2e4>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
			check_button3_yellow = 0;
 8001528:	4b71      	ldr	r3, [pc, #452]	; (80016f0 <fsm_manual+0x2e8>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
			check_button3_green = 0;
 800152e:	4b71      	ldr	r3, [pc, #452]	; (80016f4 <fsm_manual+0x2ec>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]

			status_horizontal = MANUAL_RED;
 8001534:	4b64      	ldr	r3, [pc, #400]	; (80016c8 <fsm_manual+0x2c0>)
 8001536:	2205      	movs	r2, #5
 8001538:	601a      	str	r2, [r3, #0]
			status_vertical = MANUAL_RED;
 800153a:	4b6f      	ldr	r3, [pc, #444]	; (80016f8 <fsm_manual+0x2f0>)
 800153c:	2205      	movs	r2, #5
 800153e:	601a      	str	r2, [r3, #0]
		}
		break;
 8001540:	f000 bc59 	b.w	8001df6 <fsm_manual+0x9ee>
	}
	case AUTO_GREEN:
	{
		if(isButton1Pressed() == 1)
 8001544:	f7ff fba6 	bl	8000c94 <isButton1Pressed>
 8001548:	4603      	mov	r3, r0
 800154a:	2b01      	cmp	r3, #1
 800154c:	f040 8455 	bne.w	8001dfa <fsm_manual+0x9f2>
		{
			for(int i = 0; i < 3; i++)
 8001550:	2300      	movs	r3, #0
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	e00a      	b.n	800156c <fsm_manual+0x164>
			{
				red_yellow_green_manual_time[i] = red_yellow_green_auto_time_horizontal[i];
 8001556:	4a5d      	ldr	r2, [pc, #372]	; (80016cc <fsm_manual+0x2c4>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800155e:	495c      	ldr	r1, [pc, #368]	; (80016d0 <fsm_manual+0x2c8>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int i = 0; i < 3; i++)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3301      	adds	r3, #1
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b02      	cmp	r3, #2
 8001570:	ddf1      	ble.n	8001556 <fsm_manual+0x14e>
			}

			setTimerBlinking(500);
 8001572:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001576:	f000 fe51 	bl	800221c <setTimerBlinking>
			setTimerAuto(10000);
 800157a:	f242 7010 	movw	r0, #10000	; 0x2710
 800157e:	f000 fe33 	bl	80021e8 <setTimerAuto>

			check_sync_red = 0;
 8001582:	4b54      	ldr	r3, [pc, #336]	; (80016d4 <fsm_manual+0x2cc>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
			check_sync_yellow = 0;
 8001588:	4b53      	ldr	r3, [pc, #332]	; (80016d8 <fsm_manual+0x2d0>)
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
			check_sync_green = 0;
 800158e:	4b53      	ldr	r3, [pc, #332]	; (80016dc <fsm_manual+0x2d4>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]

			check_button2_red = 0;
 8001594:	4b52      	ldr	r3, [pc, #328]	; (80016e0 <fsm_manual+0x2d8>)
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
			check_button2_yellow = 0;
 800159a:	4b52      	ldr	r3, [pc, #328]	; (80016e4 <fsm_manual+0x2dc>)
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
			check_button2_green = 0;
 80015a0:	4b51      	ldr	r3, [pc, #324]	; (80016e8 <fsm_manual+0x2e0>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]

			check_button3_red = 0;
 80015a6:	4b51      	ldr	r3, [pc, #324]	; (80016ec <fsm_manual+0x2e4>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
			check_button3_yellow = 0;
 80015ac:	4b50      	ldr	r3, [pc, #320]	; (80016f0 <fsm_manual+0x2e8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
			check_button3_green = 0;
 80015b2:	4b50      	ldr	r3, [pc, #320]	; (80016f4 <fsm_manual+0x2ec>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]

			status_horizontal = MANUAL_RED;
 80015b8:	4b43      	ldr	r3, [pc, #268]	; (80016c8 <fsm_manual+0x2c0>)
 80015ba:	2205      	movs	r2, #5
 80015bc:	601a      	str	r2, [r3, #0]
			status_vertical = MANUAL_RED;
 80015be:	4b4e      	ldr	r3, [pc, #312]	; (80016f8 <fsm_manual+0x2f0>)
 80015c0:	2205      	movs	r2, #5
 80015c2:	601a      	str	r2, [r3, #0]
		}
		break;
 80015c4:	f000 bc19 	b.w	8001dfa <fsm_manual+0x9f2>
	}
	case MANUAL_RED:
	{

		if(check_sync_red == 0)
 80015c8:	4b42      	ldr	r3, [pc, #264]	; (80016d4 <fsm_manual+0x2cc>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d10d      	bne.n	80015ec <fsm_manual+0x1e4>
		{
			check_sync_red = 1;
 80015d0:	4b40      	ldr	r3, [pc, #256]	; (80016d4 <fsm_manual+0x2cc>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(yellow1_GPIO_Port, red1_Pin, GPIO_PIN_SET);
 80015d6:	2201      	movs	r2, #1
 80015d8:	2104      	movs	r1, #4
 80015da:	4848      	ldr	r0, [pc, #288]	; (80016fc <fsm_manual+0x2f4>)
 80015dc:	f001 fa7f 	bl	8002ade <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 80015e0:	2201      	movs	r2, #1
 80015e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015e6:	4846      	ldr	r0, [pc, #280]	; (8001700 <fsm_manual+0x2f8>)
 80015e8:	f001 fa79 	bl	8002ade <HAL_GPIO_WritePin>
		}

		if(timerBlinking_flag == 1)
 80015ec:	4b45      	ldr	r3, [pc, #276]	; (8001704 <fsm_manual+0x2fc>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d10c      	bne.n	800160e <fsm_manual+0x206>
		{
			HAL_GPIO_TogglePin(red1_GPIO_Port, red1_Pin);
 80015f4:	2104      	movs	r1, #4
 80015f6:	4841      	ldr	r0, [pc, #260]	; (80016fc <fsm_manual+0x2f4>)
 80015f8:	f001 fa89 	bl	8002b0e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(red2_GPIO_Port, red2_Pin);
 80015fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001600:	483f      	ldr	r0, [pc, #252]	; (8001700 <fsm_manual+0x2f8>)
 8001602:	f001 fa84 	bl	8002b0e <HAL_GPIO_TogglePin>

			setTimerBlinking(500);
 8001606:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800160a:	f000 fe07 	bl	800221c <setTimerBlinking>
		}

		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	2108      	movs	r1, #8
 8001612:	483a      	ldr	r0, [pc, #232]	; (80016fc <fsm_manual+0x2f4>)
 8001614:	f001 fa63 	bl	8002ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800161e:	4838      	ldr	r0, [pc, #224]	; (8001700 <fsm_manual+0x2f8>)
 8001620:	f001 fa5d 	bl	8002ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 8001624:	2200      	movs	r2, #0
 8001626:	2110      	movs	r1, #16
 8001628:	4834      	ldr	r0, [pc, #208]	; (80016fc <fsm_manual+0x2f4>)
 800162a:	f001 fa58 	bl	8002ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 800162e:	2200      	movs	r2, #0
 8001630:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001634:	4832      	ldr	r0, [pc, #200]	; (8001700 <fsm_manual+0x2f8>)
 8001636:	f001 fa52 	bl	8002ade <HAL_GPIO_WritePin>

		if(isButton1Pressed() == 1)
 800163a:	f7ff fb2b 	bl	8000c94 <isButton1Pressed>
 800163e:	4603      	mov	r3, r0
 8001640:	2b01      	cmp	r3, #1
 8001642:	d10d      	bne.n	8001660 <fsm_manual+0x258>
		{
			status_horizontal = MANUAL_YELLOW;
 8001644:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <fsm_manual+0x2c0>)
 8001646:	2206      	movs	r2, #6
 8001648:	601a      	str	r2, [r3, #0]
			status_vertical = MANUAL_YELLOW;
 800164a:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <fsm_manual+0x2f0>)
 800164c:	2206      	movs	r2, #6
 800164e:	601a      	str	r2, [r3, #0]
			setTimerAuto(10000);
 8001650:	f242 7010 	movw	r0, #10000	; 0x2710
 8001654:	f000 fdc8 	bl	80021e8 <setTimerAuto>
			setTimerBlinking(500);
 8001658:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800165c:	f000 fdde 	bl	800221c <setTimerBlinking>
		}

		if(isButton2Pressed() == 1)
 8001660:	f7ff fb2a 	bl	8000cb8 <isButton2Pressed>
 8001664:	4603      	mov	r3, r0
 8001666:	2b01      	cmp	r3, #1
 8001668:	d117      	bne.n	800169a <fsm_manual+0x292>
		{
			check_button2_red = 1;
 800166a:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <fsm_manual+0x2d8>)
 800166c:	2201      	movs	r2, #1
 800166e:	601a      	str	r2, [r3, #0]

			if(red_yellow_green_manual_time[0] <= 99 && red_yellow_green_manual_time[0] >= 1)
 8001670:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <fsm_manual+0x2c8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b63      	cmp	r3, #99	; 0x63
 8001676:	dc09      	bgt.n	800168c <fsm_manual+0x284>
 8001678:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <fsm_manual+0x2c8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	dd05      	ble.n	800168c <fsm_manual+0x284>
			{
				red_yellow_green_manual_time[0]++;
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <fsm_manual+0x2c8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	3301      	adds	r3, #1
 8001686:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <fsm_manual+0x2c8>)
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	e002      	b.n	8001692 <fsm_manual+0x28a>
			}
			else
			{
				red_yellow_green_manual_time[0] = 1;
 800168c:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <fsm_manual+0x2c8>)
 800168e:	2201      	movs	r2, #1
 8001690:	601a      	str	r2, [r3, #0]
			}
			setTimerAuto(10000);
 8001692:	f242 7010 	movw	r0, #10000	; 0x2710
 8001696:	f000 fda7 	bl	80021e8 <setTimerAuto>
		}

		if(isButton3Pressed() == 1)
 800169a:	f7ff fb1f 	bl	8000cdc <isButton3Pressed>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d138      	bne.n	8001716 <fsm_manual+0x30e>
		{
			check_button3_red = 1;
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <fsm_manual+0x2e4>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	601a      	str	r2, [r3, #0]

			if(red_yellow_green_manual_time[0] <= 99 && red_yellow_green_manual_time[0] >= 1)
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <fsm_manual+0x2c8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b63      	cmp	r3, #99	; 0x63
 80016b0:	dc2a      	bgt.n	8001708 <fsm_manual+0x300>
 80016b2:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <fsm_manual+0x2c8>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	dd26      	ble.n	8001708 <fsm_manual+0x300>
			{
				red_yellow_green_manual_time[0]--;
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <fsm_manual+0x2c8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	3b01      	subs	r3, #1
 80016c0:	4a03      	ldr	r2, [pc, #12]	; (80016d0 <fsm_manual+0x2c8>)
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	e023      	b.n	800170e <fsm_manual+0x306>
 80016c6:	bf00      	nop
 80016c8:	20000070 	.word	0x20000070
 80016cc:	20000064 	.word	0x20000064
 80016d0:	200000cc 	.word	0x200000cc
 80016d4:	200000d8 	.word	0x200000d8
 80016d8:	200000dc 	.word	0x200000dc
 80016dc:	200000e0 	.word	0x200000e0
 80016e0:	200000e4 	.word	0x200000e4
 80016e4:	200000e8 	.word	0x200000e8
 80016e8:	200000ec 	.word	0x200000ec
 80016ec:	200000f0 	.word	0x200000f0
 80016f0:	200000f4 	.word	0x200000f4
 80016f4:	200000f8 	.word	0x200000f8
 80016f8:	20000074 	.word	0x20000074
 80016fc:	40010800 	.word	0x40010800
 8001700:	40010c00 	.word	0x40010c00
 8001704:	2000012c 	.word	0x2000012c
			}
			else
			{
				red_yellow_green_manual_time[0] = 1;
 8001708:	4ba9      	ldr	r3, [pc, #676]	; (80019b0 <fsm_manual+0x5a8>)
 800170a:	2201      	movs	r2, #1
 800170c:	601a      	str	r2, [r3, #0]
			}
			setTimerAuto(10000);
 800170e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001712:	f000 fd69 	bl	80021e8 <setTimerAuto>
		}

		if(isButton4Pressed() == 1)
 8001716:	f7ff faf3 	bl	8000d00 <isButton4Pressed>
 800171a:	4603      	mov	r3, r0
 800171c:	2b01      	cmp	r3, #1
 800171e:	d124      	bne.n	800176a <fsm_manual+0x362>
		{
			horizontal_counter = 0;
 8001720:	4ba4      	ldr	r3, [pc, #656]	; (80019b4 <fsm_manual+0x5ac>)
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
			vertical_counter = 0;
 8001726:	4ba4      	ldr	r3, [pc, #656]	; (80019b8 <fsm_manual+0x5b0>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
			status_horizontal = AUTO_RED;
 800172c:	4ba3      	ldr	r3, [pc, #652]	; (80019bc <fsm_manual+0x5b4>)
 800172e:	2201      	movs	r2, #1
 8001730:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_GREEN;
 8001732:	4ba3      	ldr	r3, [pc, #652]	; (80019c0 <fsm_manual+0x5b8>)
 8001734:	2203      	movs	r2, #3
 8001736:	601a      	str	r2, [r3, #0]
			EN_horizontal = 1;
 8001738:	4ba2      	ldr	r3, [pc, #648]	; (80019c4 <fsm_manual+0x5bc>)
 800173a:	2201      	movs	r2, #1
 800173c:	601a      	str	r2, [r3, #0]
			EN_vertical = 1;
 800173e:	4ba2      	ldr	r3, [pc, #648]	; (80019c8 <fsm_manual+0x5c0>)
 8001740:	2201      	movs	r2, #1
 8001742:	601a      	str	r2, [r3, #0]
			setTimer7SEGCountHorizontal(1000);
 8001744:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001748:	f000 fd1a 	bl	8002180 <setTimer7SEGCountHorizontal>
			setTimer7SEGCountVertical(1000);
 800174c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001750:	f000 fd30 	bl	80021b4 <setTimer7SEGCountVertical>
			setTimerENhorizontal(500);
 8001754:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001758:	f000 fcde 	bl	8002118 <setTimerENhorizontal>
			setTimerENvertical(500);
 800175c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001760:	f000 fcf4 	bl	800214c <setTimerENvertical>
			timerAuto_flag = 0;
 8001764:	4b99      	ldr	r3, [pc, #612]	; (80019cc <fsm_manual+0x5c4>)
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
		}

		if(timerAuto_flag == 1)
 800176a:	4b98      	ldr	r3, [pc, #608]	; (80019cc <fsm_manual+0x5c4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b01      	cmp	r3, #1
 8001770:	f040 8345 	bne.w	8001dfe <fsm_manual+0x9f6>
		{
			horizontal_counter = 0;
 8001774:	4b8f      	ldr	r3, [pc, #572]	; (80019b4 <fsm_manual+0x5ac>)
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
			vertical_counter = 0;
 800177a:	4b8f      	ldr	r3, [pc, #572]	; (80019b8 <fsm_manual+0x5b0>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
			EN_horizontal = 1;
 8001780:	4b90      	ldr	r3, [pc, #576]	; (80019c4 <fsm_manual+0x5bc>)
 8001782:	2201      	movs	r2, #1
 8001784:	601a      	str	r2, [r3, #0]
			EN_vertical = 1;
 8001786:	4b90      	ldr	r3, [pc, #576]	; (80019c8 <fsm_manual+0x5c0>)
 8001788:	2201      	movs	r2, #1
 800178a:	601a      	str	r2, [r3, #0]
			setTimer7SEGCountHorizontal(1000);
 800178c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001790:	f000 fcf6 	bl	8002180 <setTimer7SEGCountHorizontal>
			setTimer7SEGCountVertical(1000);
 8001794:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001798:	f000 fd0c 	bl	80021b4 <setTimer7SEGCountVertical>
			status_horizontal = AUTO_RED;
 800179c:	4b87      	ldr	r3, [pc, #540]	; (80019bc <fsm_manual+0x5b4>)
 800179e:	2201      	movs	r2, #1
 80017a0:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_GREEN;
 80017a2:	4b87      	ldr	r3, [pc, #540]	; (80019c0 <fsm_manual+0x5b8>)
 80017a4:	2203      	movs	r2, #3
 80017a6:	601a      	str	r2, [r3, #0]
		}

		break;
 80017a8:	e329      	b.n	8001dfe <fsm_manual+0x9f6>
	}
	case MANUAL_YELLOW:
	{

		if(check_sync_yellow == 0)
 80017aa:	4b89      	ldr	r3, [pc, #548]	; (80019d0 <fsm_manual+0x5c8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10d      	bne.n	80017ce <fsm_manual+0x3c6>
		{
			check_sync_yellow = 1;
 80017b2:	4b87      	ldr	r3, [pc, #540]	; (80019d0 <fsm_manual+0x5c8>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_SET);
 80017b8:	2201      	movs	r2, #1
 80017ba:	2108      	movs	r1, #8
 80017bc:	4885      	ldr	r0, [pc, #532]	; (80019d4 <fsm_manual+0x5cc>)
 80017be:	f001 f98e 	bl	8002ade <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);
 80017c2:	2201      	movs	r2, #1
 80017c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017c8:	4883      	ldr	r0, [pc, #524]	; (80019d8 <fsm_manual+0x5d0>)
 80017ca:	f001 f988 	bl	8002ade <HAL_GPIO_WritePin>
		}

		if(timerBlinking_flag == 1)
 80017ce:	4b83      	ldr	r3, [pc, #524]	; (80019dc <fsm_manual+0x5d4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d10c      	bne.n	80017f0 <fsm_manual+0x3e8>
		{
			HAL_GPIO_TogglePin(yellow1_GPIO_Port, yellow1_Pin);
 80017d6:	2108      	movs	r1, #8
 80017d8:	487e      	ldr	r0, [pc, #504]	; (80019d4 <fsm_manual+0x5cc>)
 80017da:	f001 f998 	bl	8002b0e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(yellow2_GPIO_Port, yellow2_Pin);
 80017de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017e2:	487d      	ldr	r0, [pc, #500]	; (80019d8 <fsm_manual+0x5d0>)
 80017e4:	f001 f993 	bl	8002b0e <HAL_GPIO_TogglePin>

			setTimerBlinking(500);
 80017e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017ec:	f000 fd16 	bl	800221c <setTimerBlinking>
		}

		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2104      	movs	r1, #4
 80017f4:	4877      	ldr	r0, [pc, #476]	; (80019d4 <fsm_manual+0x5cc>)
 80017f6:	f001 f972 	bl	8002ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001800:	4875      	ldr	r0, [pc, #468]	; (80019d8 <fsm_manual+0x5d0>)
 8001802:	f001 f96c 	bl	8002ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 8001806:	2200      	movs	r2, #0
 8001808:	2110      	movs	r1, #16
 800180a:	4872      	ldr	r0, [pc, #456]	; (80019d4 <fsm_manual+0x5cc>)
 800180c:	f001 f967 	bl	8002ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 8001810:	2200      	movs	r2, #0
 8001812:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001816:	4870      	ldr	r0, [pc, #448]	; (80019d8 <fsm_manual+0x5d0>)
 8001818:	f001 f961 	bl	8002ade <HAL_GPIO_WritePin>

		if(isButton1Pressed() == 1)
 800181c:	f7ff fa3a 	bl	8000c94 <isButton1Pressed>
 8001820:	4603      	mov	r3, r0
 8001822:	2b01      	cmp	r3, #1
 8001824:	d10d      	bne.n	8001842 <fsm_manual+0x43a>
		{
			status_horizontal = MANUAL_GREEN;
 8001826:	4b65      	ldr	r3, [pc, #404]	; (80019bc <fsm_manual+0x5b4>)
 8001828:	2207      	movs	r2, #7
 800182a:	601a      	str	r2, [r3, #0]
			status_vertical = MANUAL_GREEN;
 800182c:	4b64      	ldr	r3, [pc, #400]	; (80019c0 <fsm_manual+0x5b8>)
 800182e:	2207      	movs	r2, #7
 8001830:	601a      	str	r2, [r3, #0]
			setTimerAuto(10000);
 8001832:	f242 7010 	movw	r0, #10000	; 0x2710
 8001836:	f000 fcd7 	bl	80021e8 <setTimerAuto>
			setTimerBlinking(500);
 800183a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800183e:	f000 fced 	bl	800221c <setTimerBlinking>
		}

		if(isButton2Pressed() == 1)
 8001842:	f7ff fa39 	bl	8000cb8 <isButton2Pressed>
 8001846:	4603      	mov	r3, r0
 8001848:	2b01      	cmp	r3, #1
 800184a:	d117      	bne.n	800187c <fsm_manual+0x474>
		{
			check_button2_yellow = 1;
 800184c:	4b64      	ldr	r3, [pc, #400]	; (80019e0 <fsm_manual+0x5d8>)
 800184e:	2201      	movs	r2, #1
 8001850:	601a      	str	r2, [r3, #0]

			if(red_yellow_green_manual_time[1] <= 99 && red_yellow_green_manual_time[1] >= 1)
 8001852:	4b57      	ldr	r3, [pc, #348]	; (80019b0 <fsm_manual+0x5a8>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b63      	cmp	r3, #99	; 0x63
 8001858:	dc09      	bgt.n	800186e <fsm_manual+0x466>
 800185a:	4b55      	ldr	r3, [pc, #340]	; (80019b0 <fsm_manual+0x5a8>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	dd05      	ble.n	800186e <fsm_manual+0x466>
			{
				red_yellow_green_manual_time[1]++;
 8001862:	4b53      	ldr	r3, [pc, #332]	; (80019b0 <fsm_manual+0x5a8>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	3301      	adds	r3, #1
 8001868:	4a51      	ldr	r2, [pc, #324]	; (80019b0 <fsm_manual+0x5a8>)
 800186a:	6053      	str	r3, [r2, #4]
 800186c:	e002      	b.n	8001874 <fsm_manual+0x46c>
			}
			else
			{
				red_yellow_green_manual_time[1] = 1;
 800186e:	4b50      	ldr	r3, [pc, #320]	; (80019b0 <fsm_manual+0x5a8>)
 8001870:	2201      	movs	r2, #1
 8001872:	605a      	str	r2, [r3, #4]
			}
			setTimerAuto(10000);
 8001874:	f242 7010 	movw	r0, #10000	; 0x2710
 8001878:	f000 fcb6 	bl	80021e8 <setTimerAuto>
		}

		if(isButton3Pressed() == 1)
 800187c:	f7ff fa2e 	bl	8000cdc <isButton3Pressed>
 8001880:	4603      	mov	r3, r0
 8001882:	2b01      	cmp	r3, #1
 8001884:	d117      	bne.n	80018b6 <fsm_manual+0x4ae>
		{
			check_button3_yellow = 1;
 8001886:	4b57      	ldr	r3, [pc, #348]	; (80019e4 <fsm_manual+0x5dc>)
 8001888:	2201      	movs	r2, #1
 800188a:	601a      	str	r2, [r3, #0]

			if(red_yellow_green_manual_time[1] <= 99 && red_yellow_green_manual_time[1] >= 1)
 800188c:	4b48      	ldr	r3, [pc, #288]	; (80019b0 <fsm_manual+0x5a8>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b63      	cmp	r3, #99	; 0x63
 8001892:	dc09      	bgt.n	80018a8 <fsm_manual+0x4a0>
 8001894:	4b46      	ldr	r3, [pc, #280]	; (80019b0 <fsm_manual+0x5a8>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	dd05      	ble.n	80018a8 <fsm_manual+0x4a0>
			{
				red_yellow_green_manual_time[1]--;
 800189c:	4b44      	ldr	r3, [pc, #272]	; (80019b0 <fsm_manual+0x5a8>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	3b01      	subs	r3, #1
 80018a2:	4a43      	ldr	r2, [pc, #268]	; (80019b0 <fsm_manual+0x5a8>)
 80018a4:	6053      	str	r3, [r2, #4]
 80018a6:	e002      	b.n	80018ae <fsm_manual+0x4a6>
			}
			else
			{
				red_yellow_green_manual_time[1] = 1;
 80018a8:	4b41      	ldr	r3, [pc, #260]	; (80019b0 <fsm_manual+0x5a8>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	605a      	str	r2, [r3, #4]
			}
			setTimerAuto(10000);
 80018ae:	f242 7010 	movw	r0, #10000	; 0x2710
 80018b2:	f000 fc99 	bl	80021e8 <setTimerAuto>
		}

		if(isButton4Pressed() == 1)
 80018b6:	f7ff fa23 	bl	8000d00 <isButton4Pressed>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d157      	bne.n	8001970 <fsm_manual+0x568>
		{
			if((check_button2_red == 1 || check_button3_red == 1) && (check_button2_yellow == 1 || check_button3_yellow == 1))
 80018c0:	4b49      	ldr	r3, [pc, #292]	; (80019e8 <fsm_manual+0x5e0>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d003      	beq.n	80018d0 <fsm_manual+0x4c8>
 80018c8:	4b48      	ldr	r3, [pc, #288]	; (80019ec <fsm_manual+0x5e4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d132      	bne.n	8001936 <fsm_manual+0x52e>
 80018d0:	4b43      	ldr	r3, [pc, #268]	; (80019e0 <fsm_manual+0x5d8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d003      	beq.n	80018e0 <fsm_manual+0x4d8>
 80018d8:	4b42      	ldr	r3, [pc, #264]	; (80019e4 <fsm_manual+0x5dc>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d12a      	bne.n	8001936 <fsm_manual+0x52e>
			{
				red_yellow_green_manual_time[2] = red_yellow_green_manual_time[0] - red_yellow_green_manual_time[1];
 80018e0:	4b33      	ldr	r3, [pc, #204]	; (80019b0 <fsm_manual+0x5a8>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b32      	ldr	r3, [pc, #200]	; (80019b0 <fsm_manual+0x5a8>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	4a31      	ldr	r2, [pc, #196]	; (80019b0 <fsm_manual+0x5a8>)
 80018ec:	6093      	str	r3, [r2, #8]

				if(red_yellow_green_manual_time[1] <= red_yellow_green_manual_time[2]
 80018ee:	4b30      	ldr	r3, [pc, #192]	; (80019b0 <fsm_manual+0x5a8>)
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	4b2f      	ldr	r3, [pc, #188]	; (80019b0 <fsm_manual+0x5a8>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	dc1d      	bgt.n	8001936 <fsm_manual+0x52e>
				&& red_yellow_green_manual_time[1] <= red_yellow_green_manual_time[0])
 80018fa:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <fsm_manual+0x5a8>)
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <fsm_manual+0x5a8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	dc17      	bgt.n	8001936 <fsm_manual+0x52e>
				{
					red_yellow_green_auto_time_horizontal[0] = red_yellow_green_manual_time[0];
 8001906:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <fsm_manual+0x5a8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a39      	ldr	r2, [pc, #228]	; (80019f0 <fsm_manual+0x5e8>)
 800190c:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_vertical[0] = red_yellow_green_manual_time[0];
 800190e:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <fsm_manual+0x5a8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a38      	ldr	r2, [pc, #224]	; (80019f4 <fsm_manual+0x5ec>)
 8001914:	6013      	str	r3, [r2, #0]

					red_yellow_green_auto_time_horizontal[1] = red_yellow_green_manual_time[1];
 8001916:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <fsm_manual+0x5a8>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	4a35      	ldr	r2, [pc, #212]	; (80019f0 <fsm_manual+0x5e8>)
 800191c:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_vertical[1] = red_yellow_green_manual_time[1];
 800191e:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <fsm_manual+0x5a8>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	4a34      	ldr	r2, [pc, #208]	; (80019f4 <fsm_manual+0x5ec>)
 8001924:	6053      	str	r3, [r2, #4]

					red_yellow_green_auto_time_horizontal[2] = red_yellow_green_manual_time[2];
 8001926:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <fsm_manual+0x5a8>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	4a31      	ldr	r2, [pc, #196]	; (80019f0 <fsm_manual+0x5e8>)
 800192c:	6093      	str	r3, [r2, #8]
					red_yellow_green_auto_time_vertical[2] = red_yellow_green_manual_time[2];
 800192e:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <fsm_manual+0x5a8>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	4a30      	ldr	r2, [pc, #192]	; (80019f4 <fsm_manual+0x5ec>)
 8001934:	6093      	str	r3, [r2, #8]
				}

			}

			horizontal_counter = 0;
 8001936:	4b1f      	ldr	r3, [pc, #124]	; (80019b4 <fsm_manual+0x5ac>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
			vertical_counter = 0;
 800193c:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <fsm_manual+0x5b0>)
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
			status_horizontal = AUTO_RED;
 8001942:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <fsm_manual+0x5b4>)
 8001944:	2201      	movs	r2, #1
 8001946:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_GREEN;
 8001948:	4b1d      	ldr	r3, [pc, #116]	; (80019c0 <fsm_manual+0x5b8>)
 800194a:	2203      	movs	r2, #3
 800194c:	601a      	str	r2, [r3, #0]
			EN_horizontal = 1;
 800194e:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <fsm_manual+0x5bc>)
 8001950:	2201      	movs	r2, #1
 8001952:	601a      	str	r2, [r3, #0]
			EN_vertical = 1;
 8001954:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <fsm_manual+0x5c0>)
 8001956:	2201      	movs	r2, #1
 8001958:	601a      	str	r2, [r3, #0]
			setTimer7SEGCountHorizontal(1000);
 800195a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800195e:	f000 fc0f 	bl	8002180 <setTimer7SEGCountHorizontal>
			setTimer7SEGCountVertical(1000);
 8001962:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001966:	f000 fc25 	bl	80021b4 <setTimer7SEGCountVertical>
			timerAuto_flag = 0;
 800196a:	4b18      	ldr	r3, [pc, #96]	; (80019cc <fsm_manual+0x5c4>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
		}

		if(timerAuto_flag == 1)
 8001970:	4b16      	ldr	r3, [pc, #88]	; (80019cc <fsm_manual+0x5c4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b01      	cmp	r3, #1
 8001976:	f040 8244 	bne.w	8001e02 <fsm_manual+0x9fa>
		{
			horizontal_counter = 0;
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <fsm_manual+0x5ac>)
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
			vertical_counter = 0;
 8001980:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <fsm_manual+0x5b0>)
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
			EN_horizontal = 1;
 8001986:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <fsm_manual+0x5bc>)
 8001988:	2201      	movs	r2, #1
 800198a:	601a      	str	r2, [r3, #0]
			EN_vertical = 1;
 800198c:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <fsm_manual+0x5c0>)
 800198e:	2201      	movs	r2, #1
 8001990:	601a      	str	r2, [r3, #0]
			setTimer7SEGCountHorizontal(1000);
 8001992:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001996:	f000 fbf3 	bl	8002180 <setTimer7SEGCountHorizontal>
			setTimer7SEGCountVertical(1000);
 800199a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800199e:	f000 fc09 	bl	80021b4 <setTimer7SEGCountVertical>
			status_horizontal = AUTO_RED;
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <fsm_manual+0x5b4>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_GREEN;
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <fsm_manual+0x5b8>)
 80019aa:	2203      	movs	r2, #3
 80019ac:	601a      	str	r2, [r3, #0]
		}

		break;
 80019ae:	e228      	b.n	8001e02 <fsm_manual+0x9fa>
 80019b0:	200000cc 	.word	0x200000cc
 80019b4:	200000c4 	.word	0x200000c4
 80019b8:	200000c8 	.word	0x200000c8
 80019bc:	20000070 	.word	0x20000070
 80019c0:	20000074 	.word	0x20000074
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000004 	.word	0x20000004
 80019cc:	20000124 	.word	0x20000124
 80019d0:	200000dc 	.word	0x200000dc
 80019d4:	40010800 	.word	0x40010800
 80019d8:	40010c00 	.word	0x40010c00
 80019dc:	2000012c 	.word	0x2000012c
 80019e0:	200000e8 	.word	0x200000e8
 80019e4:	200000f4 	.word	0x200000f4
 80019e8:	200000e4 	.word	0x200000e4
 80019ec:	200000f0 	.word	0x200000f0
 80019f0:	20000064 	.word	0x20000064
 80019f4:	20000058 	.word	0x20000058
	}
	case MANUAL_GREEN:
	{

		if(check_sync_green == 0)
 80019f8:	4b89      	ldr	r3, [pc, #548]	; (8001c20 <fsm_manual+0x818>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10d      	bne.n	8001a1c <fsm_manual+0x614>
		{
			check_sync_green = 1;
 8001a00:	4b87      	ldr	r3, [pc, #540]	; (8001c20 <fsm_manual+0x818>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_SET);
 8001a06:	2201      	movs	r2, #1
 8001a08:	2110      	movs	r1, #16
 8001a0a:	4886      	ldr	r0, [pc, #536]	; (8001c24 <fsm_manual+0x81c>)
 8001a0c:	f001 f867 	bl	8002ade <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 8001a10:	2201      	movs	r2, #1
 8001a12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a16:	4884      	ldr	r0, [pc, #528]	; (8001c28 <fsm_manual+0x820>)
 8001a18:	f001 f861 	bl	8002ade <HAL_GPIO_WritePin>
		}

		if(timerBlinking_flag == 1)
 8001a1c:	4b83      	ldr	r3, [pc, #524]	; (8001c2c <fsm_manual+0x824>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d10c      	bne.n	8001a3e <fsm_manual+0x636>
		{
			HAL_GPIO_TogglePin(green1_GPIO_Port, green1_Pin);
 8001a24:	2110      	movs	r1, #16
 8001a26:	487f      	ldr	r0, [pc, #508]	; (8001c24 <fsm_manual+0x81c>)
 8001a28:	f001 f871 	bl	8002b0e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(green2_GPIO_Port, green2_Pin);
 8001a2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a30:	487d      	ldr	r0, [pc, #500]	; (8001c28 <fsm_manual+0x820>)
 8001a32:	f001 f86c 	bl	8002b0e <HAL_GPIO_TogglePin>

			setTimerBlinking(500);
 8001a36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a3a:	f000 fbef 	bl	800221c <setTimerBlinking>
		}

		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2104      	movs	r1, #4
 8001a42:	4878      	ldr	r0, [pc, #480]	; (8001c24 <fsm_manual+0x81c>)
 8001a44:	f001 f84b 	bl	8002ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a4e:	4876      	ldr	r0, [pc, #472]	; (8001c28 <fsm_manual+0x820>)
 8001a50:	f001 f845 	bl	8002ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 8001a54:	2200      	movs	r2, #0
 8001a56:	2108      	movs	r1, #8
 8001a58:	4872      	ldr	r0, [pc, #456]	; (8001c24 <fsm_manual+0x81c>)
 8001a5a:	f001 f840 	bl	8002ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a64:	4870      	ldr	r0, [pc, #448]	; (8001c28 <fsm_manual+0x820>)
 8001a66:	f001 f83a 	bl	8002ade <HAL_GPIO_WritePin>

		if(isButton1Pressed() == 1)
 8001a6a:	f7ff f913 	bl	8000c94 <isButton1Pressed>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d119      	bne.n	8001aa8 <fsm_manual+0x6a0>
		{
			status_horizontal = AUTO_RED;
 8001a74:	4b6e      	ldr	r3, [pc, #440]	; (8001c30 <fsm_manual+0x828>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_GREEN;
 8001a7a:	4b6e      	ldr	r3, [pc, #440]	; (8001c34 <fsm_manual+0x82c>)
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	601a      	str	r2, [r3, #0]
			horizontal_counter = 0;
 8001a80:	4b6d      	ldr	r3, [pc, #436]	; (8001c38 <fsm_manual+0x830>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
			vertical_counter = 0;
 8001a86:	4b6d      	ldr	r3, [pc, #436]	; (8001c3c <fsm_manual+0x834>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
			EN_horizontal = 1;
 8001a8c:	4b6c      	ldr	r3, [pc, #432]	; (8001c40 <fsm_manual+0x838>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	601a      	str	r2, [r3, #0]
			EN_vertical = 1;
 8001a92:	4b6c      	ldr	r3, [pc, #432]	; (8001c44 <fsm_manual+0x83c>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	601a      	str	r2, [r3, #0]
			setTimer7SEGCountHorizontal(1000);
 8001a98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a9c:	f000 fb70 	bl	8002180 <setTimer7SEGCountHorizontal>
			setTimer7SEGCountVertical(1000);
 8001aa0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aa4:	f000 fb86 	bl	80021b4 <setTimer7SEGCountVertical>
		}

		if(isButton2Pressed() == 1)
 8001aa8:	f7ff f906 	bl	8000cb8 <isButton2Pressed>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d117      	bne.n	8001ae2 <fsm_manual+0x6da>
		{
			check_button2_green = 1;
 8001ab2:	4b65      	ldr	r3, [pc, #404]	; (8001c48 <fsm_manual+0x840>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]

			if(red_yellow_green_manual_time[2] <= 99 && red_yellow_green_manual_time[2] >= 1)
 8001ab8:	4b64      	ldr	r3, [pc, #400]	; (8001c4c <fsm_manual+0x844>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b63      	cmp	r3, #99	; 0x63
 8001abe:	dc09      	bgt.n	8001ad4 <fsm_manual+0x6cc>
 8001ac0:	4b62      	ldr	r3, [pc, #392]	; (8001c4c <fsm_manual+0x844>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	dd05      	ble.n	8001ad4 <fsm_manual+0x6cc>
			{
				red_yellow_green_manual_time[2]++;
 8001ac8:	4b60      	ldr	r3, [pc, #384]	; (8001c4c <fsm_manual+0x844>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	3301      	adds	r3, #1
 8001ace:	4a5f      	ldr	r2, [pc, #380]	; (8001c4c <fsm_manual+0x844>)
 8001ad0:	6093      	str	r3, [r2, #8]
 8001ad2:	e002      	b.n	8001ada <fsm_manual+0x6d2>
			}
			else
			{
				red_yellow_green_manual_time[2] = 1;
 8001ad4:	4b5d      	ldr	r3, [pc, #372]	; (8001c4c <fsm_manual+0x844>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	609a      	str	r2, [r3, #8]
			}
			setTimerAuto(10000);
 8001ada:	f242 7010 	movw	r0, #10000	; 0x2710
 8001ade:	f000 fb83 	bl	80021e8 <setTimerAuto>
		}

		if(isButton3Pressed() == 1)
 8001ae2:	f7ff f8fb 	bl	8000cdc <isButton3Pressed>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d117      	bne.n	8001b1c <fsm_manual+0x714>
		{
			check_button3_green = 1;
 8001aec:	4b58      	ldr	r3, [pc, #352]	; (8001c50 <fsm_manual+0x848>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	601a      	str	r2, [r3, #0]

			if(red_yellow_green_manual_time[2] <= 99 && red_yellow_green_manual_time[2] >= 1)
 8001af2:	4b56      	ldr	r3, [pc, #344]	; (8001c4c <fsm_manual+0x844>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b63      	cmp	r3, #99	; 0x63
 8001af8:	dc09      	bgt.n	8001b0e <fsm_manual+0x706>
 8001afa:	4b54      	ldr	r3, [pc, #336]	; (8001c4c <fsm_manual+0x844>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	dd05      	ble.n	8001b0e <fsm_manual+0x706>
			{
				red_yellow_green_manual_time[2]--;
 8001b02:	4b52      	ldr	r3, [pc, #328]	; (8001c4c <fsm_manual+0x844>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	4a50      	ldr	r2, [pc, #320]	; (8001c4c <fsm_manual+0x844>)
 8001b0a:	6093      	str	r3, [r2, #8]
 8001b0c:	e002      	b.n	8001b14 <fsm_manual+0x70c>
			}
			else
			{
				red_yellow_green_manual_time[2] = 1;
 8001b0e:	4b4f      	ldr	r3, [pc, #316]	; (8001c4c <fsm_manual+0x844>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	609a      	str	r2, [r3, #8]
			}
			setTimerAuto(10000);
 8001b14:	f242 7010 	movw	r0, #10000	; 0x2710
 8001b18:	f000 fb66 	bl	80021e8 <setTimerAuto>
		}

		if(isButton4Pressed() == 1)
 8001b1c:	f7ff f8f0 	bl	8000d00 <isButton4Pressed>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	f040 8146 	bne.w	8001db4 <fsm_manual+0x9ac>
		{
			if((check_button2_red == 1 || check_button3_red == 1) && (check_button2_yellow == 1 || check_button3_yellow == 1))
 8001b28:	4b4a      	ldr	r3, [pc, #296]	; (8001c54 <fsm_manual+0x84c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d003      	beq.n	8001b38 <fsm_manual+0x730>
 8001b30:	4b49      	ldr	r3, [pc, #292]	; (8001c58 <fsm_manual+0x850>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d135      	bne.n	8001ba4 <fsm_manual+0x79c>
 8001b38:	4b48      	ldr	r3, [pc, #288]	; (8001c5c <fsm_manual+0x854>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d003      	beq.n	8001b48 <fsm_manual+0x740>
 8001b40:	4b47      	ldr	r3, [pc, #284]	; (8001c60 <fsm_manual+0x858>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d12d      	bne.n	8001ba4 <fsm_manual+0x79c>
			{
				red_yellow_green_manual_time[2] = red_yellow_green_manual_time[0] - red_yellow_green_manual_time[1];
 8001b48:	4b40      	ldr	r3, [pc, #256]	; (8001c4c <fsm_manual+0x844>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b3f      	ldr	r3, [pc, #252]	; (8001c4c <fsm_manual+0x844>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	4a3e      	ldr	r2, [pc, #248]	; (8001c4c <fsm_manual+0x844>)
 8001b54:	6093      	str	r3, [r2, #8]

				if(red_yellow_green_manual_time[1] <= red_yellow_green_manual_time[2]
 8001b56:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <fsm_manual+0x844>)
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	4b3c      	ldr	r3, [pc, #240]	; (8001c4c <fsm_manual+0x844>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	f300 8106 	bgt.w	8001d70 <fsm_manual+0x968>
				&& red_yellow_green_manual_time[1] <= red_yellow_green_manual_time[0])
 8001b64:	4b39      	ldr	r3, [pc, #228]	; (8001c4c <fsm_manual+0x844>)
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <fsm_manual+0x844>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	f300 80ff 	bgt.w	8001d70 <fsm_manual+0x968>
				{
					red_yellow_green_auto_time_horizontal[0] = red_yellow_green_manual_time[0];
 8001b72:	4b36      	ldr	r3, [pc, #216]	; (8001c4c <fsm_manual+0x844>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a3b      	ldr	r2, [pc, #236]	; (8001c64 <fsm_manual+0x85c>)
 8001b78:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_vertical[0] = red_yellow_green_manual_time[0];
 8001b7a:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <fsm_manual+0x844>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a3a      	ldr	r2, [pc, #232]	; (8001c68 <fsm_manual+0x860>)
 8001b80:	6013      	str	r3, [r2, #0]

					red_yellow_green_auto_time_horizontal[1] = red_yellow_green_manual_time[1];
 8001b82:	4b32      	ldr	r3, [pc, #200]	; (8001c4c <fsm_manual+0x844>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	4a37      	ldr	r2, [pc, #220]	; (8001c64 <fsm_manual+0x85c>)
 8001b88:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_vertical[1] = red_yellow_green_manual_time[1];
 8001b8a:	4b30      	ldr	r3, [pc, #192]	; (8001c4c <fsm_manual+0x844>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4a36      	ldr	r2, [pc, #216]	; (8001c68 <fsm_manual+0x860>)
 8001b90:	6053      	str	r3, [r2, #4]

					red_yellow_green_auto_time_horizontal[2] = red_yellow_green_manual_time[2];
 8001b92:	4b2e      	ldr	r3, [pc, #184]	; (8001c4c <fsm_manual+0x844>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	4a33      	ldr	r2, [pc, #204]	; (8001c64 <fsm_manual+0x85c>)
 8001b98:	6093      	str	r3, [r2, #8]
					red_yellow_green_auto_time_vertical[2] = red_yellow_green_manual_time[2];
 8001b9a:	4b2c      	ldr	r3, [pc, #176]	; (8001c4c <fsm_manual+0x844>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	4a32      	ldr	r2, [pc, #200]	; (8001c68 <fsm_manual+0x860>)
 8001ba0:	6093      	str	r3, [r2, #8]
				if(red_yellow_green_manual_time[1] <= red_yellow_green_manual_time[2]
 8001ba2:	e0e5      	b.n	8001d70 <fsm_manual+0x968>
				}

			}
			else if((check_button2_red == 1 || check_button3_red == 1) && (check_button2_green == 1 || check_button3_green == 1))
 8001ba4:	4b2b      	ldr	r3, [pc, #172]	; (8001c54 <fsm_manual+0x84c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d003      	beq.n	8001bb4 <fsm_manual+0x7ac>
 8001bac:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <fsm_manual+0x850>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d15b      	bne.n	8001c6c <fsm_manual+0x864>
 8001bb4:	4b24      	ldr	r3, [pc, #144]	; (8001c48 <fsm_manual+0x840>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d003      	beq.n	8001bc4 <fsm_manual+0x7bc>
 8001bbc:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <fsm_manual+0x848>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d153      	bne.n	8001c6c <fsm_manual+0x864>
			{
				red_yellow_green_manual_time[1] = red_yellow_green_manual_time[0] - red_yellow_green_manual_time[2];
 8001bc4:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <fsm_manual+0x844>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <fsm_manual+0x844>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	4a1f      	ldr	r2, [pc, #124]	; (8001c4c <fsm_manual+0x844>)
 8001bd0:	6053      	str	r3, [r2, #4]

				if(red_yellow_green_manual_time[1] <= red_yellow_green_manual_time[2]
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <fsm_manual+0x844>)
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <fsm_manual+0x844>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	f300 80ca 	bgt.w	8001d74 <fsm_manual+0x96c>
				&& red_yellow_green_manual_time[1] <= red_yellow_green_manual_time[0])
 8001be0:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <fsm_manual+0x844>)
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <fsm_manual+0x844>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	f300 80c3 	bgt.w	8001d74 <fsm_manual+0x96c>
				{
					red_yellow_green_auto_time_horizontal[0] = red_yellow_green_manual_time[0];
 8001bee:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <fsm_manual+0x844>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a1c      	ldr	r2, [pc, #112]	; (8001c64 <fsm_manual+0x85c>)
 8001bf4:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_vertical[0] = red_yellow_green_manual_time[0];
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <fsm_manual+0x844>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a1b      	ldr	r2, [pc, #108]	; (8001c68 <fsm_manual+0x860>)
 8001bfc:	6013      	str	r3, [r2, #0]

					red_yellow_green_auto_time_horizontal[1] = red_yellow_green_manual_time[1];
 8001bfe:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <fsm_manual+0x844>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	4a18      	ldr	r2, [pc, #96]	; (8001c64 <fsm_manual+0x85c>)
 8001c04:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_vertical[1] = red_yellow_green_manual_time[1];
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <fsm_manual+0x844>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	4a17      	ldr	r2, [pc, #92]	; (8001c68 <fsm_manual+0x860>)
 8001c0c:	6053      	str	r3, [r2, #4]

					red_yellow_green_auto_time_horizontal[2] = red_yellow_green_manual_time[2];
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <fsm_manual+0x844>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	4a14      	ldr	r2, [pc, #80]	; (8001c64 <fsm_manual+0x85c>)
 8001c14:	6093      	str	r3, [r2, #8]
					red_yellow_green_auto_time_vertical[2] = red_yellow_green_manual_time[2];
 8001c16:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <fsm_manual+0x844>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	4a13      	ldr	r2, [pc, #76]	; (8001c68 <fsm_manual+0x860>)
 8001c1c:	6093      	str	r3, [r2, #8]
				if(red_yellow_green_manual_time[1] <= red_yellow_green_manual_time[2]
 8001c1e:	e0a9      	b.n	8001d74 <fsm_manual+0x96c>
 8001c20:	200000e0 	.word	0x200000e0
 8001c24:	40010800 	.word	0x40010800
 8001c28:	40010c00 	.word	0x40010c00
 8001c2c:	2000012c 	.word	0x2000012c
 8001c30:	20000070 	.word	0x20000070
 8001c34:	20000074 	.word	0x20000074
 8001c38:	200000c4 	.word	0x200000c4
 8001c3c:	200000c8 	.word	0x200000c8
 8001c40:	20000000 	.word	0x20000000
 8001c44:	20000004 	.word	0x20000004
 8001c48:	200000ec 	.word	0x200000ec
 8001c4c:	200000cc 	.word	0x200000cc
 8001c50:	200000f8 	.word	0x200000f8
 8001c54:	200000e4 	.word	0x200000e4
 8001c58:	200000f0 	.word	0x200000f0
 8001c5c:	200000e8 	.word	0x200000e8
 8001c60:	200000f4 	.word	0x200000f4
 8001c64:	20000064 	.word	0x20000064
 8001c68:	20000058 	.word	0x20000058
				}

			}
			else if((check_button2_yellow == 1 || check_button3_yellow == 1) && (check_button2_green == 1 || check_button3_green == 1))
 8001c6c:	4b68      	ldr	r3, [pc, #416]	; (8001e10 <fsm_manual+0xa08>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d003      	beq.n	8001c7c <fsm_manual+0x874>
 8001c74:	4b67      	ldr	r3, [pc, #412]	; (8001e14 <fsm_manual+0xa0c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d133      	bne.n	8001ce4 <fsm_manual+0x8dc>
 8001c7c:	4b66      	ldr	r3, [pc, #408]	; (8001e18 <fsm_manual+0xa10>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d003      	beq.n	8001c8c <fsm_manual+0x884>
 8001c84:	4b65      	ldr	r3, [pc, #404]	; (8001e1c <fsm_manual+0xa14>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d12b      	bne.n	8001ce4 <fsm_manual+0x8dc>
			{
				red_yellow_green_manual_time[0] = red_yellow_green_manual_time[1] + red_yellow_green_manual_time[2];
 8001c8c:	4b64      	ldr	r3, [pc, #400]	; (8001e20 <fsm_manual+0xa18>)
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	4b63      	ldr	r3, [pc, #396]	; (8001e20 <fsm_manual+0xa18>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	4413      	add	r3, r2
 8001c96:	4a62      	ldr	r2, [pc, #392]	; (8001e20 <fsm_manual+0xa18>)
 8001c98:	6013      	str	r3, [r2, #0]

				if(red_yellow_green_manual_time[1] <= red_yellow_green_manual_time[2]
 8001c9a:	4b61      	ldr	r3, [pc, #388]	; (8001e20 <fsm_manual+0xa18>)
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	4b60      	ldr	r3, [pc, #384]	; (8001e20 <fsm_manual+0xa18>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	dc68      	bgt.n	8001d78 <fsm_manual+0x970>
				&& red_yellow_green_manual_time[1] <= red_yellow_green_manual_time[0])
 8001ca6:	4b5e      	ldr	r3, [pc, #376]	; (8001e20 <fsm_manual+0xa18>)
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	4b5d      	ldr	r3, [pc, #372]	; (8001e20 <fsm_manual+0xa18>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	dc62      	bgt.n	8001d78 <fsm_manual+0x970>
				{
					red_yellow_green_auto_time_horizontal[0] = red_yellow_green_manual_time[0];
 8001cb2:	4b5b      	ldr	r3, [pc, #364]	; (8001e20 <fsm_manual+0xa18>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a5b      	ldr	r2, [pc, #364]	; (8001e24 <fsm_manual+0xa1c>)
 8001cb8:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_vertical[0] = red_yellow_green_manual_time[0];
 8001cba:	4b59      	ldr	r3, [pc, #356]	; (8001e20 <fsm_manual+0xa18>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a5a      	ldr	r2, [pc, #360]	; (8001e28 <fsm_manual+0xa20>)
 8001cc0:	6013      	str	r3, [r2, #0]

					red_yellow_green_auto_time_horizontal[1] = red_yellow_green_manual_time[1];
 8001cc2:	4b57      	ldr	r3, [pc, #348]	; (8001e20 <fsm_manual+0xa18>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	4a57      	ldr	r2, [pc, #348]	; (8001e24 <fsm_manual+0xa1c>)
 8001cc8:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_vertical[1] = red_yellow_green_manual_time[1];
 8001cca:	4b55      	ldr	r3, [pc, #340]	; (8001e20 <fsm_manual+0xa18>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4a56      	ldr	r2, [pc, #344]	; (8001e28 <fsm_manual+0xa20>)
 8001cd0:	6053      	str	r3, [r2, #4]

					red_yellow_green_auto_time_horizontal[2] = red_yellow_green_manual_time[2];
 8001cd2:	4b53      	ldr	r3, [pc, #332]	; (8001e20 <fsm_manual+0xa18>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	4a53      	ldr	r2, [pc, #332]	; (8001e24 <fsm_manual+0xa1c>)
 8001cd8:	6093      	str	r3, [r2, #8]
					red_yellow_green_auto_time_vertical[2] = red_yellow_green_manual_time[2];
 8001cda:	4b51      	ldr	r3, [pc, #324]	; (8001e20 <fsm_manual+0xa18>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	4a52      	ldr	r2, [pc, #328]	; (8001e28 <fsm_manual+0xa20>)
 8001ce0:	6093      	str	r3, [r2, #8]
				if(red_yellow_green_manual_time[1] <= red_yellow_green_manual_time[2]
 8001ce2:	e049      	b.n	8001d78 <fsm_manual+0x970>
				}

			}
			else if((check_button2_red == 1 || check_button3_red == 1) && (check_button2_yellow == 1 || check_button3_yellow == 1) && (check_button2_green == 1 || check_button3_green == 1))
 8001ce4:	4b51      	ldr	r3, [pc, #324]	; (8001e2c <fsm_manual+0xa24>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d003      	beq.n	8001cf4 <fsm_manual+0x8ec>
 8001cec:	4b50      	ldr	r3, [pc, #320]	; (8001e30 <fsm_manual+0xa28>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d142      	bne.n	8001d7a <fsm_manual+0x972>
 8001cf4:	4b46      	ldr	r3, [pc, #280]	; (8001e10 <fsm_manual+0xa08>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d003      	beq.n	8001d04 <fsm_manual+0x8fc>
 8001cfc:	4b45      	ldr	r3, [pc, #276]	; (8001e14 <fsm_manual+0xa0c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d13a      	bne.n	8001d7a <fsm_manual+0x972>
 8001d04:	4b44      	ldr	r3, [pc, #272]	; (8001e18 <fsm_manual+0xa10>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d003      	beq.n	8001d14 <fsm_manual+0x90c>
 8001d0c:	4b43      	ldr	r3, [pc, #268]	; (8001e1c <fsm_manual+0xa14>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d132      	bne.n	8001d7a <fsm_manual+0x972>
			{

				if(red_yellow_green_manual_time[1] <= red_yellow_green_manual_time[2]
 8001d14:	4b42      	ldr	r3, [pc, #264]	; (8001e20 <fsm_manual+0xa18>)
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	4b41      	ldr	r3, [pc, #260]	; (8001e20 <fsm_manual+0xa18>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	dc2c      	bgt.n	8001d7a <fsm_manual+0x972>
				&& red_yellow_green_manual_time[1] <= red_yellow_green_manual_time[0]
 8001d20:	4b3f      	ldr	r3, [pc, #252]	; (8001e20 <fsm_manual+0xa18>)
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	4b3e      	ldr	r3, [pc, #248]	; (8001e20 <fsm_manual+0xa18>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	dc26      	bgt.n	8001d7a <fsm_manual+0x972>
				&& red_yellow_green_manual_time[0] == red_yellow_green_manual_time[1] + red_yellow_green_manual_time[2])
 8001d2c:	4b3c      	ldr	r3, [pc, #240]	; (8001e20 <fsm_manual+0xa18>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4b3b      	ldr	r3, [pc, #236]	; (8001e20 <fsm_manual+0xa18>)
 8001d32:	6859      	ldr	r1, [r3, #4]
 8001d34:	4b3a      	ldr	r3, [pc, #232]	; (8001e20 <fsm_manual+0xa18>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	440b      	add	r3, r1
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d11d      	bne.n	8001d7a <fsm_manual+0x972>
				{
					red_yellow_green_auto_time_horizontal[0] = red_yellow_green_manual_time[0];
 8001d3e:	4b38      	ldr	r3, [pc, #224]	; (8001e20 <fsm_manual+0xa18>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a38      	ldr	r2, [pc, #224]	; (8001e24 <fsm_manual+0xa1c>)
 8001d44:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_vertical[0] = red_yellow_green_manual_time[0];
 8001d46:	4b36      	ldr	r3, [pc, #216]	; (8001e20 <fsm_manual+0xa18>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a37      	ldr	r2, [pc, #220]	; (8001e28 <fsm_manual+0xa20>)
 8001d4c:	6013      	str	r3, [r2, #0]

					red_yellow_green_auto_time_horizontal[1] = red_yellow_green_manual_time[1];
 8001d4e:	4b34      	ldr	r3, [pc, #208]	; (8001e20 <fsm_manual+0xa18>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	4a34      	ldr	r2, [pc, #208]	; (8001e24 <fsm_manual+0xa1c>)
 8001d54:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_vertical[1] = red_yellow_green_manual_time[1];
 8001d56:	4b32      	ldr	r3, [pc, #200]	; (8001e20 <fsm_manual+0xa18>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4a33      	ldr	r2, [pc, #204]	; (8001e28 <fsm_manual+0xa20>)
 8001d5c:	6053      	str	r3, [r2, #4]

					red_yellow_green_auto_time_horizontal[2] = red_yellow_green_manual_time[2];
 8001d5e:	4b30      	ldr	r3, [pc, #192]	; (8001e20 <fsm_manual+0xa18>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	4a30      	ldr	r2, [pc, #192]	; (8001e24 <fsm_manual+0xa1c>)
 8001d64:	6093      	str	r3, [r2, #8]
					red_yellow_green_auto_time_vertical[2] = red_yellow_green_manual_time[2];
 8001d66:	4b2e      	ldr	r3, [pc, #184]	; (8001e20 <fsm_manual+0xa18>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	4a2f      	ldr	r2, [pc, #188]	; (8001e28 <fsm_manual+0xa20>)
 8001d6c:	6093      	str	r3, [r2, #8]
 8001d6e:	e004      	b.n	8001d7a <fsm_manual+0x972>
				if(red_yellow_green_manual_time[1] <= red_yellow_green_manual_time[2]
 8001d70:	bf00      	nop
 8001d72:	e002      	b.n	8001d7a <fsm_manual+0x972>
				if(red_yellow_green_manual_time[1] <= red_yellow_green_manual_time[2]
 8001d74:	bf00      	nop
 8001d76:	e000      	b.n	8001d7a <fsm_manual+0x972>
				if(red_yellow_green_manual_time[1] <= red_yellow_green_manual_time[2]
 8001d78:	bf00      	nop
				}

			}

			horizontal_counter = 0;
 8001d7a:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <fsm_manual+0xa2c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
			vertical_counter = 0;
 8001d80:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <fsm_manual+0xa30>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
			status_horizontal = AUTO_RED;
 8001d86:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <fsm_manual+0xa34>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_GREEN;
 8001d8c:	4b2c      	ldr	r3, [pc, #176]	; (8001e40 <fsm_manual+0xa38>)
 8001d8e:	2203      	movs	r2, #3
 8001d90:	601a      	str	r2, [r3, #0]
			EN_horizontal = 1;
 8001d92:	4b2c      	ldr	r3, [pc, #176]	; (8001e44 <fsm_manual+0xa3c>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
			EN_vertical = 1;
 8001d98:	4b2b      	ldr	r3, [pc, #172]	; (8001e48 <fsm_manual+0xa40>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]
			setTimer7SEGCountHorizontal(1000);
 8001d9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001da2:	f000 f9ed 	bl	8002180 <setTimer7SEGCountHorizontal>
			setTimer7SEGCountVertical(1000);
 8001da6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001daa:	f000 fa03 	bl	80021b4 <setTimer7SEGCountVertical>
			timerAuto_flag = 0;
 8001dae:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <fsm_manual+0xa44>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
		}

		if(timerAuto_flag == 1)
 8001db4:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <fsm_manual+0xa44>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d124      	bne.n	8001e06 <fsm_manual+0x9fe>
		{
			horizontal_counter = 0;
 8001dbc:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <fsm_manual+0xa2c>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
			vertical_counter = 0;
 8001dc2:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <fsm_manual+0xa30>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
			EN_horizontal = 1;
 8001dc8:	4b1e      	ldr	r3, [pc, #120]	; (8001e44 <fsm_manual+0xa3c>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]
			EN_vertical = 1;
 8001dce:	4b1e      	ldr	r3, [pc, #120]	; (8001e48 <fsm_manual+0xa40>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]
			setTimer7SEGCountHorizontal(1000);
 8001dd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dd8:	f000 f9d2 	bl	8002180 <setTimer7SEGCountHorizontal>
			setTimer7SEGCountVertical(1000);
 8001ddc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001de0:	f000 f9e8 	bl	80021b4 <setTimer7SEGCountVertical>
			status_horizontal = AUTO_RED;
 8001de4:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <fsm_manual+0xa34>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_GREEN;
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <fsm_manual+0xa38>)
 8001dec:	2203      	movs	r2, #3
 8001dee:	601a      	str	r2, [r3, #0]
		}

		break;
 8001df0:	e009      	b.n	8001e06 <fsm_manual+0x9fe>
		break;
 8001df2:	bf00      	nop
 8001df4:	e008      	b.n	8001e08 <fsm_manual+0xa00>
		break;
 8001df6:	bf00      	nop
 8001df8:	e006      	b.n	8001e08 <fsm_manual+0xa00>
		break;
 8001dfa:	bf00      	nop
 8001dfc:	e004      	b.n	8001e08 <fsm_manual+0xa00>
		break;
 8001dfe:	bf00      	nop
 8001e00:	e002      	b.n	8001e08 <fsm_manual+0xa00>
		break;
 8001e02:	bf00      	nop
 8001e04:	e000      	b.n	8001e08 <fsm_manual+0xa00>
		break;
 8001e06:	bf00      	nop
	}

	}

}
 8001e08:	bf00      	nop
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	200000e8 	.word	0x200000e8
 8001e14:	200000f4 	.word	0x200000f4
 8001e18:	200000ec 	.word	0x200000ec
 8001e1c:	200000f8 	.word	0x200000f8
 8001e20:	200000cc 	.word	0x200000cc
 8001e24:	20000064 	.word	0x20000064
 8001e28:	20000058 	.word	0x20000058
 8001e2c:	200000e4 	.word	0x200000e4
 8001e30:	200000f0 	.word	0x200000f0
 8001e34:	200000c4 	.word	0x200000c4
 8001e38:	200000c8 	.word	0x200000c8
 8001e3c:	20000070 	.word	0x20000070
 8001e40:	20000074 	.word	0x20000074
 8001e44:	20000000 	.word	0x20000000
 8001e48:	20000004 	.word	0x20000004
 8001e4c:	20000124 	.word	0x20000124

08001e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e54:	f000 fb42 	bl	80024dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e58:	f000 f834 	bl	8001ec4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e5c:	f000 f8ba 	bl	8001fd4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001e60:	f000 f86c 	bl	8001f3c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001e64:	4814      	ldr	r0, [pc, #80]	; (8001eb8 <main+0x68>)
 8001e66:	f001 fa97 	bl	8003398 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimerTest(1000);
 8001e6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e6e:	f000 f939 	bl	80020e4 <setTimerTest>
  setTimer7SEGCountHorizontal(1000);
 8001e72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e76:	f000 f983 	bl	8002180 <setTimer7SEGCountHorizontal>
  setTimer7SEGCountVertical(1000);
 8001e7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e7e:	f000 f999 	bl	80021b4 <setTimer7SEGCountVertical>
  setTimerENhorizontal(500);
 8001e82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e86:	f000 f947 	bl	8002118 <setTimerENhorizontal>
  setTimerENvertical(500);
 8001e8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e8e:	f000 f95d 	bl	800214c <setTimerENvertical>

  while (1)
  {
	  if(timerTest_flag == 1)
 8001e92:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <main+0x6c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d107      	bne.n	8001eaa <main+0x5a>
	  {
		  HAL_GPIO_TogglePin(test_GPIO_Port, test_Pin);
 8001e9a:	2120      	movs	r1, #32
 8001e9c:	4808      	ldr	r0, [pc, #32]	; (8001ec0 <main+0x70>)
 8001e9e:	f000 fe36 	bl	8002b0e <HAL_GPIO_TogglePin>

		  setTimerTest(1000);
 8001ea2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ea6:	f000 f91d 	bl	80020e4 <setTimerTest>
	  }

	  fsm_manual();
 8001eaa:	f7ff faad 	bl	8001408 <fsm_manual>

	  fsm_automatic();
 8001eae:	f7ff f94d 	bl	800114c <fsm_automatic>

	  display7SEGFinal();
 8001eb2:	f7fe f94b 	bl	800014c <display7SEGFinal>
	  if(timerTest_flag == 1)
 8001eb6:	e7ec      	b.n	8001e92 <main+0x42>
 8001eb8:	20000134 	.word	0x20000134
 8001ebc:	200000fc 	.word	0x200000fc
 8001ec0:	40010800 	.word	0x40010800

08001ec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b090      	sub	sp, #64	; 0x40
 8001ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eca:	f107 0318 	add.w	r3, r7, #24
 8001ece:	2228      	movs	r2, #40	; 0x28
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f001 fe10 	bl	8003af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
 8001ee4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eea:	2301      	movs	r3, #1
 8001eec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eee:	2310      	movs	r3, #16
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ef6:	f107 0318 	add.w	r3, r7, #24
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fe20 	bl	8002b40 <HAL_RCC_OscConfig>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001f06:	f000 f8e7 	bl	80020d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f0a:	230f      	movs	r3, #15
 8001f0c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f001 f88c 	bl	8003040 <HAL_RCC_ClockConfig>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001f2e:	f000 f8d3 	bl	80020d8 <Error_Handler>
  }
}
 8001f32:	bf00      	nop
 8001f34:	3740      	adds	r7, #64	; 0x40
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f42:	f107 0308 	add.w	r3, r7, #8
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	609a      	str	r2, [r3, #8]
 8001f4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f50:	463b      	mov	r3, r7
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f58:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <MX_TIM2_Init+0x94>)
 8001f5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001f60:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <MX_TIM2_Init+0x94>)
 8001f62:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001f66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f68:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <MX_TIM2_Init+0x94>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001f6e:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <MX_TIM2_Init+0x94>)
 8001f70:	2209      	movs	r2, #9
 8001f72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f74:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <MX_TIM2_Init+0x94>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <MX_TIM2_Init+0x94>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f80:	4813      	ldr	r0, [pc, #76]	; (8001fd0 <MX_TIM2_Init+0x94>)
 8001f82:	f001 f9b9 	bl	80032f8 <HAL_TIM_Base_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001f8c:	f000 f8a4 	bl	80020d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f96:	f107 0308 	add.w	r3, r7, #8
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	480c      	ldr	r0, [pc, #48]	; (8001fd0 <MX_TIM2_Init+0x94>)
 8001f9e:	f001 fb37 	bl	8003610 <HAL_TIM_ConfigClockSource>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001fa8:	f000 f896 	bl	80020d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fac:	2300      	movs	r3, #0
 8001fae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fb4:	463b      	mov	r3, r7
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4805      	ldr	r0, [pc, #20]	; (8001fd0 <MX_TIM2_Init+0x94>)
 8001fba:	f001 fd0f 	bl	80039dc <HAL_TIMEx_MasterConfigSynchronization>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001fc4:	f000 f888 	bl	80020d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fc8:	bf00      	nop
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000134 	.word	0x20000134

08001fd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fda:	f107 0308 	add.w	r3, r7, #8
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe8:	4b2f      	ldr	r3, [pc, #188]	; (80020a8 <MX_GPIO_Init+0xd4>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	4a2e      	ldr	r2, [pc, #184]	; (80020a8 <MX_GPIO_Init+0xd4>)
 8001fee:	f043 0304 	orr.w	r3, r3, #4
 8001ff2:	6193      	str	r3, [r2, #24]
 8001ff4:	4b2c      	ldr	r3, [pc, #176]	; (80020a8 <MX_GPIO_Init+0xd4>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	607b      	str	r3, [r7, #4]
 8001ffe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002000:	4b29      	ldr	r3, [pc, #164]	; (80020a8 <MX_GPIO_Init+0xd4>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	4a28      	ldr	r2, [pc, #160]	; (80020a8 <MX_GPIO_Init+0xd4>)
 8002006:	f043 0308 	orr.w	r3, r3, #8
 800200a:	6193      	str	r3, [r2, #24]
 800200c:	4b26      	ldr	r3, [pc, #152]	; (80020a8 <MX_GPIO_Init+0xd4>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, red1_Pin|yellow1_Pin|green1_Pin|test_Pin
 8002018:	2200      	movs	r2, #0
 800201a:	f641 71fc 	movw	r1, #8188	; 0x1ffc
 800201e:	4823      	ldr	r0, [pc, #140]	; (80020ac <MX_GPIO_Init+0xd8>)
 8002020:	f000 fd5d 	bl	8002ade <HAL_GPIO_WritePin>
                          |a1_Pin|b1_Pin|c1_Pin|d1_Pin
                          |e1_Pin|f1_Pin|g1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|e2_Pin|f2_Pin
 8002024:	2200      	movs	r2, #0
 8002026:	f64f 71f6 	movw	r1, #65526	; 0xfff6
 800202a:	4821      	ldr	r0, [pc, #132]	; (80020b0 <MX_GPIO_Init+0xdc>)
 800202c:	f000 fd57 	bl	8002ade <HAL_GPIO_WritePin>
                          |c2_Pin|d2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : red1_Pin yellow1_Pin green1_Pin test_Pin
                           a1_Pin b1_Pin c1_Pin d1_Pin
                           e1_Pin f1_Pin g1_Pin */
  GPIO_InitStruct.Pin = red1_Pin|yellow1_Pin|green1_Pin|test_Pin
 8002030:	f641 73fc 	movw	r3, #8188	; 0x1ffc
 8002034:	60bb      	str	r3, [r7, #8]
                          |a1_Pin|b1_Pin|c1_Pin|d1_Pin
                          |e1_Pin|f1_Pin|g1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002036:	2301      	movs	r3, #1
 8002038:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203e:	2302      	movs	r3, #2
 8002040:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002042:	f107 0308 	add.w	r3, r7, #8
 8002046:	4619      	mov	r1, r3
 8002048:	4818      	ldr	r0, [pc, #96]	; (80020ac <MX_GPIO_Init+0xd8>)
 800204a:	f000 fbb7 	bl	80027bc <HAL_GPIO_Init>

  /*Configure GPIO pin : button4_Pin */
  GPIO_InitStruct.Pin = button4_Pin;
 800204e:	2301      	movs	r3, #1
 8002050:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002056:	2301      	movs	r3, #1
 8002058:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(button4_GPIO_Port, &GPIO_InitStruct);
 800205a:	f107 0308 	add.w	r3, r7, #8
 800205e:	4619      	mov	r1, r3
 8002060:	4813      	ldr	r0, [pc, #76]	; (80020b0 <MX_GPIO_Init+0xdc>)
 8002062:	f000 fbab 	bl	80027bc <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin e2_Pin f2_Pin
                           g2_Pin red2_Pin yellow2_Pin green2_Pin
                           EN2_Pin EN3_Pin a2_Pin b2_Pin
                           c2_Pin d2_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|e2_Pin|f2_Pin
 8002066:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800206a:	60bb      	str	r3, [r7, #8]
                          |g2_Pin|red2_Pin|yellow2_Pin|green2_Pin
                          |EN2_Pin|EN3_Pin|a2_Pin|b2_Pin
                          |c2_Pin|d2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206c:	2301      	movs	r3, #1
 800206e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002074:	2302      	movs	r3, #2
 8002076:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002078:	f107 0308 	add.w	r3, r7, #8
 800207c:	4619      	mov	r1, r3
 800207e:	480c      	ldr	r0, [pc, #48]	; (80020b0 <MX_GPIO_Init+0xdc>)
 8002080:	f000 fb9c 	bl	80027bc <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 8002084:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002088:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800208e:	2301      	movs	r3, #1
 8002090:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002092:	f107 0308 	add.w	r3, r7, #8
 8002096:	4619      	mov	r1, r3
 8002098:	4804      	ldr	r0, [pc, #16]	; (80020ac <MX_GPIO_Init+0xd8>)
 800209a:	f000 fb8f 	bl	80027bc <HAL_GPIO_Init>

}
 800209e:	bf00      	nop
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40010800 	.word	0x40010800
 80020b0:	40010c00 	.word	0x40010c00

080020b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
	timerRun();
 80020bc:	f000 f8c8 	bl	8002250 <timerRun>
	getButton1();
 80020c0:	f7fe fe30 	bl	8000d24 <getButton1>
	getButton2();
 80020c4:	f7fe feb4 	bl	8000e30 <getButton2>
	getButton3();
 80020c8:	f7fe ff36 	bl	8000f38 <getButton3>
	getButton4();
 80020cc:	f7fe ffb8 	bl	8001040 <getButton4>
}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020dc:	b672      	cpsid	i
}
 80020de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020e0:	e7fe      	b.n	80020e0 <Error_Handler+0x8>
	...

080020e4 <setTimerTest>:
int timerBlinking_flag = 0;
int timerBlinking_counter = 0;


void setTimerTest(int duration)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
    timerTest_counter = duration / TIMER_CYCLE;
 80020ec:	4b07      	ldr	r3, [pc, #28]	; (800210c <setTimerTest+0x28>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80020f6:	4a06      	ldr	r2, [pc, #24]	; (8002110 <setTimerTest+0x2c>)
 80020f8:	6013      	str	r3, [r2, #0]
    timerTest_flag = 0;
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <setTimerTest+0x30>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	20000078 	.word	0x20000078
 8002110:	20000100 	.word	0x20000100
 8002114:	200000fc 	.word	0x200000fc

08002118 <setTimerENhorizontal>:

void setTimerENhorizontal(int duration)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
    timerENhorizontal_counter = duration / TIMER_CYCLE;
 8002120:	4b07      	ldr	r3, [pc, #28]	; (8002140 <setTimerENhorizontal+0x28>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	fb92 f3f3 	sdiv	r3, r2, r3
 800212a:	4a06      	ldr	r2, [pc, #24]	; (8002144 <setTimerENhorizontal+0x2c>)
 800212c:	6013      	str	r3, [r2, #0]
    timerENhorizontal_flag = 0;
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <setTimerENhorizontal+0x30>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000078 	.word	0x20000078
 8002144:	20000108 	.word	0x20000108
 8002148:	20000104 	.word	0x20000104

0800214c <setTimerENvertical>:

void setTimerENvertical(int duration)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
    timerENvertical_counter = duration / TIMER_CYCLE;
 8002154:	4b07      	ldr	r3, [pc, #28]	; (8002174 <setTimerENvertical+0x28>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	fb92 f3f3 	sdiv	r3, r2, r3
 800215e:	4a06      	ldr	r2, [pc, #24]	; (8002178 <setTimerENvertical+0x2c>)
 8002160:	6013      	str	r3, [r2, #0]
    timerENvertical_flag = 0;
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <setTimerENvertical+0x30>)
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000078 	.word	0x20000078
 8002178:	20000110 	.word	0x20000110
 800217c:	2000010c 	.word	0x2000010c

08002180 <setTimer7SEGCountHorizontal>:


void setTimer7SEGCountHorizontal(int duration)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
    timer7SEGCountHorizontal_counter = duration / TIMER_CYCLE;
 8002188:	4b07      	ldr	r3, [pc, #28]	; (80021a8 <setTimer7SEGCountHorizontal+0x28>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002192:	4a06      	ldr	r2, [pc, #24]	; (80021ac <setTimer7SEGCountHorizontal+0x2c>)
 8002194:	6013      	str	r3, [r2, #0]
    timer7SEGCountHorizontal_flag = 0;
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <setTimer7SEGCountHorizontal+0x30>)
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	20000078 	.word	0x20000078
 80021ac:	20000118 	.word	0x20000118
 80021b0:	20000114 	.word	0x20000114

080021b4 <setTimer7SEGCountVertical>:


void setTimer7SEGCountVertical(int duration)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
    timer7SEGCountVertical_counter = duration / TIMER_CYCLE;
 80021bc:	4b07      	ldr	r3, [pc, #28]	; (80021dc <setTimer7SEGCountVertical+0x28>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80021c6:	4a06      	ldr	r2, [pc, #24]	; (80021e0 <setTimer7SEGCountVertical+0x2c>)
 80021c8:	6013      	str	r3, [r2, #0]
    timer7SEGCountVertical_flag = 0;
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <setTimer7SEGCountVertical+0x30>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000078 	.word	0x20000078
 80021e0:	20000120 	.word	0x20000120
 80021e4:	2000011c 	.word	0x2000011c

080021e8 <setTimerAuto>:


void setTimerAuto(int duration)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
    timerAuto_counter = duration / TIMER_CYCLE;
 80021f0:	4b07      	ldr	r3, [pc, #28]	; (8002210 <setTimerAuto+0x28>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80021fa:	4a06      	ldr	r2, [pc, #24]	; (8002214 <setTimerAuto+0x2c>)
 80021fc:	6013      	str	r3, [r2, #0]
    timerAuto_flag = 0;
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <setTimerAuto+0x30>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000078 	.word	0x20000078
 8002214:	20000128 	.word	0x20000128
 8002218:	20000124 	.word	0x20000124

0800221c <setTimerBlinking>:


void setTimerBlinking(int duration)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
	timerBlinking_counter = duration / TIMER_CYCLE;
 8002224:	4b07      	ldr	r3, [pc, #28]	; (8002244 <setTimerBlinking+0x28>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	fb92 f3f3 	sdiv	r3, r2, r3
 800222e:	4a06      	ldr	r2, [pc, #24]	; (8002248 <setTimerBlinking+0x2c>)
 8002230:	6013      	str	r3, [r2, #0]
	timerBlinking_flag = 0;
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <setTimerBlinking+0x30>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000078 	.word	0x20000078
 8002248:	20000130 	.word	0x20000130
 800224c:	2000012c 	.word	0x2000012c

08002250 <timerRun>:


void timerRun()
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
    if (timerTest_counter > 0)
 8002254:	4b39      	ldr	r3, [pc, #228]	; (800233c <timerRun+0xec>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	dd0b      	ble.n	8002274 <timerRun+0x24>
    {
        timerTest_counter--;
 800225c:	4b37      	ldr	r3, [pc, #220]	; (800233c <timerRun+0xec>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	3b01      	subs	r3, #1
 8002262:	4a36      	ldr	r2, [pc, #216]	; (800233c <timerRun+0xec>)
 8002264:	6013      	str	r3, [r2, #0]
        if (timerTest_counter <= 0)
 8002266:	4b35      	ldr	r3, [pc, #212]	; (800233c <timerRun+0xec>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	dc02      	bgt.n	8002274 <timerRun+0x24>
        {
            timerTest_flag = 1;
 800226e:	4b34      	ldr	r3, [pc, #208]	; (8002340 <timerRun+0xf0>)
 8002270:	2201      	movs	r2, #1
 8002272:	601a      	str	r2, [r3, #0]
        }
    }


    if (timerENhorizontal_counter > 0)
 8002274:	4b33      	ldr	r3, [pc, #204]	; (8002344 <timerRun+0xf4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	dd0b      	ble.n	8002294 <timerRun+0x44>
    {
        timerENhorizontal_counter--;
 800227c:	4b31      	ldr	r3, [pc, #196]	; (8002344 <timerRun+0xf4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	3b01      	subs	r3, #1
 8002282:	4a30      	ldr	r2, [pc, #192]	; (8002344 <timerRun+0xf4>)
 8002284:	6013      	str	r3, [r2, #0]
        if (timerENhorizontal_counter <= 0)
 8002286:	4b2f      	ldr	r3, [pc, #188]	; (8002344 <timerRun+0xf4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	dc02      	bgt.n	8002294 <timerRun+0x44>
        {
            timerENhorizontal_flag = 1;
 800228e:	4b2e      	ldr	r3, [pc, #184]	; (8002348 <timerRun+0xf8>)
 8002290:	2201      	movs	r2, #1
 8002292:	601a      	str	r2, [r3, #0]
        }
    }

    if (timerENvertical_counter > 0)
 8002294:	4b2d      	ldr	r3, [pc, #180]	; (800234c <timerRun+0xfc>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	dd0b      	ble.n	80022b4 <timerRun+0x64>
    {
        timerENvertical_counter--;
 800229c:	4b2b      	ldr	r3, [pc, #172]	; (800234c <timerRun+0xfc>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	3b01      	subs	r3, #1
 80022a2:	4a2a      	ldr	r2, [pc, #168]	; (800234c <timerRun+0xfc>)
 80022a4:	6013      	str	r3, [r2, #0]
        if (timerENvertical_counter <= 0)
 80022a6:	4b29      	ldr	r3, [pc, #164]	; (800234c <timerRun+0xfc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	dc02      	bgt.n	80022b4 <timerRun+0x64>
        {
            timerENvertical_flag = 1;
 80022ae:	4b28      	ldr	r3, [pc, #160]	; (8002350 <timerRun+0x100>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	601a      	str	r2, [r3, #0]
        }
    }


    if (timer7SEGCountHorizontal_counter > 0)
 80022b4:	4b27      	ldr	r3, [pc, #156]	; (8002354 <timerRun+0x104>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	dd0b      	ble.n	80022d4 <timerRun+0x84>
    {
        timer7SEGCountHorizontal_counter--;
 80022bc:	4b25      	ldr	r3, [pc, #148]	; (8002354 <timerRun+0x104>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	3b01      	subs	r3, #1
 80022c2:	4a24      	ldr	r2, [pc, #144]	; (8002354 <timerRun+0x104>)
 80022c4:	6013      	str	r3, [r2, #0]
        if (timer7SEGCountHorizontal_counter <= 0)
 80022c6:	4b23      	ldr	r3, [pc, #140]	; (8002354 <timerRun+0x104>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	dc02      	bgt.n	80022d4 <timerRun+0x84>
        {
            timer7SEGCountHorizontal_flag = 1;
 80022ce:	4b22      	ldr	r3, [pc, #136]	; (8002358 <timerRun+0x108>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	601a      	str	r2, [r3, #0]
        }
    }


    if (timer7SEGCountVertical_counter > 0)
 80022d4:	4b21      	ldr	r3, [pc, #132]	; (800235c <timerRun+0x10c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	dd0b      	ble.n	80022f4 <timerRun+0xa4>
    {
        timer7SEGCountVertical_counter--;
 80022dc:	4b1f      	ldr	r3, [pc, #124]	; (800235c <timerRun+0x10c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	3b01      	subs	r3, #1
 80022e2:	4a1e      	ldr	r2, [pc, #120]	; (800235c <timerRun+0x10c>)
 80022e4:	6013      	str	r3, [r2, #0]
        if (timer7SEGCountVertical_counter <= 0)
 80022e6:	4b1d      	ldr	r3, [pc, #116]	; (800235c <timerRun+0x10c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	dc02      	bgt.n	80022f4 <timerRun+0xa4>
        {
            timer7SEGCountVertical_flag = 1;
 80022ee:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <timerRun+0x110>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	601a      	str	r2, [r3, #0]
        }
    }


    if (timerAuto_counter > 0)
 80022f4:	4b1b      	ldr	r3, [pc, #108]	; (8002364 <timerRun+0x114>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	dd0b      	ble.n	8002314 <timerRun+0xc4>
    {
        timerAuto_counter--;
 80022fc:	4b19      	ldr	r3, [pc, #100]	; (8002364 <timerRun+0x114>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	3b01      	subs	r3, #1
 8002302:	4a18      	ldr	r2, [pc, #96]	; (8002364 <timerRun+0x114>)
 8002304:	6013      	str	r3, [r2, #0]
        if (timerAuto_counter <= 0)
 8002306:	4b17      	ldr	r3, [pc, #92]	; (8002364 <timerRun+0x114>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	dc02      	bgt.n	8002314 <timerRun+0xc4>
        {
            timerAuto_flag = 1;
 800230e:	4b16      	ldr	r3, [pc, #88]	; (8002368 <timerRun+0x118>)
 8002310:	2201      	movs	r2, #1
 8002312:	601a      	str	r2, [r3, #0]
        }
    }


    if (timerBlinking_counter > 0)
 8002314:	4b15      	ldr	r3, [pc, #84]	; (800236c <timerRun+0x11c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	dd0b      	ble.n	8002334 <timerRun+0xe4>
    {
    	timerBlinking_counter--;
 800231c:	4b13      	ldr	r3, [pc, #76]	; (800236c <timerRun+0x11c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	3b01      	subs	r3, #1
 8002322:	4a12      	ldr	r2, [pc, #72]	; (800236c <timerRun+0x11c>)
 8002324:	6013      	str	r3, [r2, #0]
    	if (timerBlinking_counter <= 0)
 8002326:	4b11      	ldr	r3, [pc, #68]	; (800236c <timerRun+0x11c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	dc02      	bgt.n	8002334 <timerRun+0xe4>
    	{
    		timerBlinking_flag = 1;
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <timerRun+0x120>)
 8002330:	2201      	movs	r2, #1
 8002332:	601a      	str	r2, [r3, #0]
    	}
    }
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr
 800233c:	20000100 	.word	0x20000100
 8002340:	200000fc 	.word	0x200000fc
 8002344:	20000108 	.word	0x20000108
 8002348:	20000104 	.word	0x20000104
 800234c:	20000110 	.word	0x20000110
 8002350:	2000010c 	.word	0x2000010c
 8002354:	20000118 	.word	0x20000118
 8002358:	20000114 	.word	0x20000114
 800235c:	20000120 	.word	0x20000120
 8002360:	2000011c 	.word	0x2000011c
 8002364:	20000128 	.word	0x20000128
 8002368:	20000124 	.word	0x20000124
 800236c:	20000130 	.word	0x20000130
 8002370:	2000012c 	.word	0x2000012c

08002374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <HAL_MspInit+0x5c>)
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <HAL_MspInit+0x5c>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6193      	str	r3, [r2, #24]
 8002386:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_MspInit+0x5c>)
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002392:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <HAL_MspInit+0x5c>)
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	4a0e      	ldr	r2, [pc, #56]	; (80023d0 <HAL_MspInit+0x5c>)
 8002398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239c:	61d3      	str	r3, [r2, #28]
 800239e:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <HAL_MspInit+0x5c>)
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a6:	607b      	str	r3, [r7, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80023aa:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <HAL_MspInit+0x60>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <HAL_MspInit+0x60>)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023c6:	bf00      	nop
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40010000 	.word	0x40010000

080023d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e8:	d113      	bne.n	8002412 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ea:	4b0c      	ldr	r3, [pc, #48]	; (800241c <HAL_TIM_Base_MspInit+0x44>)
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	4a0b      	ldr	r2, [pc, #44]	; (800241c <HAL_TIM_Base_MspInit+0x44>)
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	61d3      	str	r3, [r2, #28]
 80023f6:	4b09      	ldr	r3, [pc, #36]	; (800241c <HAL_TIM_Base_MspInit+0x44>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002402:	2200      	movs	r2, #0
 8002404:	2100      	movs	r1, #0
 8002406:	201c      	movs	r0, #28
 8002408:	f000 f9a1 	bl	800274e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800240c:	201c      	movs	r0, #28
 800240e:	f000 f9ba 	bl	8002786 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40021000 	.word	0x40021000

08002420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002424:	e7fe      	b.n	8002424 <NMI_Handler+0x4>

08002426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800242a:	e7fe      	b.n	800242a <HardFault_Handler+0x4>

0800242c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002430:	e7fe      	b.n	8002430 <MemManage_Handler+0x4>

08002432 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002436:	e7fe      	b.n	8002436 <BusFault_Handler+0x4>

08002438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800243c:	e7fe      	b.n	800243c <UsageFault_Handler+0x4>

0800243e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr

08002456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr

08002462 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002466:	f000 f87f 	bl	8002568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002474:	4802      	ldr	r0, [pc, #8]	; (8002480 <TIM2_IRQHandler+0x10>)
 8002476:	f000 ffdb 	bl	8003430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000134 	.word	0x20000134

08002484 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr

08002490 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002490:	f7ff fff8 	bl	8002484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002494:	480b      	ldr	r0, [pc, #44]	; (80024c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002496:	490c      	ldr	r1, [pc, #48]	; (80024c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002498:	4a0c      	ldr	r2, [pc, #48]	; (80024cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800249a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800249c:	e002      	b.n	80024a4 <LoopCopyDataInit>

0800249e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800249e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024a2:	3304      	adds	r3, #4

080024a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024a8:	d3f9      	bcc.n	800249e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024aa:	4a09      	ldr	r2, [pc, #36]	; (80024d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80024ac:	4c09      	ldr	r4, [pc, #36]	; (80024d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b0:	e001      	b.n	80024b6 <LoopFillZerobss>

080024b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024b4:	3204      	adds	r2, #4

080024b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024b8:	d3fb      	bcc.n	80024b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ba:	f001 faf9 	bl	8003ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024be:	f7ff fcc7 	bl	8001e50 <main>
  bx lr
 80024c2:	4770      	bx	lr
  ldr r0, =_sdata
 80024c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024c8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80024cc:	08003b4c 	.word	0x08003b4c
  ldr r2, =_sbss
 80024d0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80024d4:	20000180 	.word	0x20000180

080024d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024d8:	e7fe      	b.n	80024d8 <ADC1_2_IRQHandler>
	...

080024dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024e0:	4b08      	ldr	r3, [pc, #32]	; (8002504 <HAL_Init+0x28>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a07      	ldr	r2, [pc, #28]	; (8002504 <HAL_Init+0x28>)
 80024e6:	f043 0310 	orr.w	r3, r3, #16
 80024ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ec:	2003      	movs	r0, #3
 80024ee:	f000 f923 	bl	8002738 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024f2:	200f      	movs	r0, #15
 80024f4:	f000 f808 	bl	8002508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024f8:	f7ff ff3c 	bl	8002374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40022000 	.word	0x40022000

08002508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002510:	4b12      	ldr	r3, [pc, #72]	; (800255c <HAL_InitTick+0x54>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4b12      	ldr	r3, [pc, #72]	; (8002560 <HAL_InitTick+0x58>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	4619      	mov	r1, r3
 800251a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800251e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002522:	fbb2 f3f3 	udiv	r3, r2, r3
 8002526:	4618      	mov	r0, r3
 8002528:	f000 f93b 	bl	80027a2 <HAL_SYSTICK_Config>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e00e      	b.n	8002554 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b0f      	cmp	r3, #15
 800253a:	d80a      	bhi.n	8002552 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800253c:	2200      	movs	r2, #0
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	f04f 30ff 	mov.w	r0, #4294967295
 8002544:	f000 f903 	bl	800274e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002548:	4a06      	ldr	r2, [pc, #24]	; (8002564 <HAL_InitTick+0x5c>)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	e000      	b.n	8002554 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
}
 8002554:	4618      	mov	r0, r3
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	2000007c 	.word	0x2000007c
 8002560:	20000084 	.word	0x20000084
 8002564:	20000080 	.word	0x20000080

08002568 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <HAL_IncTick+0x1c>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	461a      	mov	r2, r3
 8002572:	4b05      	ldr	r3, [pc, #20]	; (8002588 <HAL_IncTick+0x20>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4413      	add	r3, r2
 8002578:	4a03      	ldr	r2, [pc, #12]	; (8002588 <HAL_IncTick+0x20>)
 800257a:	6013      	str	r3, [r2, #0]
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr
 8002584:	20000084 	.word	0x20000084
 8002588:	2000017c 	.word	0x2000017c

0800258c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return uwTick;
 8002590:	4b02      	ldr	r3, [pc, #8]	; (800259c <HAL_GetTick+0x10>)
 8002592:	681b      	ldr	r3, [r3, #0]
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr
 800259c:	2000017c 	.word	0x2000017c

080025a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <__NVIC_SetPriorityGrouping+0x44>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025bc:	4013      	ands	r3, r2
 80025be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025d2:	4a04      	ldr	r2, [pc, #16]	; (80025e4 <__NVIC_SetPriorityGrouping+0x44>)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	60d3      	str	r3, [r2, #12]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025ec:	4b04      	ldr	r3, [pc, #16]	; (8002600 <__NVIC_GetPriorityGrouping+0x18>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	f003 0307 	and.w	r3, r3, #7
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	2b00      	cmp	r3, #0
 8002614:	db0b      	blt.n	800262e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	f003 021f 	and.w	r2, r3, #31
 800261c:	4906      	ldr	r1, [pc, #24]	; (8002638 <__NVIC_EnableIRQ+0x34>)
 800261e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	2001      	movs	r0, #1
 8002626:	fa00 f202 	lsl.w	r2, r0, r2
 800262a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	e000e100 	.word	0xe000e100

0800263c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	6039      	str	r1, [r7, #0]
 8002646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264c:	2b00      	cmp	r3, #0
 800264e:	db0a      	blt.n	8002666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	490c      	ldr	r1, [pc, #48]	; (8002688 <__NVIC_SetPriority+0x4c>)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	0112      	lsls	r2, r2, #4
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	440b      	add	r3, r1
 8002660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002664:	e00a      	b.n	800267c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4908      	ldr	r1, [pc, #32]	; (800268c <__NVIC_SetPriority+0x50>)
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	3b04      	subs	r3, #4
 8002674:	0112      	lsls	r2, r2, #4
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	440b      	add	r3, r1
 800267a:	761a      	strb	r2, [r3, #24]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	e000e100 	.word	0xe000e100
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002690:	b480      	push	{r7}
 8002692:	b089      	sub	sp, #36	; 0x24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f1c3 0307 	rsb	r3, r3, #7
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	bf28      	it	cs
 80026ae:	2304      	movcs	r3, #4
 80026b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3304      	adds	r3, #4
 80026b6:	2b06      	cmp	r3, #6
 80026b8:	d902      	bls.n	80026c0 <NVIC_EncodePriority+0x30>
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3b03      	subs	r3, #3
 80026be:	e000      	b.n	80026c2 <NVIC_EncodePriority+0x32>
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c4:	f04f 32ff 	mov.w	r2, #4294967295
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43da      	mvns	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	401a      	ands	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d8:	f04f 31ff 	mov.w	r1, #4294967295
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	fa01 f303 	lsl.w	r3, r1, r3
 80026e2:	43d9      	mvns	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e8:	4313      	orrs	r3, r2
         );
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3724      	adds	r7, #36	; 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3b01      	subs	r3, #1
 8002700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002704:	d301      	bcc.n	800270a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002706:	2301      	movs	r3, #1
 8002708:	e00f      	b.n	800272a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800270a:	4a0a      	ldr	r2, [pc, #40]	; (8002734 <SysTick_Config+0x40>)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3b01      	subs	r3, #1
 8002710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002712:	210f      	movs	r1, #15
 8002714:	f04f 30ff 	mov.w	r0, #4294967295
 8002718:	f7ff ff90 	bl	800263c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800271c:	4b05      	ldr	r3, [pc, #20]	; (8002734 <SysTick_Config+0x40>)
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002722:	4b04      	ldr	r3, [pc, #16]	; (8002734 <SysTick_Config+0x40>)
 8002724:	2207      	movs	r2, #7
 8002726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	e000e010 	.word	0xe000e010

08002738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff ff2d 	bl	80025a0 <__NVIC_SetPriorityGrouping>
}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800274e:	b580      	push	{r7, lr}
 8002750:	b086      	sub	sp, #24
 8002752:	af00      	add	r7, sp, #0
 8002754:	4603      	mov	r3, r0
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
 800275a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002760:	f7ff ff42 	bl	80025e8 <__NVIC_GetPriorityGrouping>
 8002764:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	6978      	ldr	r0, [r7, #20]
 800276c:	f7ff ff90 	bl	8002690 <NVIC_EncodePriority>
 8002770:	4602      	mov	r2, r0
 8002772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff5f 	bl	800263c <__NVIC_SetPriority>
}
 800277e:	bf00      	nop
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff ff35 	bl	8002604 <__NVIC_EnableIRQ>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff ffa2 	bl	80026f4 <SysTick_Config>
 80027b0:	4603      	mov	r3, r0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027bc:	b480      	push	{r7}
 80027be:	b08b      	sub	sp, #44	; 0x2c
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027c6:	2300      	movs	r3, #0
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027ca:	2300      	movs	r3, #0
 80027cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ce:	e148      	b.n	8002a62 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027d0:	2201      	movs	r2, #1
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	69fa      	ldr	r2, [r7, #28]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	f040 8137 	bne.w	8002a5c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	4aa3      	ldr	r2, [pc, #652]	; (8002a80 <HAL_GPIO_Init+0x2c4>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d05e      	beq.n	80028b6 <HAL_GPIO_Init+0xfa>
 80027f8:	4aa1      	ldr	r2, [pc, #644]	; (8002a80 <HAL_GPIO_Init+0x2c4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d875      	bhi.n	80028ea <HAL_GPIO_Init+0x12e>
 80027fe:	4aa1      	ldr	r2, [pc, #644]	; (8002a84 <HAL_GPIO_Init+0x2c8>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d058      	beq.n	80028b6 <HAL_GPIO_Init+0xfa>
 8002804:	4a9f      	ldr	r2, [pc, #636]	; (8002a84 <HAL_GPIO_Init+0x2c8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d86f      	bhi.n	80028ea <HAL_GPIO_Init+0x12e>
 800280a:	4a9f      	ldr	r2, [pc, #636]	; (8002a88 <HAL_GPIO_Init+0x2cc>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d052      	beq.n	80028b6 <HAL_GPIO_Init+0xfa>
 8002810:	4a9d      	ldr	r2, [pc, #628]	; (8002a88 <HAL_GPIO_Init+0x2cc>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d869      	bhi.n	80028ea <HAL_GPIO_Init+0x12e>
 8002816:	4a9d      	ldr	r2, [pc, #628]	; (8002a8c <HAL_GPIO_Init+0x2d0>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d04c      	beq.n	80028b6 <HAL_GPIO_Init+0xfa>
 800281c:	4a9b      	ldr	r2, [pc, #620]	; (8002a8c <HAL_GPIO_Init+0x2d0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d863      	bhi.n	80028ea <HAL_GPIO_Init+0x12e>
 8002822:	4a9b      	ldr	r2, [pc, #620]	; (8002a90 <HAL_GPIO_Init+0x2d4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d046      	beq.n	80028b6 <HAL_GPIO_Init+0xfa>
 8002828:	4a99      	ldr	r2, [pc, #612]	; (8002a90 <HAL_GPIO_Init+0x2d4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d85d      	bhi.n	80028ea <HAL_GPIO_Init+0x12e>
 800282e:	2b12      	cmp	r3, #18
 8002830:	d82a      	bhi.n	8002888 <HAL_GPIO_Init+0xcc>
 8002832:	2b12      	cmp	r3, #18
 8002834:	d859      	bhi.n	80028ea <HAL_GPIO_Init+0x12e>
 8002836:	a201      	add	r2, pc, #4	; (adr r2, 800283c <HAL_GPIO_Init+0x80>)
 8002838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283c:	080028b7 	.word	0x080028b7
 8002840:	08002891 	.word	0x08002891
 8002844:	080028a3 	.word	0x080028a3
 8002848:	080028e5 	.word	0x080028e5
 800284c:	080028eb 	.word	0x080028eb
 8002850:	080028eb 	.word	0x080028eb
 8002854:	080028eb 	.word	0x080028eb
 8002858:	080028eb 	.word	0x080028eb
 800285c:	080028eb 	.word	0x080028eb
 8002860:	080028eb 	.word	0x080028eb
 8002864:	080028eb 	.word	0x080028eb
 8002868:	080028eb 	.word	0x080028eb
 800286c:	080028eb 	.word	0x080028eb
 8002870:	080028eb 	.word	0x080028eb
 8002874:	080028eb 	.word	0x080028eb
 8002878:	080028eb 	.word	0x080028eb
 800287c:	080028eb 	.word	0x080028eb
 8002880:	08002899 	.word	0x08002899
 8002884:	080028ad 	.word	0x080028ad
 8002888:	4a82      	ldr	r2, [pc, #520]	; (8002a94 <HAL_GPIO_Init+0x2d8>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d013      	beq.n	80028b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800288e:	e02c      	b.n	80028ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	623b      	str	r3, [r7, #32]
          break;
 8002896:	e029      	b.n	80028ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	3304      	adds	r3, #4
 800289e:	623b      	str	r3, [r7, #32]
          break;
 80028a0:	e024      	b.n	80028ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	3308      	adds	r3, #8
 80028a8:	623b      	str	r3, [r7, #32]
          break;
 80028aa:	e01f      	b.n	80028ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	330c      	adds	r3, #12
 80028b2:	623b      	str	r3, [r7, #32]
          break;
 80028b4:	e01a      	b.n	80028ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d102      	bne.n	80028c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028be:	2304      	movs	r3, #4
 80028c0:	623b      	str	r3, [r7, #32]
          break;
 80028c2:	e013      	b.n	80028ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d105      	bne.n	80028d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028cc:	2308      	movs	r3, #8
 80028ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	611a      	str	r2, [r3, #16]
          break;
 80028d6:	e009      	b.n	80028ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028d8:	2308      	movs	r3, #8
 80028da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	615a      	str	r2, [r3, #20]
          break;
 80028e2:	e003      	b.n	80028ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028e4:	2300      	movs	r3, #0
 80028e6:	623b      	str	r3, [r7, #32]
          break;
 80028e8:	e000      	b.n	80028ec <HAL_GPIO_Init+0x130>
          break;
 80028ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	2bff      	cmp	r3, #255	; 0xff
 80028f0:	d801      	bhi.n	80028f6 <HAL_GPIO_Init+0x13a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	e001      	b.n	80028fa <HAL_GPIO_Init+0x13e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3304      	adds	r3, #4
 80028fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	2bff      	cmp	r3, #255	; 0xff
 8002900:	d802      	bhi.n	8002908 <HAL_GPIO_Init+0x14c>
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	e002      	b.n	800290e <HAL_GPIO_Init+0x152>
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	3b08      	subs	r3, #8
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	210f      	movs	r1, #15
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	fa01 f303 	lsl.w	r3, r1, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	401a      	ands	r2, r3
 8002920:	6a39      	ldr	r1, [r7, #32]
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	fa01 f303 	lsl.w	r3, r1, r3
 8002928:	431a      	orrs	r2, r3
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 8090 	beq.w	8002a5c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800293c:	4b56      	ldr	r3, [pc, #344]	; (8002a98 <HAL_GPIO_Init+0x2dc>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	4a55      	ldr	r2, [pc, #340]	; (8002a98 <HAL_GPIO_Init+0x2dc>)
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	6193      	str	r3, [r2, #24]
 8002948:	4b53      	ldr	r3, [pc, #332]	; (8002a98 <HAL_GPIO_Init+0x2dc>)
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002954:	4a51      	ldr	r2, [pc, #324]	; (8002a9c <HAL_GPIO_Init+0x2e0>)
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	089b      	lsrs	r3, r3, #2
 800295a:	3302      	adds	r3, #2
 800295c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002960:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	220f      	movs	r2, #15
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4013      	ands	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a49      	ldr	r2, [pc, #292]	; (8002aa0 <HAL_GPIO_Init+0x2e4>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d00d      	beq.n	800299c <HAL_GPIO_Init+0x1e0>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a48      	ldr	r2, [pc, #288]	; (8002aa4 <HAL_GPIO_Init+0x2e8>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d007      	beq.n	8002998 <HAL_GPIO_Init+0x1dc>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a47      	ldr	r2, [pc, #284]	; (8002aa8 <HAL_GPIO_Init+0x2ec>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d101      	bne.n	8002994 <HAL_GPIO_Init+0x1d8>
 8002990:	2302      	movs	r3, #2
 8002992:	e004      	b.n	800299e <HAL_GPIO_Init+0x1e2>
 8002994:	2303      	movs	r3, #3
 8002996:	e002      	b.n	800299e <HAL_GPIO_Init+0x1e2>
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <HAL_GPIO_Init+0x1e2>
 800299c:	2300      	movs	r3, #0
 800299e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a0:	f002 0203 	and.w	r2, r2, #3
 80029a4:	0092      	lsls	r2, r2, #2
 80029a6:	4093      	lsls	r3, r2
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029ae:	493b      	ldr	r1, [pc, #236]	; (8002a9c <HAL_GPIO_Init+0x2e0>)
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	089b      	lsrs	r3, r3, #2
 80029b4:	3302      	adds	r3, #2
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d006      	beq.n	80029d6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029c8:	4b38      	ldr	r3, [pc, #224]	; (8002aac <HAL_GPIO_Init+0x2f0>)
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	4937      	ldr	r1, [pc, #220]	; (8002aac <HAL_GPIO_Init+0x2f0>)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	608b      	str	r3, [r1, #8]
 80029d4:	e006      	b.n	80029e4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029d6:	4b35      	ldr	r3, [pc, #212]	; (8002aac <HAL_GPIO_Init+0x2f0>)
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	43db      	mvns	r3, r3
 80029de:	4933      	ldr	r1, [pc, #204]	; (8002aac <HAL_GPIO_Init+0x2f0>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d006      	beq.n	80029fe <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029f0:	4b2e      	ldr	r3, [pc, #184]	; (8002aac <HAL_GPIO_Init+0x2f0>)
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	492d      	ldr	r1, [pc, #180]	; (8002aac <HAL_GPIO_Init+0x2f0>)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	60cb      	str	r3, [r1, #12]
 80029fc:	e006      	b.n	8002a0c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029fe:	4b2b      	ldr	r3, [pc, #172]	; (8002aac <HAL_GPIO_Init+0x2f0>)
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	43db      	mvns	r3, r3
 8002a06:	4929      	ldr	r1, [pc, #164]	; (8002aac <HAL_GPIO_Init+0x2f0>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d006      	beq.n	8002a26 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a18:	4b24      	ldr	r3, [pc, #144]	; (8002aac <HAL_GPIO_Init+0x2f0>)
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	4923      	ldr	r1, [pc, #140]	; (8002aac <HAL_GPIO_Init+0x2f0>)
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	604b      	str	r3, [r1, #4]
 8002a24:	e006      	b.n	8002a34 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a26:	4b21      	ldr	r3, [pc, #132]	; (8002aac <HAL_GPIO_Init+0x2f0>)
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	491f      	ldr	r1, [pc, #124]	; (8002aac <HAL_GPIO_Init+0x2f0>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d006      	beq.n	8002a4e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a40:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <HAL_GPIO_Init+0x2f0>)
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	4919      	ldr	r1, [pc, #100]	; (8002aac <HAL_GPIO_Init+0x2f0>)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	600b      	str	r3, [r1, #0]
 8002a4c:	e006      	b.n	8002a5c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a4e:	4b17      	ldr	r3, [pc, #92]	; (8002aac <HAL_GPIO_Init+0x2f0>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	43db      	mvns	r3, r3
 8002a56:	4915      	ldr	r1, [pc, #84]	; (8002aac <HAL_GPIO_Init+0x2f0>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	3301      	adds	r3, #1
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f47f aeaf 	bne.w	80027d0 <HAL_GPIO_Init+0x14>
  }
}
 8002a72:	bf00      	nop
 8002a74:	bf00      	nop
 8002a76:	372c      	adds	r7, #44	; 0x2c
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	10320000 	.word	0x10320000
 8002a84:	10310000 	.word	0x10310000
 8002a88:	10220000 	.word	0x10220000
 8002a8c:	10210000 	.word	0x10210000
 8002a90:	10120000 	.word	0x10120000
 8002a94:	10110000 	.word	0x10110000
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40010000 	.word	0x40010000
 8002aa0:	40010800 	.word	0x40010800
 8002aa4:	40010c00 	.word	0x40010c00
 8002aa8:	40011000 	.word	0x40011000
 8002aac:	40010400 	.word	0x40010400

08002ab0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	887b      	ldrh	r3, [r7, #2]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
 8002acc:	e001      	b.n	8002ad2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr

08002ade <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	807b      	strh	r3, [r7, #2]
 8002aea:	4613      	mov	r3, r2
 8002aec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002aee:	787b      	ldrb	r3, [r7, #1]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002af4:	887a      	ldrh	r2, [r7, #2]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002afa:	e003      	b.n	8002b04 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002afc:	887b      	ldrh	r3, [r7, #2]
 8002afe:	041a      	lsls	r2, r3, #16
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	611a      	str	r2, [r3, #16]
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b085      	sub	sp, #20
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	460b      	mov	r3, r1
 8002b18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b20:	887a      	ldrh	r2, [r7, #2]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4013      	ands	r3, r2
 8002b26:	041a      	lsls	r2, r3, #16
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	43d9      	mvns	r1, r3
 8002b2c:	887b      	ldrh	r3, [r7, #2]
 8002b2e:	400b      	ands	r3, r1
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	611a      	str	r2, [r3, #16]
}
 8002b36:	bf00      	nop
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr

08002b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e26c      	b.n	800302c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 8087 	beq.w	8002c6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b60:	4b92      	ldr	r3, [pc, #584]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 030c 	and.w	r3, r3, #12
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d00c      	beq.n	8002b86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b6c:	4b8f      	ldr	r3, [pc, #572]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 030c 	and.w	r3, r3, #12
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d112      	bne.n	8002b9e <HAL_RCC_OscConfig+0x5e>
 8002b78:	4b8c      	ldr	r3, [pc, #560]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b84:	d10b      	bne.n	8002b9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b86:	4b89      	ldr	r3, [pc, #548]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d06c      	beq.n	8002c6c <HAL_RCC_OscConfig+0x12c>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d168      	bne.n	8002c6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e246      	b.n	800302c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba6:	d106      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x76>
 8002ba8:	4b80      	ldr	r3, [pc, #512]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a7f      	ldr	r2, [pc, #508]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	e02e      	b.n	8002c14 <HAL_RCC_OscConfig+0xd4>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10c      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x98>
 8002bbe:	4b7b      	ldr	r3, [pc, #492]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a7a      	ldr	r2, [pc, #488]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	4b78      	ldr	r3, [pc, #480]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a77      	ldr	r2, [pc, #476]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	e01d      	b.n	8002c14 <HAL_RCC_OscConfig+0xd4>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0xbc>
 8002be2:	4b72      	ldr	r3, [pc, #456]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a71      	ldr	r2, [pc, #452]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	4b6f      	ldr	r3, [pc, #444]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a6e      	ldr	r2, [pc, #440]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e00b      	b.n	8002c14 <HAL_RCC_OscConfig+0xd4>
 8002bfc:	4b6b      	ldr	r3, [pc, #428]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a6a      	ldr	r2, [pc, #424]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	4b68      	ldr	r3, [pc, #416]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a67      	ldr	r2, [pc, #412]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d013      	beq.n	8002c44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1c:	f7ff fcb6 	bl	800258c <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c24:	f7ff fcb2 	bl	800258c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	; 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e1fa      	b.n	800302c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	4b5d      	ldr	r3, [pc, #372]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0xe4>
 8002c42:	e014      	b.n	8002c6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c44:	f7ff fca2 	bl	800258c <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c4c:	f7ff fc9e 	bl	800258c <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	; 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e1e6      	b.n	800302c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5e:	4b53      	ldr	r3, [pc, #332]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x10c>
 8002c6a:	e000      	b.n	8002c6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d063      	beq.n	8002d42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c7a:	4b4c      	ldr	r3, [pc, #304]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00b      	beq.n	8002c9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c86:	4b49      	ldr	r3, [pc, #292]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d11c      	bne.n	8002ccc <HAL_RCC_OscConfig+0x18c>
 8002c92:	4b46      	ldr	r3, [pc, #280]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d116      	bne.n	8002ccc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9e:	4b43      	ldr	r3, [pc, #268]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d005      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x176>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d001      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e1ba      	b.n	800302c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb6:	4b3d      	ldr	r3, [pc, #244]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4939      	ldr	r1, [pc, #228]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cca:	e03a      	b.n	8002d42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d020      	beq.n	8002d16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd4:	4b36      	ldr	r3, [pc, #216]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cda:	f7ff fc57 	bl	800258c <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce2:	f7ff fc53 	bl	800258c <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e19b      	b.n	800302c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf4:	4b2d      	ldr	r3, [pc, #180]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d00:	4b2a      	ldr	r3, [pc, #168]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4927      	ldr	r1, [pc, #156]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	600b      	str	r3, [r1, #0]
 8002d14:	e015      	b.n	8002d42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d16:	4b26      	ldr	r3, [pc, #152]	; (8002db0 <HAL_RCC_OscConfig+0x270>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7ff fc36 	bl	800258c <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d24:	f7ff fc32 	bl	800258c <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e17a      	b.n	800302c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d36:	4b1d      	ldr	r3, [pc, #116]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d03a      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d019      	beq.n	8002d8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d56:	4b17      	ldr	r3, [pc, #92]	; (8002db4 <HAL_RCC_OscConfig+0x274>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5c:	f7ff fc16 	bl	800258c <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d64:	f7ff fc12 	bl	800258c <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e15a      	b.n	800302c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d76:	4b0d      	ldr	r3, [pc, #52]	; (8002dac <HAL_RCC_OscConfig+0x26c>)
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d82:	2001      	movs	r0, #1
 8002d84:	f000 fa9a 	bl	80032bc <RCC_Delay>
 8002d88:	e01c      	b.n	8002dc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d8a:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <HAL_RCC_OscConfig+0x274>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d90:	f7ff fbfc 	bl	800258c <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d96:	e00f      	b.n	8002db8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d98:	f7ff fbf8 	bl	800258c <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d908      	bls.n	8002db8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e140      	b.n	800302c <HAL_RCC_OscConfig+0x4ec>
 8002daa:	bf00      	nop
 8002dac:	40021000 	.word	0x40021000
 8002db0:	42420000 	.word	0x42420000
 8002db4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db8:	4b9e      	ldr	r3, [pc, #632]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1e9      	bne.n	8002d98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 80a6 	beq.w	8002f1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dd6:	4b97      	ldr	r3, [pc, #604]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10d      	bne.n	8002dfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de2:	4b94      	ldr	r3, [pc, #592]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	4a93      	ldr	r2, [pc, #588]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dec:	61d3      	str	r3, [r2, #28]
 8002dee:	4b91      	ldr	r3, [pc, #580]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfe:	4b8e      	ldr	r3, [pc, #568]	; (8003038 <HAL_RCC_OscConfig+0x4f8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d118      	bne.n	8002e3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e0a:	4b8b      	ldr	r3, [pc, #556]	; (8003038 <HAL_RCC_OscConfig+0x4f8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a8a      	ldr	r2, [pc, #552]	; (8003038 <HAL_RCC_OscConfig+0x4f8>)
 8002e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e16:	f7ff fbb9 	bl	800258c <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e1e:	f7ff fbb5 	bl	800258c <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b64      	cmp	r3, #100	; 0x64
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e0fd      	b.n	800302c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e30:	4b81      	ldr	r3, [pc, #516]	; (8003038 <HAL_RCC_OscConfig+0x4f8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d106      	bne.n	8002e52 <HAL_RCC_OscConfig+0x312>
 8002e44:	4b7b      	ldr	r3, [pc, #492]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	4a7a      	ldr	r2, [pc, #488]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6213      	str	r3, [r2, #32]
 8002e50:	e02d      	b.n	8002eae <HAL_RCC_OscConfig+0x36e>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10c      	bne.n	8002e74 <HAL_RCC_OscConfig+0x334>
 8002e5a:	4b76      	ldr	r3, [pc, #472]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	4a75      	ldr	r2, [pc, #468]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002e60:	f023 0301 	bic.w	r3, r3, #1
 8002e64:	6213      	str	r3, [r2, #32]
 8002e66:	4b73      	ldr	r3, [pc, #460]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	4a72      	ldr	r2, [pc, #456]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002e6c:	f023 0304 	bic.w	r3, r3, #4
 8002e70:	6213      	str	r3, [r2, #32]
 8002e72:	e01c      	b.n	8002eae <HAL_RCC_OscConfig+0x36e>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	2b05      	cmp	r3, #5
 8002e7a:	d10c      	bne.n	8002e96 <HAL_RCC_OscConfig+0x356>
 8002e7c:	4b6d      	ldr	r3, [pc, #436]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	4a6c      	ldr	r2, [pc, #432]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002e82:	f043 0304 	orr.w	r3, r3, #4
 8002e86:	6213      	str	r3, [r2, #32]
 8002e88:	4b6a      	ldr	r3, [pc, #424]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4a69      	ldr	r2, [pc, #420]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	6213      	str	r3, [r2, #32]
 8002e94:	e00b      	b.n	8002eae <HAL_RCC_OscConfig+0x36e>
 8002e96:	4b67      	ldr	r3, [pc, #412]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	4a66      	ldr	r2, [pc, #408]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002e9c:	f023 0301 	bic.w	r3, r3, #1
 8002ea0:	6213      	str	r3, [r2, #32]
 8002ea2:	4b64      	ldr	r3, [pc, #400]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	4a63      	ldr	r2, [pc, #396]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002ea8:	f023 0304 	bic.w	r3, r3, #4
 8002eac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d015      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb6:	f7ff fb69 	bl	800258c <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ebc:	e00a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ebe:	f7ff fb65 	bl	800258c <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e0ab      	b.n	800302c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed4:	4b57      	ldr	r3, [pc, #348]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0ee      	beq.n	8002ebe <HAL_RCC_OscConfig+0x37e>
 8002ee0:	e014      	b.n	8002f0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee2:	f7ff fb53 	bl	800258c <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee8:	e00a      	b.n	8002f00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eea:	f7ff fb4f 	bl	800258c <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e095      	b.n	800302c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f00:	4b4c      	ldr	r3, [pc, #304]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1ee      	bne.n	8002eea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d105      	bne.n	8002f1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f12:	4b48      	ldr	r3, [pc, #288]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	4a47      	ldr	r2, [pc, #284]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 8081 	beq.w	800302a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f28:	4b42      	ldr	r3, [pc, #264]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 030c 	and.w	r3, r3, #12
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d061      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d146      	bne.n	8002fca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3c:	4b3f      	ldr	r3, [pc, #252]	; (800303c <HAL_RCC_OscConfig+0x4fc>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f42:	f7ff fb23 	bl	800258c <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f4a:	f7ff fb1f 	bl	800258c <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e067      	b.n	800302c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f5c:	4b35      	ldr	r3, [pc, #212]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1f0      	bne.n	8002f4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f70:	d108      	bne.n	8002f84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f72:	4b30      	ldr	r3, [pc, #192]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	492d      	ldr	r1, [pc, #180]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f84:	4b2b      	ldr	r3, [pc, #172]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a19      	ldr	r1, [r3, #32]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	430b      	orrs	r3, r1
 8002f96:	4927      	ldr	r1, [pc, #156]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f9c:	4b27      	ldr	r3, [pc, #156]	; (800303c <HAL_RCC_OscConfig+0x4fc>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa2:	f7ff faf3 	bl	800258c <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002faa:	f7ff faef 	bl	800258c <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e037      	b.n	800302c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fbc:	4b1d      	ldr	r3, [pc, #116]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x46a>
 8002fc8:	e02f      	b.n	800302a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fca:	4b1c      	ldr	r3, [pc, #112]	; (800303c <HAL_RCC_OscConfig+0x4fc>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7ff fadc 	bl	800258c <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd8:	f7ff fad8 	bl	800258c <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e020      	b.n	800302c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fea:	4b12      	ldr	r3, [pc, #72]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x498>
 8002ff6:	e018      	b.n	800302a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e013      	b.n	800302c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003004:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <HAL_RCC_OscConfig+0x4f4>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	429a      	cmp	r2, r3
 8003016:	d106      	bne.n	8003026 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003022:	429a      	cmp	r2, r3
 8003024:	d001      	beq.n	800302a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40021000 	.word	0x40021000
 8003038:	40007000 	.word	0x40007000
 800303c:	42420060 	.word	0x42420060

08003040 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0d0      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003054:	4b6a      	ldr	r3, [pc, #424]	; (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d910      	bls.n	8003084 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003062:	4b67      	ldr	r3, [pc, #412]	; (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f023 0207 	bic.w	r2, r3, #7
 800306a:	4965      	ldr	r1, [pc, #404]	; (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	4313      	orrs	r3, r2
 8003070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003072:	4b63      	ldr	r3, [pc, #396]	; (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0b8      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d020      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800309c:	4b59      	ldr	r3, [pc, #356]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	4a58      	ldr	r2, [pc, #352]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80030a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030b4:	4b53      	ldr	r3, [pc, #332]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	4a52      	ldr	r2, [pc, #328]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80030ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c0:	4b50      	ldr	r3, [pc, #320]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	494d      	ldr	r1, [pc, #308]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d040      	beq.n	8003160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d107      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e6:	4b47      	ldr	r3, [pc, #284]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d115      	bne.n	800311e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e07f      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d107      	bne.n	800310e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030fe:	4b41      	ldr	r3, [pc, #260]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d109      	bne.n	800311e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e073      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310e:	4b3d      	ldr	r3, [pc, #244]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e06b      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800311e:	4b39      	ldr	r3, [pc, #228]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f023 0203 	bic.w	r2, r3, #3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	4936      	ldr	r1, [pc, #216]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	4313      	orrs	r3, r2
 800312e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003130:	f7ff fa2c 	bl	800258c <HAL_GetTick>
 8003134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003136:	e00a      	b.n	800314e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003138:	f7ff fa28 	bl	800258c <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	f241 3288 	movw	r2, #5000	; 0x1388
 8003146:	4293      	cmp	r3, r2
 8003148:	d901      	bls.n	800314e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e053      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314e:	4b2d      	ldr	r3, [pc, #180]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f003 020c 	and.w	r2, r3, #12
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	429a      	cmp	r2, r3
 800315e:	d1eb      	bne.n	8003138 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003160:	4b27      	ldr	r3, [pc, #156]	; (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d210      	bcs.n	8003190 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316e:	4b24      	ldr	r3, [pc, #144]	; (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f023 0207 	bic.w	r2, r3, #7
 8003176:	4922      	ldr	r1, [pc, #136]	; (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	4313      	orrs	r3, r2
 800317c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800317e:	4b20      	ldr	r3, [pc, #128]	; (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	d001      	beq.n	8003190 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e032      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800319c:	4b19      	ldr	r3, [pc, #100]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	4916      	ldr	r1, [pc, #88]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031ba:	4b12      	ldr	r3, [pc, #72]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	490e      	ldr	r1, [pc, #56]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031ce:	f000 f821 	bl	8003214 <HAL_RCC_GetSysClockFreq>
 80031d2:	4602      	mov	r2, r0
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	091b      	lsrs	r3, r3, #4
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	490a      	ldr	r1, [pc, #40]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80031e0:	5ccb      	ldrb	r3, [r1, r3]
 80031e2:	fa22 f303 	lsr.w	r3, r2, r3
 80031e6:	4a09      	ldr	r2, [pc, #36]	; (800320c <HAL_RCC_ClockConfig+0x1cc>)
 80031e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031ea:	4b09      	ldr	r3, [pc, #36]	; (8003210 <HAL_RCC_ClockConfig+0x1d0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff f98a 	bl	8002508 <HAL_InitTick>

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40022000 	.word	0x40022000
 8003204:	40021000 	.word	0x40021000
 8003208:	08003b20 	.word	0x08003b20
 800320c:	2000007c 	.word	0x2000007c
 8003210:	20000080 	.word	0x20000080

08003214 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003214:	b480      	push	{r7}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	2300      	movs	r3, #0
 8003220:	60bb      	str	r3, [r7, #8]
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	2300      	movs	r3, #0
 8003228:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800322a:	2300      	movs	r3, #0
 800322c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800322e:	4b1e      	ldr	r3, [pc, #120]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 030c 	and.w	r3, r3, #12
 800323a:	2b04      	cmp	r3, #4
 800323c:	d002      	beq.n	8003244 <HAL_RCC_GetSysClockFreq+0x30>
 800323e:	2b08      	cmp	r3, #8
 8003240:	d003      	beq.n	800324a <HAL_RCC_GetSysClockFreq+0x36>
 8003242:	e027      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003244:	4b19      	ldr	r3, [pc, #100]	; (80032ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003246:	613b      	str	r3, [r7, #16]
      break;
 8003248:	e027      	b.n	800329a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	0c9b      	lsrs	r3, r3, #18
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	4a17      	ldr	r2, [pc, #92]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003254:	5cd3      	ldrb	r3, [r2, r3]
 8003256:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d010      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003262:	4b11      	ldr	r3, [pc, #68]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	0c5b      	lsrs	r3, r3, #17
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	4a11      	ldr	r2, [pc, #68]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800326e:	5cd3      	ldrb	r3, [r2, r3]
 8003270:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a0d      	ldr	r2, [pc, #52]	; (80032ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003276:	fb02 f203 	mul.w	r2, r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003280:	617b      	str	r3, [r7, #20]
 8003282:	e004      	b.n	800328e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a0c      	ldr	r2, [pc, #48]	; (80032b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003288:	fb02 f303 	mul.w	r3, r2, r3
 800328c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	613b      	str	r3, [r7, #16]
      break;
 8003292:	e002      	b.n	800329a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003296:	613b      	str	r3, [r7, #16]
      break;
 8003298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800329a:	693b      	ldr	r3, [r7, #16]
}
 800329c:	4618      	mov	r0, r3
 800329e:	371c      	adds	r7, #28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40021000 	.word	0x40021000
 80032ac:	007a1200 	.word	0x007a1200
 80032b0:	08003b30 	.word	0x08003b30
 80032b4:	08003b40 	.word	0x08003b40
 80032b8:	003d0900 	.word	0x003d0900

080032bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032c4:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <RCC_Delay+0x34>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a0a      	ldr	r2, [pc, #40]	; (80032f4 <RCC_Delay+0x38>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	0a5b      	lsrs	r3, r3, #9
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	fb02 f303 	mul.w	r3, r2, r3
 80032d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032d8:	bf00      	nop
  }
  while (Delay --);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1e5a      	subs	r2, r3, #1
 80032de:	60fa      	str	r2, [r7, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f9      	bne.n	80032d8 <RCC_Delay+0x1c>
}
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr
 80032f0:	2000007c 	.word	0x2000007c
 80032f4:	10624dd3 	.word	0x10624dd3

080032f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e041      	b.n	800338e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7ff f85a 	bl	80023d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3304      	adds	r3, #4
 8003334:	4619      	mov	r1, r3
 8003336:	4610      	mov	r0, r2
 8003338:	f000 fa56 	bl	80037e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d001      	beq.n	80033b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e035      	b.n	800341c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2202      	movs	r2, #2
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a16      	ldr	r2, [pc, #88]	; (8003428 <HAL_TIM_Base_Start_IT+0x90>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d009      	beq.n	80033e6 <HAL_TIM_Base_Start_IT+0x4e>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033da:	d004      	beq.n	80033e6 <HAL_TIM_Base_Start_IT+0x4e>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a12      	ldr	r2, [pc, #72]	; (800342c <HAL_TIM_Base_Start_IT+0x94>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d111      	bne.n	800340a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2b06      	cmp	r3, #6
 80033f6:	d010      	beq.n	800341a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0201 	orr.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003408:	e007      	b.n	800341a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f042 0201 	orr.w	r2, r2, #1
 8003418:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40012c00 	.word	0x40012c00
 800342c:	40000400 	.word	0x40000400

08003430 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d020      	beq.n	8003494 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d01b      	beq.n	8003494 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0202 	mvn.w	r2, #2
 8003464:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f998 	bl	80037b0 <HAL_TIM_IC_CaptureCallback>
 8003480:	e005      	b.n	800348e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f98b 	bl	800379e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f99a 	bl	80037c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f003 0304 	and.w	r3, r3, #4
 800349a:	2b00      	cmp	r3, #0
 800349c:	d020      	beq.n	80034e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01b      	beq.n	80034e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f06f 0204 	mvn.w	r2, #4
 80034b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2202      	movs	r2, #2
 80034b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f972 	bl	80037b0 <HAL_TIM_IC_CaptureCallback>
 80034cc:	e005      	b.n	80034da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f965 	bl	800379e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f974 	bl	80037c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d020      	beq.n	800352c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d01b      	beq.n	800352c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f06f 0208 	mvn.w	r2, #8
 80034fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2204      	movs	r2, #4
 8003502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f94c 	bl	80037b0 <HAL_TIM_IC_CaptureCallback>
 8003518:	e005      	b.n	8003526 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f93f 	bl	800379e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f94e 	bl	80037c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f003 0310 	and.w	r3, r3, #16
 8003532:	2b00      	cmp	r3, #0
 8003534:	d020      	beq.n	8003578 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f003 0310 	and.w	r3, r3, #16
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01b      	beq.n	8003578 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f06f 0210 	mvn.w	r2, #16
 8003548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2208      	movs	r2, #8
 800354e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f926 	bl	80037b0 <HAL_TIM_IC_CaptureCallback>
 8003564:	e005      	b.n	8003572 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f919 	bl	800379e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f928 	bl	80037c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00c      	beq.n	800359c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d007      	beq.n	800359c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f06f 0201 	mvn.w	r2, #1
 8003594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fe fd8c 	bl	80020b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00c      	beq.n	80035c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d007      	beq.n	80035c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 fa6f 	bl	8003a9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00c      	beq.n	80035e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d007      	beq.n	80035e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f8f8 	bl	80037d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00c      	beq.n	8003608 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f003 0320 	and.w	r3, r3, #32
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d007      	beq.n	8003608 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0220 	mvn.w	r2, #32
 8003600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fa42 	bl	8003a8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003608:	bf00      	nop
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_TIM_ConfigClockSource+0x1c>
 8003628:	2302      	movs	r3, #2
 800362a:	e0b4      	b.n	8003796 <HAL_TIM_ConfigClockSource+0x186>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800364a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003652:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003664:	d03e      	beq.n	80036e4 <HAL_TIM_ConfigClockSource+0xd4>
 8003666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800366a:	f200 8087 	bhi.w	800377c <HAL_TIM_ConfigClockSource+0x16c>
 800366e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003672:	f000 8086 	beq.w	8003782 <HAL_TIM_ConfigClockSource+0x172>
 8003676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800367a:	d87f      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x16c>
 800367c:	2b70      	cmp	r3, #112	; 0x70
 800367e:	d01a      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0xa6>
 8003680:	2b70      	cmp	r3, #112	; 0x70
 8003682:	d87b      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x16c>
 8003684:	2b60      	cmp	r3, #96	; 0x60
 8003686:	d050      	beq.n	800372a <HAL_TIM_ConfigClockSource+0x11a>
 8003688:	2b60      	cmp	r3, #96	; 0x60
 800368a:	d877      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x16c>
 800368c:	2b50      	cmp	r3, #80	; 0x50
 800368e:	d03c      	beq.n	800370a <HAL_TIM_ConfigClockSource+0xfa>
 8003690:	2b50      	cmp	r3, #80	; 0x50
 8003692:	d873      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x16c>
 8003694:	2b40      	cmp	r3, #64	; 0x40
 8003696:	d058      	beq.n	800374a <HAL_TIM_ConfigClockSource+0x13a>
 8003698:	2b40      	cmp	r3, #64	; 0x40
 800369a:	d86f      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x16c>
 800369c:	2b30      	cmp	r3, #48	; 0x30
 800369e:	d064      	beq.n	800376a <HAL_TIM_ConfigClockSource+0x15a>
 80036a0:	2b30      	cmp	r3, #48	; 0x30
 80036a2:	d86b      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x16c>
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d060      	beq.n	800376a <HAL_TIM_ConfigClockSource+0x15a>
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	d867      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x16c>
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d05c      	beq.n	800376a <HAL_TIM_ConfigClockSource+0x15a>
 80036b0:	2b10      	cmp	r3, #16
 80036b2:	d05a      	beq.n	800376a <HAL_TIM_ConfigClockSource+0x15a>
 80036b4:	e062      	b.n	800377c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	6899      	ldr	r1, [r3, #8]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f000 f96a 	bl	800399e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	609a      	str	r2, [r3, #8]
      break;
 80036e2:	e04f      	b.n	8003784 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	6899      	ldr	r1, [r3, #8]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f000 f953 	bl	800399e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003706:	609a      	str	r2, [r3, #8]
      break;
 8003708:	e03c      	b.n	8003784 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	6859      	ldr	r1, [r3, #4]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	461a      	mov	r2, r3
 8003718:	f000 f8ca 	bl	80038b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2150      	movs	r1, #80	; 0x50
 8003722:	4618      	mov	r0, r3
 8003724:	f000 f921 	bl	800396a <TIM_ITRx_SetConfig>
      break;
 8003728:	e02c      	b.n	8003784 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6818      	ldr	r0, [r3, #0]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	6859      	ldr	r1, [r3, #4]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	461a      	mov	r2, r3
 8003738:	f000 f8e8 	bl	800390c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2160      	movs	r1, #96	; 0x60
 8003742:	4618      	mov	r0, r3
 8003744:	f000 f911 	bl	800396a <TIM_ITRx_SetConfig>
      break;
 8003748:	e01c      	b.n	8003784 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6818      	ldr	r0, [r3, #0]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	6859      	ldr	r1, [r3, #4]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	461a      	mov	r2, r3
 8003758:	f000 f8aa 	bl	80038b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2140      	movs	r1, #64	; 0x40
 8003762:	4618      	mov	r0, r3
 8003764:	f000 f901 	bl	800396a <TIM_ITRx_SetConfig>
      break;
 8003768:	e00c      	b.n	8003784 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4619      	mov	r1, r3
 8003774:	4610      	mov	r0, r2
 8003776:	f000 f8f8 	bl	800396a <TIM_ITRx_SetConfig>
      break;
 800377a:	e003      	b.n	8003784 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
      break;
 8003780:	e000      	b.n	8003784 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003782:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003794:	7bfb      	ldrb	r3, [r7, #15]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr

080037b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr

080037c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr

080037d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr
	...

080037e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a2b      	ldr	r2, [pc, #172]	; (80038a8 <TIM_Base_SetConfig+0xc0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d007      	beq.n	8003810 <TIM_Base_SetConfig+0x28>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003806:	d003      	beq.n	8003810 <TIM_Base_SetConfig+0x28>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a28      	ldr	r2, [pc, #160]	; (80038ac <TIM_Base_SetConfig+0xc4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d108      	bne.n	8003822 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a20      	ldr	r2, [pc, #128]	; (80038a8 <TIM_Base_SetConfig+0xc0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d007      	beq.n	800383a <TIM_Base_SetConfig+0x52>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003830:	d003      	beq.n	800383a <TIM_Base_SetConfig+0x52>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a1d      	ldr	r2, [pc, #116]	; (80038ac <TIM_Base_SetConfig+0xc4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d108      	bne.n	800384c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	4313      	orrs	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	4313      	orrs	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a0d      	ldr	r2, [pc, #52]	; (80038a8 <TIM_Base_SetConfig+0xc0>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d103      	bne.n	8003880 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f023 0201 	bic.w	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	611a      	str	r2, [r3, #16]
  }
}
 800389e:	bf00      	nop
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr
 80038a8:	40012c00 	.word	0x40012c00
 80038ac:	40000400 	.word	0x40000400

080038b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	f023 0201 	bic.w	r2, r3, #1
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f023 030a 	bic.w	r3, r3, #10
 80038ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	621a      	str	r2, [r3, #32]
}
 8003902:	bf00      	nop
 8003904:	371c      	adds	r7, #28
 8003906:	46bd      	mov	sp, r7
 8003908:	bc80      	pop	{r7}
 800390a:	4770      	bx	lr

0800390c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	f023 0210 	bic.w	r2, r3, #16
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	031b      	lsls	r3, r3, #12
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003948:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	4313      	orrs	r3, r2
 8003952:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	621a      	str	r2, [r3, #32]
}
 8003960:	bf00      	nop
 8003962:	371c      	adds	r7, #28
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr

0800396a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800396a:	b480      	push	{r7}
 800396c:	b085      	sub	sp, #20
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
 8003972:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003980:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	f043 0307 	orr.w	r3, r3, #7
 800398c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	609a      	str	r2, [r3, #8]
}
 8003994:	bf00      	nop
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr

0800399e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800399e:	b480      	push	{r7}
 80039a0:	b087      	sub	sp, #28
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	607a      	str	r2, [r7, #4]
 80039aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	021a      	lsls	r2, r3, #8
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	431a      	orrs	r2, r3
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	609a      	str	r2, [r3, #8]
}
 80039d2:	bf00      	nop
 80039d4:	371c      	adds	r7, #28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr

080039dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d101      	bne.n	80039f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039f0:	2302      	movs	r3, #2
 80039f2:	e041      	b.n	8003a78 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a14      	ldr	r2, [pc, #80]	; (8003a84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d009      	beq.n	8003a4c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a40:	d004      	beq.n	8003a4c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a10      	ldr	r2, [pc, #64]	; (8003a88 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d10c      	bne.n	8003a66 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bc80      	pop	{r7}
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40012c00 	.word	0x40012c00
 8003a88:	40000400 	.word	0x40000400

08003a8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bc80      	pop	{r7}
 8003a9c:	4770      	bx	lr

08003a9e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc80      	pop	{r7}
 8003aae:	4770      	bx	lr

08003ab0 <__libc_init_array>:
 8003ab0:	b570      	push	{r4, r5, r6, lr}
 8003ab2:	2600      	movs	r6, #0
 8003ab4:	4d0c      	ldr	r5, [pc, #48]	; (8003ae8 <__libc_init_array+0x38>)
 8003ab6:	4c0d      	ldr	r4, [pc, #52]	; (8003aec <__libc_init_array+0x3c>)
 8003ab8:	1b64      	subs	r4, r4, r5
 8003aba:	10a4      	asrs	r4, r4, #2
 8003abc:	42a6      	cmp	r6, r4
 8003abe:	d109      	bne.n	8003ad4 <__libc_init_array+0x24>
 8003ac0:	f000 f822 	bl	8003b08 <_init>
 8003ac4:	2600      	movs	r6, #0
 8003ac6:	4d0a      	ldr	r5, [pc, #40]	; (8003af0 <__libc_init_array+0x40>)
 8003ac8:	4c0a      	ldr	r4, [pc, #40]	; (8003af4 <__libc_init_array+0x44>)
 8003aca:	1b64      	subs	r4, r4, r5
 8003acc:	10a4      	asrs	r4, r4, #2
 8003ace:	42a6      	cmp	r6, r4
 8003ad0:	d105      	bne.n	8003ade <__libc_init_array+0x2e>
 8003ad2:	bd70      	pop	{r4, r5, r6, pc}
 8003ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad8:	4798      	blx	r3
 8003ada:	3601      	adds	r6, #1
 8003adc:	e7ee      	b.n	8003abc <__libc_init_array+0xc>
 8003ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae2:	4798      	blx	r3
 8003ae4:	3601      	adds	r6, #1
 8003ae6:	e7f2      	b.n	8003ace <__libc_init_array+0x1e>
 8003ae8:	08003b44 	.word	0x08003b44
 8003aec:	08003b44 	.word	0x08003b44
 8003af0:	08003b44 	.word	0x08003b44
 8003af4:	08003b48 	.word	0x08003b48

08003af8 <memset>:
 8003af8:	4603      	mov	r3, r0
 8003afa:	4402      	add	r2, r0
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d100      	bne.n	8003b02 <memset+0xa>
 8003b00:	4770      	bx	lr
 8003b02:	f803 1b01 	strb.w	r1, [r3], #1
 8003b06:	e7f9      	b.n	8003afc <memset+0x4>

08003b08 <_init>:
 8003b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0a:	bf00      	nop
 8003b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0e:	bc08      	pop	{r3}
 8003b10:	469e      	mov	lr, r3
 8003b12:	4770      	bx	lr

08003b14 <_fini>:
 8003b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b16:	bf00      	nop
 8003b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b1a:	bc08      	pop	{r3}
 8003b1c:	469e      	mov	lr, r3
 8003b1e:	4770      	bx	lr
